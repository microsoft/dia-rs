// Bindings generated by `windows-bindgen` 0.58.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

pub mod Windows {
    pub mod Foundation {
        windows_core::imp::define_interface!(
            AsyncActionCompletedHandler,
            AsyncActionCompletedHandler_Vtbl,
            0xa4ed5c81_76c9_40bd_8be6_b1d90fb20ae7
        );
        impl windows_core::RuntimeType for AsyncActionCompletedHandler {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        impl AsyncActionCompletedHandler {
            pub fn new<
                F: FnMut(Option<&IAsyncAction>, AsyncStatus) -> windows_core::Result<()>
                    + Send
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com = AsyncActionCompletedHandlerBox {
                    vtable: &AsyncActionCompletedHandlerBox::<F>::VTABLE,
                    count: windows_core::imp::RefCount::new(1),
                    invoke,
                };
                unsafe { core::mem::transmute(Box::new(com)) }
            }
            pub fn Invoke<P0>(
                &self,
                asyncinfo: P0,
                asyncstatus: AsyncStatus,
            ) -> windows_core::Result<()>
            where
                P0: windows_core::Param<IAsyncAction>,
            {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).Invoke)(
                        windows_core::Interface::as_raw(this),
                        asyncinfo.param().abi(),
                        asyncstatus,
                    )
                    .ok()
                }
            }
        }
        #[repr(C)]
        pub struct AsyncActionCompletedHandler_Vtbl {
            base__: windows_core::IUnknown_Vtbl,
            Invoke: unsafe extern "system" fn(
                this: *mut core::ffi::c_void,
                asyncinfo: *mut core::ffi::c_void,
                asyncstatus: AsyncStatus,
            ) -> windows_core::HRESULT,
        }
        #[repr(C)]
        struct AsyncActionCompletedHandlerBox<
            F: FnMut(Option<&IAsyncAction>, AsyncStatus) -> windows_core::Result<()> + Send + 'static,
        > {
            vtable: *const AsyncActionCompletedHandler_Vtbl,
            invoke: F,
            count: windows_core::imp::RefCount,
        }
        impl<
                F: FnMut(Option<&IAsyncAction>, AsyncStatus) -> windows_core::Result<()>
                    + Send
                    + 'static,
            > AsyncActionCompletedHandlerBox<F>
        {
            const VTABLE: AsyncActionCompletedHandler_Vtbl = AsyncActionCompletedHandler_Vtbl {
                base__: windows_core::IUnknown_Vtbl {
                    QueryInterface: Self::QueryInterface,
                    AddRef: Self::AddRef,
                    Release: Self::Release,
                },
                Invoke: Self::Invoke,
            };
            unsafe extern "system" fn QueryInterface(
                this: *mut core::ffi::c_void,
                iid: *const windows_core::GUID,
                interface: *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                if iid.is_null() || interface.is_null() {
                    return windows_core::HRESULT(-2147467261);
                }
                *interface = if *iid
                    == <AsyncActionCompletedHandler as windows_core::Interface>::IID
                    || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                    || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
                {
                    &mut (*this).vtable as *mut _ as _
                } else {
                    core::ptr::null_mut()
                };
                if (*interface).is_null() {
                    windows_core::HRESULT(-2147467262)
                } else {
                    (*this).count.add_ref();
                    windows_core::HRESULT(0)
                }
            }
            unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    let _ = Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: *mut core::ffi::c_void,
                asyncinfo: *mut core::ffi::c_void,
                asyncstatus: AsyncStatus,
            ) -> windows_core::HRESULT {
                let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
                (this.invoke)(windows_core::from_raw_borrowed(&asyncinfo), asyncstatus).into()
            }
        }
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct AsyncActionProgressHandler<TProgress>(
            windows_core::IUnknown,
            core::marker::PhantomData<TProgress>,
        )
        where
            TProgress: windows_core::RuntimeType + 'static;
        unsafe impl<TProgress: windows_core::RuntimeType + 'static> windows_core::Interface
            for AsyncActionProgressHandler<TProgress>
        {
            type Vtable = AsyncActionProgressHandler_Vtbl<TProgress>;
            const IID: windows_core::GUID =
                windows_core::GUID::from_signature(<Self as windows_core::RuntimeType>::SIGNATURE);
        }
        impl<TProgress: windows_core::RuntimeType + 'static> windows_core::RuntimeType
            for AsyncActionProgressHandler<TProgress>
        {
            const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::new()
                .push_slice(b"pinterface({6d844858-0cff-4590-ae89-95a5a5c8b4b8}")
                .push_slice(b";")
                .push_other(TProgress::SIGNATURE)
                .push_slice(b")");
        }
        impl<TProgress: windows_core::RuntimeType + 'static> AsyncActionProgressHandler<TProgress> {
            pub fn new<
                F: FnMut(
                        Option<&IAsyncActionWithProgress<TProgress>>,
                        &<TProgress as windows_core::Type<TProgress>>::Default,
                    ) -> windows_core::Result<()>
                    + Send
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com = AsyncActionProgressHandlerBox {
                    vtable: &AsyncActionProgressHandlerBox::<TProgress, F>::VTABLE,
                    count: windows_core::imp::RefCount::new(1),
                    invoke,
                };
                unsafe { core::mem::transmute(Box::new(com)) }
            }
            pub fn Invoke<P0, P1>(
                &self,
                asyncinfo: P0,
                progressinfo: P1,
            ) -> windows_core::Result<()>
            where
                P0: windows_core::Param<IAsyncActionWithProgress<TProgress>>,
                P1: windows_core::Param<TProgress>,
            {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).Invoke)(
                        windows_core::Interface::as_raw(this),
                        asyncinfo.param().abi(),
                        progressinfo.param().abi(),
                    )
                    .ok()
                }
            }
        }
        #[repr(C)]
        pub struct AsyncActionProgressHandler_Vtbl<TProgress>
        where
            TProgress: windows_core::RuntimeType + 'static,
        {
            base__: windows_core::IUnknown_Vtbl,
            Invoke: unsafe extern "system" fn(
                this: *mut core::ffi::c_void,
                asyncinfo: *mut core::ffi::c_void,
                progressinfo: windows_core::AbiType<TProgress>,
            ) -> windows_core::HRESULT,
            TProgress: core::marker::PhantomData<TProgress>,
        }
        #[repr(C)]
        struct AsyncActionProgressHandlerBox<
            TProgress,
            F: FnMut(
                    Option<&IAsyncActionWithProgress<TProgress>>,
                    &<TProgress as windows_core::Type<TProgress>>::Default,
                ) -> windows_core::Result<()>
                + Send
                + 'static,
        >
        where
            TProgress: windows_core::RuntimeType + 'static,
        {
            vtable: *const AsyncActionProgressHandler_Vtbl<TProgress>,
            invoke: F,
            count: windows_core::imp::RefCount,
        }
        impl<
                TProgress: windows_core::RuntimeType + 'static,
                F: FnMut(
                        Option<&IAsyncActionWithProgress<TProgress>>,
                        &<TProgress as windows_core::Type<TProgress>>::Default,
                    ) -> windows_core::Result<()>
                    + Send
                    + 'static,
            > AsyncActionProgressHandlerBox<TProgress, F>
        {
            const VTABLE: AsyncActionProgressHandler_Vtbl<TProgress> =
                AsyncActionProgressHandler_Vtbl::<TProgress> {
                    base__: windows_core::IUnknown_Vtbl {
                        QueryInterface: Self::QueryInterface,
                        AddRef: Self::AddRef,
                        Release: Self::Release,
                    },
                    Invoke: Self::Invoke,
                    TProgress: core::marker::PhantomData::<TProgress>,
                };
            unsafe extern "system" fn QueryInterface(
                this: *mut core::ffi::c_void,
                iid: *const windows_core::GUID,
                interface: *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                if iid.is_null() || interface.is_null() {
                    return windows_core::HRESULT(-2147467261);
                }
                *interface = if *iid
                    == <AsyncActionProgressHandler<TProgress> as windows_core::Interface>::IID
                    || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                    || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
                {
                    &mut (*this).vtable as *mut _ as _
                } else {
                    core::ptr::null_mut()
                };
                if (*interface).is_null() {
                    windows_core::HRESULT(-2147467262)
                } else {
                    (*this).count.add_ref();
                    windows_core::HRESULT(0)
                }
            }
            unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    let _ = Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: *mut core::ffi::c_void,
                asyncinfo: *mut core::ffi::c_void,
                progressinfo: windows_core::AbiType<TProgress>,
            ) -> windows_core::HRESULT {
                let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
                (this.invoke)(
                    windows_core::from_raw_borrowed(&asyncinfo),
                    core::mem::transmute(&progressinfo),
                )
                .into()
            }
        }
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct AsyncActionWithProgressCompletedHandler<TProgress>(
            windows_core::IUnknown,
            core::marker::PhantomData<TProgress>,
        )
        where
            TProgress: windows_core::RuntimeType + 'static;
        unsafe impl<TProgress: windows_core::RuntimeType + 'static> windows_core::Interface
            for AsyncActionWithProgressCompletedHandler<TProgress>
        {
            type Vtable = AsyncActionWithProgressCompletedHandler_Vtbl<TProgress>;
            const IID: windows_core::GUID =
                windows_core::GUID::from_signature(<Self as windows_core::RuntimeType>::SIGNATURE);
        }
        impl<TProgress: windows_core::RuntimeType + 'static> windows_core::RuntimeType
            for AsyncActionWithProgressCompletedHandler<TProgress>
        {
            const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::new()
                .push_slice(b"pinterface({9c029f91-cc84-44fd-ac26-0a6c4e555281}")
                .push_slice(b";")
                .push_other(TProgress::SIGNATURE)
                .push_slice(b")");
        }
        impl<TProgress: windows_core::RuntimeType + 'static>
            AsyncActionWithProgressCompletedHandler<TProgress>
        {
            pub fn new<
                F: FnMut(
                        Option<&IAsyncActionWithProgress<TProgress>>,
                        AsyncStatus,
                    ) -> windows_core::Result<()>
                    + Send
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com = AsyncActionWithProgressCompletedHandlerBox {
                    vtable: &AsyncActionWithProgressCompletedHandlerBox::<TProgress, F>::VTABLE,
                    count: windows_core::imp::RefCount::new(1),
                    invoke,
                };
                unsafe { core::mem::transmute(Box::new(com)) }
            }
            pub fn Invoke<P0>(
                &self,
                asyncinfo: P0,
                asyncstatus: AsyncStatus,
            ) -> windows_core::Result<()>
            where
                P0: windows_core::Param<IAsyncActionWithProgress<TProgress>>,
            {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).Invoke)(
                        windows_core::Interface::as_raw(this),
                        asyncinfo.param().abi(),
                        asyncstatus,
                    )
                    .ok()
                }
            }
        }
        #[repr(C)]
        pub struct AsyncActionWithProgressCompletedHandler_Vtbl<TProgress>
        where
            TProgress: windows_core::RuntimeType + 'static,
        {
            base__: windows_core::IUnknown_Vtbl,
            Invoke: unsafe extern "system" fn(
                this: *mut core::ffi::c_void,
                asyncinfo: *mut core::ffi::c_void,
                asyncstatus: AsyncStatus,
            ) -> windows_core::HRESULT,
            TProgress: core::marker::PhantomData<TProgress>,
        }
        #[repr(C)]
        struct AsyncActionWithProgressCompletedHandlerBox<
            TProgress,
            F: FnMut(
                    Option<&IAsyncActionWithProgress<TProgress>>,
                    AsyncStatus,
                ) -> windows_core::Result<()>
                + Send
                + 'static,
        >
        where
            TProgress: windows_core::RuntimeType + 'static,
        {
            vtable: *const AsyncActionWithProgressCompletedHandler_Vtbl<TProgress>,
            invoke: F,
            count: windows_core::imp::RefCount,
        }
        impl<
                TProgress: windows_core::RuntimeType + 'static,
                F: FnMut(
                        Option<&IAsyncActionWithProgress<TProgress>>,
                        AsyncStatus,
                    ) -> windows_core::Result<()>
                    + Send
                    + 'static,
            > AsyncActionWithProgressCompletedHandlerBox<TProgress, F>
        {
            const VTABLE: AsyncActionWithProgressCompletedHandler_Vtbl<TProgress> =
                AsyncActionWithProgressCompletedHandler_Vtbl::<TProgress> {
                    base__: windows_core::IUnknown_Vtbl {
                        QueryInterface: Self::QueryInterface,
                        AddRef: Self::AddRef,
                        Release: Self::Release,
                    },
                    Invoke: Self::Invoke,
                    TProgress: core::marker::PhantomData::<TProgress>,
                };
            unsafe extern "system" fn QueryInterface(
                this: *mut core::ffi::c_void,
                iid: *const windows_core::GUID,
                interface: *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                if iid.is_null() || interface.is_null() {
                    return windows_core::HRESULT(-2147467261);
                }
                * interface = if * iid == < AsyncActionWithProgressCompletedHandler < TProgress > as windows_core::Interface >::IID || * iid == < windows_core::IUnknown as windows_core::Interface >::IID || * iid == < windows_core::imp::IAgileObject as windows_core::Interface >::IID { & mut ( * this ) . vtable as * mut _ as _ } else { core::ptr::null_mut ( ) } ;
                if (*interface).is_null() {
                    windows_core::HRESULT(-2147467262)
                } else {
                    (*this).count.add_ref();
                    windows_core::HRESULT(0)
                }
            }
            unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    let _ = Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: *mut core::ffi::c_void,
                asyncinfo: *mut core::ffi::c_void,
                asyncstatus: AsyncStatus,
            ) -> windows_core::HRESULT {
                let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
                (this.invoke)(windows_core::from_raw_borrowed(&asyncinfo), asyncstatus).into()
            }
        }
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct AsyncOperationCompletedHandler<TResult>(
            windows_core::IUnknown,
            core::marker::PhantomData<TResult>,
        )
        where
            TResult: windows_core::RuntimeType + 'static;
        unsafe impl<TResult: windows_core::RuntimeType + 'static> windows_core::Interface
            for AsyncOperationCompletedHandler<TResult>
        {
            type Vtable = AsyncOperationCompletedHandler_Vtbl<TResult>;
            const IID: windows_core::GUID =
                windows_core::GUID::from_signature(<Self as windows_core::RuntimeType>::SIGNATURE);
        }
        impl<TResult: windows_core::RuntimeType + 'static> windows_core::RuntimeType
            for AsyncOperationCompletedHandler<TResult>
        {
            const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::new()
                .push_slice(b"pinterface({fcdcf02c-e5d8-4478-915a-4d90b74b83a5}")
                .push_slice(b";")
                .push_other(TResult::SIGNATURE)
                .push_slice(b")");
        }
        impl<TResult: windows_core::RuntimeType + 'static> AsyncOperationCompletedHandler<TResult> {
            pub fn new<
                F: FnMut(
                        Option<&IAsyncOperation<TResult>>,
                        AsyncStatus,
                    ) -> windows_core::Result<()>
                    + Send
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com = AsyncOperationCompletedHandlerBox {
                    vtable: &AsyncOperationCompletedHandlerBox::<TResult, F>::VTABLE,
                    count: windows_core::imp::RefCount::new(1),
                    invoke,
                };
                unsafe { core::mem::transmute(Box::new(com)) }
            }
            pub fn Invoke<P0>(
                &self,
                asyncinfo: P0,
                asyncstatus: AsyncStatus,
            ) -> windows_core::Result<()>
            where
                P0: windows_core::Param<IAsyncOperation<TResult>>,
            {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).Invoke)(
                        windows_core::Interface::as_raw(this),
                        asyncinfo.param().abi(),
                        asyncstatus,
                    )
                    .ok()
                }
            }
        }
        #[repr(C)]
        pub struct AsyncOperationCompletedHandler_Vtbl<TResult>
        where
            TResult: windows_core::RuntimeType + 'static,
        {
            base__: windows_core::IUnknown_Vtbl,
            Invoke: unsafe extern "system" fn(
                this: *mut core::ffi::c_void,
                asyncinfo: *mut core::ffi::c_void,
                asyncstatus: AsyncStatus,
            ) -> windows_core::HRESULT,
            TResult: core::marker::PhantomData<TResult>,
        }
        #[repr(C)]
        struct AsyncOperationCompletedHandlerBox<
            TResult,
            F: FnMut(Option<&IAsyncOperation<TResult>>, AsyncStatus) -> windows_core::Result<()>
                + Send
                + 'static,
        >
        where
            TResult: windows_core::RuntimeType + 'static,
        {
            vtable: *const AsyncOperationCompletedHandler_Vtbl<TResult>,
            invoke: F,
            count: windows_core::imp::RefCount,
        }
        impl<
                TResult: windows_core::RuntimeType + 'static,
                F: FnMut(
                        Option<&IAsyncOperation<TResult>>,
                        AsyncStatus,
                    ) -> windows_core::Result<()>
                    + Send
                    + 'static,
            > AsyncOperationCompletedHandlerBox<TResult, F>
        {
            const VTABLE: AsyncOperationCompletedHandler_Vtbl<TResult> =
                AsyncOperationCompletedHandler_Vtbl::<TResult> {
                    base__: windows_core::IUnknown_Vtbl {
                        QueryInterface: Self::QueryInterface,
                        AddRef: Self::AddRef,
                        Release: Self::Release,
                    },
                    Invoke: Self::Invoke,
                    TResult: core::marker::PhantomData::<TResult>,
                };
            unsafe extern "system" fn QueryInterface(
                this: *mut core::ffi::c_void,
                iid: *const windows_core::GUID,
                interface: *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                if iid.is_null() || interface.is_null() {
                    return windows_core::HRESULT(-2147467261);
                }
                *interface = if *iid
                    == <AsyncOperationCompletedHandler<TResult> as windows_core::Interface>::IID
                    || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                    || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
                {
                    &mut (*this).vtable as *mut _ as _
                } else {
                    core::ptr::null_mut()
                };
                if (*interface).is_null() {
                    windows_core::HRESULT(-2147467262)
                } else {
                    (*this).count.add_ref();
                    windows_core::HRESULT(0)
                }
            }
            unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    let _ = Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: *mut core::ffi::c_void,
                asyncinfo: *mut core::ffi::c_void,
                asyncstatus: AsyncStatus,
            ) -> windows_core::HRESULT {
                let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
                (this.invoke)(windows_core::from_raw_borrowed(&asyncinfo), asyncstatus).into()
            }
        }
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct AsyncOperationProgressHandler<TResult, TProgress>(
            windows_core::IUnknown,
            core::marker::PhantomData<TResult>,
            core::marker::PhantomData<TProgress>,
        )
        where
            TResult: windows_core::RuntimeType + 'static,
            TProgress: windows_core::RuntimeType + 'static;
        unsafe impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
            > windows_core::Interface for AsyncOperationProgressHandler<TResult, TProgress>
        {
            type Vtable = AsyncOperationProgressHandler_Vtbl<TResult, TProgress>;
            const IID: windows_core::GUID =
                windows_core::GUID::from_signature(<Self as windows_core::RuntimeType>::SIGNATURE);
        }
        impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
            > windows_core::RuntimeType for AsyncOperationProgressHandler<TResult, TProgress>
        {
            const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::new()
                .push_slice(b"pinterface({55690902-0aab-421a-8778-f8ce5026d758}")
                .push_slice(b";")
                .push_other(TResult::SIGNATURE)
                .push_slice(b";")
                .push_other(TProgress::SIGNATURE)
                .push_slice(b")");
        }
        impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
            > AsyncOperationProgressHandler<TResult, TProgress>
        {
            pub fn new<
                F: FnMut(
                        Option<&IAsyncOperationWithProgress<TResult, TProgress>>,
                        &<TProgress as windows_core::Type<TProgress>>::Default,
                    ) -> windows_core::Result<()>
                    + Send
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com = AsyncOperationProgressHandlerBox {
                    vtable: &AsyncOperationProgressHandlerBox::<TResult, TProgress, F>::VTABLE,
                    count: windows_core::imp::RefCount::new(1),
                    invoke,
                };
                unsafe { core::mem::transmute(Box::new(com)) }
            }
            pub fn Invoke<P0, P1>(
                &self,
                asyncinfo: P0,
                progressinfo: P1,
            ) -> windows_core::Result<()>
            where
                P0: windows_core::Param<IAsyncOperationWithProgress<TResult, TProgress>>,
                P1: windows_core::Param<TProgress>,
            {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).Invoke)(
                        windows_core::Interface::as_raw(this),
                        asyncinfo.param().abi(),
                        progressinfo.param().abi(),
                    )
                    .ok()
                }
            }
        }
        #[repr(C)]
        pub struct AsyncOperationProgressHandler_Vtbl<TResult, TProgress>
        where
            TResult: windows_core::RuntimeType + 'static,
            TProgress: windows_core::RuntimeType + 'static,
        {
            base__: windows_core::IUnknown_Vtbl,
            Invoke: unsafe extern "system" fn(
                this: *mut core::ffi::c_void,
                asyncinfo: *mut core::ffi::c_void,
                progressinfo: windows_core::AbiType<TProgress>,
            ) -> windows_core::HRESULT,
            TResult: core::marker::PhantomData<TResult>,
            TProgress: core::marker::PhantomData<TProgress>,
        }
        #[repr(C)]
        struct AsyncOperationProgressHandlerBox<
            TResult,
            TProgress,
            F: FnMut(
                    Option<&IAsyncOperationWithProgress<TResult, TProgress>>,
                    &<TProgress as windows_core::Type<TProgress>>::Default,
                ) -> windows_core::Result<()>
                + Send
                + 'static,
        >
        where
            TResult: windows_core::RuntimeType + 'static,
            TProgress: windows_core::RuntimeType + 'static,
        {
            vtable: *const AsyncOperationProgressHandler_Vtbl<TResult, TProgress>,
            invoke: F,
            count: windows_core::imp::RefCount,
        }
        impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
                F: FnMut(
                        Option<&IAsyncOperationWithProgress<TResult, TProgress>>,
                        &<TProgress as windows_core::Type<TProgress>>::Default,
                    ) -> windows_core::Result<()>
                    + Send
                    + 'static,
            > AsyncOperationProgressHandlerBox<TResult, TProgress, F>
        {
            const VTABLE: AsyncOperationProgressHandler_Vtbl<TResult, TProgress> =
                AsyncOperationProgressHandler_Vtbl::<TResult, TProgress> {
                    base__: windows_core::IUnknown_Vtbl {
                        QueryInterface: Self::QueryInterface,
                        AddRef: Self::AddRef,
                        Release: Self::Release,
                    },
                    Invoke: Self::Invoke,
                    TResult: core::marker::PhantomData::<TResult>,
                    TProgress: core::marker::PhantomData::<TProgress>,
                };
            unsafe extern "system" fn QueryInterface(
                this: *mut core::ffi::c_void,
                iid: *const windows_core::GUID,
                interface: *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                if iid.is_null() || interface.is_null() {
                    return windows_core::HRESULT(-2147467261);
                }
                * interface = if * iid == < AsyncOperationProgressHandler < TResult , TProgress > as windows_core::Interface >::IID || * iid == < windows_core::IUnknown as windows_core::Interface >::IID || * iid == < windows_core::imp::IAgileObject as windows_core::Interface >::IID { & mut ( * this ) . vtable as * mut _ as _ } else { core::ptr::null_mut ( ) } ;
                if (*interface).is_null() {
                    windows_core::HRESULT(-2147467262)
                } else {
                    (*this).count.add_ref();
                    windows_core::HRESULT(0)
                }
            }
            unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    let _ = Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: *mut core::ffi::c_void,
                asyncinfo: *mut core::ffi::c_void,
                progressinfo: windows_core::AbiType<TProgress>,
            ) -> windows_core::HRESULT {
                let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
                (this.invoke)(
                    windows_core::from_raw_borrowed(&asyncinfo),
                    core::mem::transmute(&progressinfo),
                )
                .into()
            }
        }
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct AsyncOperationWithProgressCompletedHandler<TResult, TProgress>(
            windows_core::IUnknown,
            core::marker::PhantomData<TResult>,
            core::marker::PhantomData<TProgress>,
        )
        where
            TResult: windows_core::RuntimeType + 'static,
            TProgress: windows_core::RuntimeType + 'static;
        unsafe impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
            > windows_core::Interface
            for AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            type Vtable = AsyncOperationWithProgressCompletedHandler_Vtbl<TResult, TProgress>;
            const IID: windows_core::GUID =
                windows_core::GUID::from_signature(<Self as windows_core::RuntimeType>::SIGNATURE);
        }
        impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
            > windows_core::RuntimeType
            for AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::new()
                .push_slice(b"pinterface({e85df41d-6aa7-46e3-a8e2-f009d840c627}")
                .push_slice(b";")
                .push_other(TResult::SIGNATURE)
                .push_slice(b";")
                .push_other(TProgress::SIGNATURE)
                .push_slice(b")");
        }
        impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
            > AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            pub fn new<
                F: FnMut(
                        Option<&IAsyncOperationWithProgress<TResult, TProgress>>,
                        AsyncStatus,
                    ) -> windows_core::Result<()>
                    + Send
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com =
                    AsyncOperationWithProgressCompletedHandlerBox {
                        vtable: &AsyncOperationWithProgressCompletedHandlerBox::<
                            TResult,
                            TProgress,
                            F,
                        >::VTABLE,
                        count: windows_core::imp::RefCount::new(1),
                        invoke,
                    };
                unsafe { core::mem::transmute(Box::new(com)) }
            }
            pub fn Invoke<P0>(
                &self,
                asyncinfo: P0,
                asyncstatus: AsyncStatus,
            ) -> windows_core::Result<()>
            where
                P0: windows_core::Param<IAsyncOperationWithProgress<TResult, TProgress>>,
            {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).Invoke)(
                        windows_core::Interface::as_raw(this),
                        asyncinfo.param().abi(),
                        asyncstatus,
                    )
                    .ok()
                }
            }
        }
        #[repr(C)]
        pub struct AsyncOperationWithProgressCompletedHandler_Vtbl<TResult, TProgress>
        where
            TResult: windows_core::RuntimeType + 'static,
            TProgress: windows_core::RuntimeType + 'static,
        {
            base__: windows_core::IUnknown_Vtbl,
            Invoke: unsafe extern "system" fn(
                this: *mut core::ffi::c_void,
                asyncinfo: *mut core::ffi::c_void,
                asyncstatus: AsyncStatus,
            ) -> windows_core::HRESULT,
            TResult: core::marker::PhantomData<TResult>,
            TProgress: core::marker::PhantomData<TProgress>,
        }
        #[repr(C)]
        struct AsyncOperationWithProgressCompletedHandlerBox<
            TResult,
            TProgress,
            F: FnMut(
                    Option<&IAsyncOperationWithProgress<TResult, TProgress>>,
                    AsyncStatus,
                ) -> windows_core::Result<()>
                + Send
                + 'static,
        >
        where
            TResult: windows_core::RuntimeType + 'static,
            TProgress: windows_core::RuntimeType + 'static,
        {
            vtable: *const AsyncOperationWithProgressCompletedHandler_Vtbl<TResult, TProgress>,
            invoke: F,
            count: windows_core::imp::RefCount,
        }
        impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
                F: FnMut(
                        Option<&IAsyncOperationWithProgress<TResult, TProgress>>,
                        AsyncStatus,
                    ) -> windows_core::Result<()>
                    + Send
                    + 'static,
            > AsyncOperationWithProgressCompletedHandlerBox<TResult, TProgress, F>
        {
            const VTABLE: AsyncOperationWithProgressCompletedHandler_Vtbl<TResult, TProgress> =
                AsyncOperationWithProgressCompletedHandler_Vtbl::<TResult, TProgress> {
                    base__: windows_core::IUnknown_Vtbl {
                        QueryInterface: Self::QueryInterface,
                        AddRef: Self::AddRef,
                        Release: Self::Release,
                    },
                    Invoke: Self::Invoke,
                    TResult: core::marker::PhantomData::<TResult>,
                    TProgress: core::marker::PhantomData::<TProgress>,
                };
            unsafe extern "system" fn QueryInterface(
                this: *mut core::ffi::c_void,
                iid: *const windows_core::GUID,
                interface: *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                if iid.is_null() || interface.is_null() {
                    return windows_core::HRESULT(-2147467261);
                }
                *interface = if *iid == <AsyncOperationWithProgressCompletedHandler<
                    TResult,
                    TProgress,
                > as windows_core::Interface>::IID
                    || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                    || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
                {
                    &mut (*this).vtable as *mut _ as _
                } else {
                    core::ptr::null_mut()
                };
                if (*interface).is_null() {
                    windows_core::HRESULT(-2147467262)
                } else {
                    (*this).count.add_ref();
                    windows_core::HRESULT(0)
                }
            }
            unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    let _ = Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: *mut core::ffi::c_void,
                asyncinfo: *mut core::ffi::c_void,
                asyncstatus: AsyncStatus,
            ) -> windows_core::HRESULT {
                let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
                (this.invoke)(windows_core::from_raw_borrowed(&asyncinfo), asyncstatus).into()
            }
        }
        #[repr(transparent)]
        #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
        pub struct AsyncStatus(pub i32);
        impl AsyncStatus {
            pub const Canceled: Self = Self(2i32);
            pub const Completed: Self = Self(1i32);
            pub const Error: Self = Self(3i32);
            pub const Started: Self = Self(0i32);
        }
        impl windows_core::TypeKind for AsyncStatus {
            type TypeKind = windows_core::CopyType;
        }
        impl windows_core::RuntimeType for AsyncStatus {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::from_slice(
                    b"enum(Windows.Foundation.AsyncStatus;i4)",
                );
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Default, PartialEq)]
        pub struct DateTime {
            pub UniversalTime: i64,
        }
        impl windows_core::TypeKind for DateTime {
            type TypeKind = windows_core::CopyType;
        }
        impl windows_core::RuntimeType for DateTime {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::from_slice(
                    b"struct(Windows.Foundation.DateTime;i8)",
                );
        }
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct Deferral(windows_core::IUnknown);
        windows_core::imp::interface_hierarchy!(
            Deferral,
            windows_core::IUnknown,
            windows_core::IInspectable
        );
        windows_core::imp::required_hierarchy!(Deferral, IClosable);
        impl Deferral {
            pub fn Close(&self) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IClosable>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(
                        this,
                    ))
                    .ok()
                }
            }
            pub fn Complete(&self) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).Complete)(
                        windows_core::Interface::as_raw(this),
                    )
                    .ok()
                }
            }
            pub fn Create<P0>(handler: P0) -> windows_core::Result<Deferral>
            where
                P0: windows_core::Param<DeferralCompletedHandler>,
            {
                Self::IDeferralFactory(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Create)(
                        windows_core::Interface::as_raw(this),
                        handler.param().abi(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            fn IDeferralFactory<R, F: FnOnce(&IDeferralFactory) -> windows_core::Result<R>>(
                callback: F,
            ) -> windows_core::Result<R> {
                static SHARED: windows_core::imp::FactoryCache<Deferral, IDeferralFactory> =
                    windows_core::imp::FactoryCache::new();
                SHARED.call(callback)
            }
        }
        impl windows_core::RuntimeType for Deferral {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_class::<Self, IDeferral>();
        }
        unsafe impl windows_core::Interface for Deferral {
            type Vtable = <IDeferral as windows_core::Interface>::Vtable;
            const IID: windows_core::GUID = <IDeferral as windows_core::Interface>::IID;
        }
        impl windows_core::RuntimeName for Deferral {
            const NAME: &'static str = "Windows.Foundation.Deferral";
        }
        unsafe impl Send for Deferral {}
        unsafe impl Sync for Deferral {}
        windows_core::imp::define_interface!(
            DeferralCompletedHandler,
            DeferralCompletedHandler_Vtbl,
            0xed32a372_f3c8_4faa_9cfb_470148da3888
        );
        impl windows_core::RuntimeType for DeferralCompletedHandler {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        impl DeferralCompletedHandler {
            pub fn new<F: FnMut() -> windows_core::Result<()> + Send + 'static>(invoke: F) -> Self {
                let com = DeferralCompletedHandlerBox {
                    vtable: &DeferralCompletedHandlerBox::<F>::VTABLE,
                    count: windows_core::imp::RefCount::new(1),
                    invoke,
                };
                unsafe { core::mem::transmute(Box::new(com)) }
            }
            pub fn Invoke(&self) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).Invoke)(windows_core::Interface::as_raw(
                        this,
                    ))
                    .ok()
                }
            }
        }
        #[repr(C)]
        pub struct DeferralCompletedHandler_Vtbl {
            base__: windows_core::IUnknown_Vtbl,
            Invoke:
                unsafe extern "system" fn(this: *mut core::ffi::c_void) -> windows_core::HRESULT,
        }
        #[repr(C)]
        struct DeferralCompletedHandlerBox<F: FnMut() -> windows_core::Result<()> + Send + 'static> {
            vtable: *const DeferralCompletedHandler_Vtbl,
            invoke: F,
            count: windows_core::imp::RefCount,
        }
        impl<F: FnMut() -> windows_core::Result<()> + Send + 'static> DeferralCompletedHandlerBox<F> {
            const VTABLE: DeferralCompletedHandler_Vtbl = DeferralCompletedHandler_Vtbl {
                base__: windows_core::IUnknown_Vtbl {
                    QueryInterface: Self::QueryInterface,
                    AddRef: Self::AddRef,
                    Release: Self::Release,
                },
                Invoke: Self::Invoke,
            };
            unsafe extern "system" fn QueryInterface(
                this: *mut core::ffi::c_void,
                iid: *const windows_core::GUID,
                interface: *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                if iid.is_null() || interface.is_null() {
                    return windows_core::HRESULT(-2147467261);
                }
                *interface = if *iid == <DeferralCompletedHandler as windows_core::Interface>::IID
                    || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                    || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
                {
                    &mut (*this).vtable as *mut _ as _
                } else {
                    core::ptr::null_mut()
                };
                if (*interface).is_null() {
                    windows_core::HRESULT(-2147467262)
                } else {
                    (*this).count.add_ref();
                    windows_core::HRESULT(0)
                }
            }
            unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    let _ = Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
                (this.invoke)().into()
            }
        }
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct EventHandler<T>(windows_core::IUnknown, core::marker::PhantomData<T>)
        where
            T: windows_core::RuntimeType + 'static;
        unsafe impl<T: windows_core::RuntimeType + 'static> windows_core::Interface for EventHandler<T> {
            type Vtable = EventHandler_Vtbl<T>;
            const IID: windows_core::GUID =
                windows_core::GUID::from_signature(<Self as windows_core::RuntimeType>::SIGNATURE);
        }
        impl<T: windows_core::RuntimeType + 'static> windows_core::RuntimeType for EventHandler<T> {
            const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::new()
                .push_slice(b"pinterface({9de1c535-6ae1-11e0-84e1-18a905bcc53f}")
                .push_slice(b";")
                .push_other(T::SIGNATURE)
                .push_slice(b")");
        }
        impl<T: windows_core::RuntimeType + 'static> EventHandler<T> {
            pub fn new<
                F: FnMut(
                        Option<&windows_core::IInspectable>,
                        &<T as windows_core::Type<T>>::Default,
                    ) -> windows_core::Result<()>
                    + Send
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com = EventHandlerBox {
                    vtable: &EventHandlerBox::<T, F>::VTABLE,
                    count: windows_core::imp::RefCount::new(1),
                    invoke,
                };
                unsafe { core::mem::transmute(Box::new(com)) }
            }
            pub fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
            where
                P0: windows_core::Param<windows_core::IInspectable>,
                P1: windows_core::Param<T>,
            {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).Invoke)(
                        windows_core::Interface::as_raw(this),
                        sender.param().abi(),
                        args.param().abi(),
                    )
                    .ok()
                }
            }
        }
        #[repr(C)]
        pub struct EventHandler_Vtbl<T>
        where
            T: windows_core::RuntimeType + 'static,
        {
            base__: windows_core::IUnknown_Vtbl,
            Invoke: unsafe extern "system" fn(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: windows_core::AbiType<T>,
            ) -> windows_core::HRESULT,
            T: core::marker::PhantomData<T>,
        }
        #[repr(C)]
        struct EventHandlerBox<
            T,
            F: FnMut(
                    Option<&windows_core::IInspectable>,
                    &<T as windows_core::Type<T>>::Default,
                ) -> windows_core::Result<()>
                + Send
                + 'static,
        >
        where
            T: windows_core::RuntimeType + 'static,
        {
            vtable: *const EventHandler_Vtbl<T>,
            invoke: F,
            count: windows_core::imp::RefCount,
        }
        impl<
                T: windows_core::RuntimeType + 'static,
                F: FnMut(
                        Option<&windows_core::IInspectable>,
                        &<T as windows_core::Type<T>>::Default,
                    ) -> windows_core::Result<()>
                    + Send
                    + 'static,
            > EventHandlerBox<T, F>
        {
            const VTABLE: EventHandler_Vtbl<T> = EventHandler_Vtbl::<T> {
                base__: windows_core::IUnknown_Vtbl {
                    QueryInterface: Self::QueryInterface,
                    AddRef: Self::AddRef,
                    Release: Self::Release,
                },
                Invoke: Self::Invoke,
                T: core::marker::PhantomData::<T>,
            };
            unsafe extern "system" fn QueryInterface(
                this: *mut core::ffi::c_void,
                iid: *const windows_core::GUID,
                interface: *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                if iid.is_null() || interface.is_null() {
                    return windows_core::HRESULT(-2147467261);
                }
                *interface = if *iid == <EventHandler<T> as windows_core::Interface>::IID
                    || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                    || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
                {
                    &mut (*this).vtable as *mut _ as _
                } else {
                    core::ptr::null_mut()
                };
                if (*interface).is_null() {
                    windows_core::HRESULT(-2147467262)
                } else {
                    (*this).count.add_ref();
                    windows_core::HRESULT(0)
                }
            }
            unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    let _ = Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: *mut core::ffi::c_void,
                sender: *mut core::ffi::c_void,
                args: windows_core::AbiType<T>,
            ) -> windows_core::HRESULT {
                let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
                (this.invoke)(
                    windows_core::from_raw_borrowed(&sender),
                    core::mem::transmute(&args),
                )
                .into()
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Default, PartialEq)]
        pub struct EventRegistrationToken {
            pub Value: i64,
        }
        impl windows_core::TypeKind for EventRegistrationToken {
            type TypeKind = windows_core::CopyType;
        }
        impl windows_core::RuntimeType for EventRegistrationToken {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::from_slice(
                    b"struct(Windows.Foundation.EventRegistrationToken;i8)",
                );
        }
        pub struct GuidHelper;
        impl GuidHelper {
            pub fn CreateNewGuid() -> windows_core::Result<windows_core::GUID> {
                Self::IGuidHelperStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateNewGuid)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                })
            }
            pub fn Empty() -> windows_core::Result<windows_core::GUID> {
                Self::IGuidHelperStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Empty)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                })
            }
            pub fn Equals(
                target: windows_core::GUID,
                value: windows_core::GUID,
            ) -> windows_core::Result<bool> {
                Self::IGuidHelperStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Equals)(
                        windows_core::Interface::as_raw(this),
                        &target,
                        &value,
                        &mut result__,
                    )
                    .map(|| result__)
                })
            }
            fn IGuidHelperStatics<R, F: FnOnce(&IGuidHelperStatics) -> windows_core::Result<R>>(
                callback: F,
            ) -> windows_core::Result<R> {
                static SHARED: windows_core::imp::FactoryCache<GuidHelper, IGuidHelperStatics> =
                    windows_core::imp::FactoryCache::new();
                SHARED.call(callback)
            }
        }
        impl windows_core::RuntimeName for GuidHelper {
            const NAME: &'static str = "Windows.Foundation.GuidHelper";
        }
        windows_core::imp::define_interface!(
            IAsyncAction,
            IAsyncAction_Vtbl,
            0x5a648006_843a_4da9_865b_9d26e5dfad7b
        );
        impl windows_core::RuntimeType for IAsyncAction {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        windows_core::imp::interface_hierarchy!(
            IAsyncAction,
            windows_core::IUnknown,
            windows_core::IInspectable
        );
        windows_core::imp::required_hierarchy!(IAsyncAction, IAsyncInfo);
        impl IAsyncAction {
            pub fn SetCompleted<P0>(&self, handler: P0) -> windows_core::Result<()>
            where
                P0: windows_core::Param<AsyncActionCompletedHandler>,
            {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).SetCompleted)(
                        windows_core::Interface::as_raw(this),
                        handler.param().abi(),
                    )
                    .ok()
                }
            }
            pub fn Completed(&self) -> windows_core::Result<AsyncActionCompletedHandler> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Completed)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                }
            }
            pub fn GetResults(&self) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetResults)(
                        windows_core::Interface::as_raw(this),
                    )
                    .ok()
                }
            }
            pub fn Id(&self) -> windows_core::Result<u32> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Id)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn Status(&self) -> windows_core::Result<AsyncStatus> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Status)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn ErrorCode(&self) -> windows_core::Result<windows_core::HRESULT> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).ErrorCode)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn Cancel(&self) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).Cancel)(windows_core::Interface::as_raw(
                        this,
                    ))
                    .ok()
                }
            }
            pub fn Close(&self) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(
                        this,
                    ))
                    .ok()
                }
            }
        }
        unsafe impl Send for IAsyncAction {}
        unsafe impl Sync for IAsyncAction {}
        impl windows_core::RuntimeName for IAsyncAction {
            const NAME: &'static str = "Windows.Foundation.IAsyncAction";
        }
        pub trait IAsyncAction_Impl: IAsyncInfo_Impl {
            fn SetCompleted(
                &self,
                handler: Option<&AsyncActionCompletedHandler>,
            ) -> windows_core::Result<()>;
            fn Completed(&self) -> windows_core::Result<AsyncActionCompletedHandler>;
            fn GetResults(&self) -> windows_core::Result<()>;
        }
        impl IAsyncAction_Vtbl {
            pub const fn new<Identity: IAsyncAction_Impl, const OFFSET: isize>() -> Self {
                unsafe extern "system" fn SetCompleted<
                    Identity: IAsyncAction_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    handler: *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IAsyncAction_Impl::SetCompleted(this, windows_core::from_raw_borrowed(&handler))
                        .into()
                }
                unsafe extern "system" fn Completed<
                    Identity: IAsyncAction_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IAsyncAction_Impl::Completed(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            core::mem::forget(ok__);
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetResults<
                    Identity: IAsyncAction_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IAsyncAction_Impl::GetResults(this).into()
                }
                Self {
                    base__: windows_core::IInspectable_Vtbl::new::<Identity, IAsyncAction, OFFSET>(
                    ),
                    SetCompleted: SetCompleted::<Identity, OFFSET>,
                    Completed: Completed::<Identity, OFFSET>,
                    GetResults: GetResults::<Identity, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IAsyncAction as windows_core::Interface>::IID
            }
        }
        #[repr(C)]
        pub struct IAsyncAction_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub SetCompleted: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Completed: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub GetResults:
                unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        }
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct IAsyncActionWithProgress<TProgress>(
            windows_core::IUnknown,
            core::marker::PhantomData<TProgress>,
        )
        where
            TProgress: windows_core::RuntimeType + 'static;
        impl<TProgress: windows_core::RuntimeType + 'static>
            windows_core::imp::CanInto<windows_core::IUnknown>
            for IAsyncActionWithProgress<TProgress>
        {
        }
        impl<TProgress: windows_core::RuntimeType + 'static>
            windows_core::imp::CanInto<windows_core::IInspectable>
            for IAsyncActionWithProgress<TProgress>
        {
        }
        unsafe impl<TProgress: windows_core::RuntimeType + 'static> windows_core::Interface
            for IAsyncActionWithProgress<TProgress>
        {
            type Vtable = IAsyncActionWithProgress_Vtbl<TProgress>;
            const IID: windows_core::GUID =
                windows_core::GUID::from_signature(<Self as windows_core::RuntimeType>::SIGNATURE);
        }
        impl<TProgress: windows_core::RuntimeType + 'static> windows_core::RuntimeType
            for IAsyncActionWithProgress<TProgress>
        {
            const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::new()
                .push_slice(b"pinterface({1f6db258-e803-48a1-9546-eb7353398884}")
                .push_slice(b";")
                .push_other(TProgress::SIGNATURE)
                .push_slice(b")");
        }
        impl<TProgress: windows_core::RuntimeType + 'static> windows_core::imp::CanInto<IAsyncInfo>
            for IAsyncActionWithProgress<TProgress>
        {
            const QUERY: bool = true;
        }
        impl<TProgress: windows_core::RuntimeType + 'static> IAsyncActionWithProgress<TProgress> {
            pub fn SetProgress<P0>(&self, handler: P0) -> windows_core::Result<()>
            where
                P0: windows_core::Param<AsyncActionProgressHandler<TProgress>>,
            {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).SetProgress)(
                        windows_core::Interface::as_raw(this),
                        handler.param().abi(),
                    )
                    .ok()
                }
            }
            pub fn Progress(&self) -> windows_core::Result<AsyncActionProgressHandler<TProgress>> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Progress)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                }
            }
            pub fn SetCompleted<P0>(&self, handler: P0) -> windows_core::Result<()>
            where
                P0: windows_core::Param<AsyncActionWithProgressCompletedHandler<TProgress>>,
            {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).SetCompleted)(
                        windows_core::Interface::as_raw(this),
                        handler.param().abi(),
                    )
                    .ok()
                }
            }
            pub fn Completed(
                &self,
            ) -> windows_core::Result<AsyncActionWithProgressCompletedHandler<TProgress>>
            {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Completed)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                }
            }
            pub fn GetResults(&self) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetResults)(
                        windows_core::Interface::as_raw(this),
                    )
                    .ok()
                }
            }
            pub fn Id(&self) -> windows_core::Result<u32> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Id)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn Status(&self) -> windows_core::Result<AsyncStatus> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Status)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn ErrorCode(&self) -> windows_core::Result<windows_core::HRESULT> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).ErrorCode)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn Cancel(&self) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).Cancel)(windows_core::Interface::as_raw(
                        this,
                    ))
                    .ok()
                }
            }
            pub fn Close(&self) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(
                        this,
                    ))
                    .ok()
                }
            }
        }
        unsafe impl<TProgress: windows_core::RuntimeType + 'static> Send
            for IAsyncActionWithProgress<TProgress>
        {
        }
        unsafe impl<TProgress: windows_core::RuntimeType + 'static> Sync
            for IAsyncActionWithProgress<TProgress>
        {
        }
        impl<TProgress: windows_core::RuntimeType + 'static> windows_core::RuntimeName
            for IAsyncActionWithProgress<TProgress>
        {
            const NAME: &'static str = "Windows.Foundation.IAsyncActionWithProgress";
        }
        pub trait IAsyncActionWithProgress_Impl<TProgress>: IAsyncInfo_Impl
        where
            TProgress: windows_core::RuntimeType + 'static,
        {
            fn SetProgress(
                &self,
                handler: Option<&AsyncActionProgressHandler<TProgress>>,
            ) -> windows_core::Result<()>;
            fn Progress(&self) -> windows_core::Result<AsyncActionProgressHandler<TProgress>>;
            fn SetCompleted(
                &self,
                handler: Option<&AsyncActionWithProgressCompletedHandler<TProgress>>,
            ) -> windows_core::Result<()>;
            fn Completed(
                &self,
            ) -> windows_core::Result<AsyncActionWithProgressCompletedHandler<TProgress>>;
            fn GetResults(&self) -> windows_core::Result<()>;
        }
        impl<TProgress: windows_core::RuntimeType + 'static> IAsyncActionWithProgress_Vtbl<TProgress> {
            pub const fn new<
                Identity: IAsyncActionWithProgress_Impl<TProgress>,
                const OFFSET: isize,
            >() -> Self {
                unsafe extern "system" fn SetProgress<
                    TProgress: windows_core::RuntimeType + 'static,
                    Identity: IAsyncActionWithProgress_Impl<TProgress>,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    handler: *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IAsyncActionWithProgress_Impl::SetProgress(
                        this,
                        windows_core::from_raw_borrowed(&handler),
                    )
                    .into()
                }
                unsafe extern "system" fn Progress<
                    TProgress: windows_core::RuntimeType + 'static,
                    Identity: IAsyncActionWithProgress_Impl<TProgress>,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IAsyncActionWithProgress_Impl::Progress(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            core::mem::forget(ok__);
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn SetCompleted<
                    TProgress: windows_core::RuntimeType + 'static,
                    Identity: IAsyncActionWithProgress_Impl<TProgress>,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    handler: *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IAsyncActionWithProgress_Impl::SetCompleted(
                        this,
                        windows_core::from_raw_borrowed(&handler),
                    )
                    .into()
                }
                unsafe extern "system" fn Completed<
                    TProgress: windows_core::RuntimeType + 'static,
                    Identity: IAsyncActionWithProgress_Impl<TProgress>,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IAsyncActionWithProgress_Impl::Completed(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            core::mem::forget(ok__);
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetResults<
                    TProgress: windows_core::RuntimeType + 'static,
                    Identity: IAsyncActionWithProgress_Impl<TProgress>,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IAsyncActionWithProgress_Impl::GetResults(this).into()
                }
                Self {
                    base__: windows_core::IInspectable_Vtbl::new::<
                        Identity,
                        IAsyncActionWithProgress<TProgress>,
                        OFFSET,
                    >(),
                    SetProgress: SetProgress::<TProgress, Identity, OFFSET>,
                    Progress: Progress::<TProgress, Identity, OFFSET>,
                    SetCompleted: SetCompleted::<TProgress, Identity, OFFSET>,
                    Completed: Completed::<TProgress, Identity, OFFSET>,
                    GetResults: GetResults::<TProgress, Identity, OFFSET>,
                    TProgress: core::marker::PhantomData::<TProgress>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IAsyncActionWithProgress<TProgress> as windows_core::Interface>::IID
            }
        }
        #[repr(C)]
        pub struct IAsyncActionWithProgress_Vtbl<TProgress>
        where
            TProgress: windows_core::RuntimeType + 'static,
        {
            pub base__: windows_core::IInspectable_Vtbl,
            pub SetProgress: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Progress: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub SetCompleted: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Completed: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub GetResults:
                unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
            TProgress: core::marker::PhantomData<TProgress>,
        }
        windows_core::imp::define_interface!(
            IAsyncInfo,
            IAsyncInfo_Vtbl,
            0x00000036_0000_0000_c000_000000000046
        );
        impl windows_core::RuntimeType for IAsyncInfo {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        windows_core::imp::interface_hierarchy!(
            IAsyncInfo,
            windows_core::IUnknown,
            windows_core::IInspectable
        );
        impl IAsyncInfo {
            pub fn Id(&self) -> windows_core::Result<u32> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Id)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn Status(&self) -> windows_core::Result<AsyncStatus> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Status)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn ErrorCode(&self) -> windows_core::Result<windows_core::HRESULT> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).ErrorCode)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn Cancel(&self) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).Cancel)(windows_core::Interface::as_raw(
                        this,
                    ))
                    .ok()
                }
            }
            pub fn Close(&self) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(
                        this,
                    ))
                    .ok()
                }
            }
        }
        impl windows_core::RuntimeName for IAsyncInfo {
            const NAME: &'static str = "Windows.Foundation.IAsyncInfo";
        }
        pub trait IAsyncInfo_Impl: windows_core::IUnknownImpl {
            fn Id(&self) -> windows_core::Result<u32>;
            fn Status(&self) -> windows_core::Result<AsyncStatus>;
            fn ErrorCode(&self) -> windows_core::Result<windows_core::HRESULT>;
            fn Cancel(&self) -> windows_core::Result<()>;
            fn Close(&self) -> windows_core::Result<()>;
        }
        impl IAsyncInfo_Vtbl {
            pub const fn new<Identity: IAsyncInfo_Impl, const OFFSET: isize>() -> Self {
                unsafe extern "system" fn Id<Identity: IAsyncInfo_Impl, const OFFSET: isize>(
                    this: *mut core::ffi::c_void,
                    result__: *mut u32,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IAsyncInfo_Impl::Id(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn Status<Identity: IAsyncInfo_Impl, const OFFSET: isize>(
                    this: *mut core::ffi::c_void,
                    result__: *mut AsyncStatus,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IAsyncInfo_Impl::Status(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn ErrorCode<
                    Identity: IAsyncInfo_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut windows_core::HRESULT,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IAsyncInfo_Impl::ErrorCode(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn Cancel<Identity: IAsyncInfo_Impl, const OFFSET: isize>(
                    this: *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IAsyncInfo_Impl::Cancel(this).into()
                }
                unsafe extern "system" fn Close<Identity: IAsyncInfo_Impl, const OFFSET: isize>(
                    this: *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IAsyncInfo_Impl::Close(this).into()
                }
                Self {
                    base__: windows_core::IInspectable_Vtbl::new::<Identity, IAsyncInfo, OFFSET>(),
                    Id: Id::<Identity, OFFSET>,
                    Status: Status::<Identity, OFFSET>,
                    ErrorCode: ErrorCode::<Identity, OFFSET>,
                    Cancel: Cancel::<Identity, OFFSET>,
                    Close: Close::<Identity, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IAsyncInfo as windows_core::Interface>::IID
            }
        }
        #[repr(C)]
        pub struct IAsyncInfo_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub Id: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
            ) -> windows_core::HRESULT,
            pub Status: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut AsyncStatus,
            ) -> windows_core::HRESULT,
            pub ErrorCode: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut windows_core::HRESULT,
            ) -> windows_core::HRESULT,
            pub Cancel: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
            pub Close: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        }
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct IAsyncOperation<TResult>(
            windows_core::IUnknown,
            core::marker::PhantomData<TResult>,
        )
        where
            TResult: windows_core::RuntimeType + 'static;
        impl<TResult: windows_core::RuntimeType + 'static>
            windows_core::imp::CanInto<windows_core::IUnknown> for IAsyncOperation<TResult>
        {
        }
        impl<TResult: windows_core::RuntimeType + 'static>
            windows_core::imp::CanInto<windows_core::IInspectable> for IAsyncOperation<TResult>
        {
        }
        unsafe impl<TResult: windows_core::RuntimeType + 'static> windows_core::Interface
            for IAsyncOperation<TResult>
        {
            type Vtable = IAsyncOperation_Vtbl<TResult>;
            const IID: windows_core::GUID =
                windows_core::GUID::from_signature(<Self as windows_core::RuntimeType>::SIGNATURE);
        }
        impl<TResult: windows_core::RuntimeType + 'static> windows_core::RuntimeType
            for IAsyncOperation<TResult>
        {
            const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::new()
                .push_slice(b"pinterface({9fc2b0bb-e446-44e2-aa61-9cab8f636af2}")
                .push_slice(b";")
                .push_other(TResult::SIGNATURE)
                .push_slice(b")");
        }
        impl<TResult: windows_core::RuntimeType + 'static> windows_core::imp::CanInto<IAsyncInfo>
            for IAsyncOperation<TResult>
        {
            const QUERY: bool = true;
        }
        impl<TResult: windows_core::RuntimeType + 'static> IAsyncOperation<TResult> {
            pub fn SetCompleted<P0>(&self, handler: P0) -> windows_core::Result<()>
            where
                P0: windows_core::Param<AsyncOperationCompletedHandler<TResult>>,
            {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).SetCompleted)(
                        windows_core::Interface::as_raw(this),
                        handler.param().abi(),
                    )
                    .ok()
                }
            }
            pub fn Completed(
                &self,
            ) -> windows_core::Result<AsyncOperationCompletedHandler<TResult>> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Completed)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                }
            }
            pub fn GetResults(&self) -> windows_core::Result<TResult> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetResults)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                }
            }
            pub fn Id(&self) -> windows_core::Result<u32> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Id)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn Status(&self) -> windows_core::Result<AsyncStatus> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Status)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn ErrorCode(&self) -> windows_core::Result<windows_core::HRESULT> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).ErrorCode)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn Cancel(&self) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).Cancel)(windows_core::Interface::as_raw(
                        this,
                    ))
                    .ok()
                }
            }
            pub fn Close(&self) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(
                        this,
                    ))
                    .ok()
                }
            }
        }
        unsafe impl<TResult: windows_core::RuntimeType + 'static> Send for IAsyncOperation<TResult> {}
        unsafe impl<TResult: windows_core::RuntimeType + 'static> Sync for IAsyncOperation<TResult> {}
        impl<TResult: windows_core::RuntimeType + 'static> windows_core::RuntimeName
            for IAsyncOperation<TResult>
        {
            const NAME: &'static str = "Windows.Foundation.IAsyncOperation";
        }
        pub trait IAsyncOperation_Impl<TResult>: IAsyncInfo_Impl
        where
            TResult: windows_core::RuntimeType + 'static,
        {
            fn SetCompleted(
                &self,
                handler: Option<&AsyncOperationCompletedHandler<TResult>>,
            ) -> windows_core::Result<()>;
            fn Completed(&self) -> windows_core::Result<AsyncOperationCompletedHandler<TResult>>;
            fn GetResults(&self) -> windows_core::Result<TResult>;
        }
        impl<TResult: windows_core::RuntimeType + 'static> IAsyncOperation_Vtbl<TResult> {
            pub const fn new<Identity: IAsyncOperation_Impl<TResult>, const OFFSET: isize>() -> Self
            {
                unsafe extern "system" fn SetCompleted<
                    TResult: windows_core::RuntimeType + 'static,
                    Identity: IAsyncOperation_Impl<TResult>,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    handler: *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IAsyncOperation_Impl::SetCompleted(
                        this,
                        windows_core::from_raw_borrowed(&handler),
                    )
                    .into()
                }
                unsafe extern "system" fn Completed<
                    TResult: windows_core::RuntimeType + 'static,
                    Identity: IAsyncOperation_Impl<TResult>,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IAsyncOperation_Impl::Completed(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            core::mem::forget(ok__);
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetResults<
                    TResult: windows_core::RuntimeType + 'static,
                    Identity: IAsyncOperation_Impl<TResult>,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut windows_core::AbiType<TResult>,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IAsyncOperation_Impl::GetResults(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            core::mem::forget(ok__);
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                Self {
                    base__: windows_core::IInspectable_Vtbl::new::<
                        Identity,
                        IAsyncOperation<TResult>,
                        OFFSET,
                    >(),
                    SetCompleted: SetCompleted::<TResult, Identity, OFFSET>,
                    Completed: Completed::<TResult, Identity, OFFSET>,
                    GetResults: GetResults::<TResult, Identity, OFFSET>,
                    TResult: core::marker::PhantomData::<TResult>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IAsyncOperation<TResult> as windows_core::Interface>::IID
            }
        }
        #[repr(C)]
        pub struct IAsyncOperation_Vtbl<TResult>
        where
            TResult: windows_core::RuntimeType + 'static,
        {
            pub base__: windows_core::IInspectable_Vtbl,
            pub SetCompleted: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Completed: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub GetResults: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut windows_core::AbiType<TResult>,
            ) -> windows_core::HRESULT,
            TResult: core::marker::PhantomData<TResult>,
        }
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct IAsyncOperationWithProgress<TResult, TProgress>(
            windows_core::IUnknown,
            core::marker::PhantomData<TResult>,
            core::marker::PhantomData<TProgress>,
        )
        where
            TResult: windows_core::RuntimeType + 'static,
            TProgress: windows_core::RuntimeType + 'static;
        impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
            > windows_core::imp::CanInto<windows_core::IUnknown>
            for IAsyncOperationWithProgress<TResult, TProgress>
        {
        }
        impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
            > windows_core::imp::CanInto<windows_core::IInspectable>
            for IAsyncOperationWithProgress<TResult, TProgress>
        {
        }
        unsafe impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
            > windows_core::Interface for IAsyncOperationWithProgress<TResult, TProgress>
        {
            type Vtable = IAsyncOperationWithProgress_Vtbl<TResult, TProgress>;
            const IID: windows_core::GUID =
                windows_core::GUID::from_signature(<Self as windows_core::RuntimeType>::SIGNATURE);
        }
        impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
            > windows_core::RuntimeType for IAsyncOperationWithProgress<TResult, TProgress>
        {
            const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::new()
                .push_slice(b"pinterface({b5d036d7-e297-498f-ba60-0289e76e23dd}")
                .push_slice(b";")
                .push_other(TResult::SIGNATURE)
                .push_slice(b";")
                .push_other(TProgress::SIGNATURE)
                .push_slice(b")");
        }
        impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
            > windows_core::imp::CanInto<IAsyncInfo>
            for IAsyncOperationWithProgress<TResult, TProgress>
        {
            const QUERY: bool = true;
        }
        impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
            > IAsyncOperationWithProgress<TResult, TProgress>
        {
            pub fn SetProgress<P0>(&self, handler: P0) -> windows_core::Result<()>
            where
                P0: windows_core::Param<AsyncOperationProgressHandler<TResult, TProgress>>,
            {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).SetProgress)(
                        windows_core::Interface::as_raw(this),
                        handler.param().abi(),
                    )
                    .ok()
                }
            }
            pub fn Progress(
                &self,
            ) -> windows_core::Result<AsyncOperationProgressHandler<TResult, TProgress>>
            {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Progress)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                }
            }
            pub fn SetCompleted<P0>(&self, handler: P0) -> windows_core::Result<()>
            where
                P0: windows_core::Param<
                    AsyncOperationWithProgressCompletedHandler<TResult, TProgress>,
                >,
            {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).SetCompleted)(
                        windows_core::Interface::as_raw(this),
                        handler.param().abi(),
                    )
                    .ok()
                }
            }
            pub fn Completed(
                &self,
            ) -> windows_core::Result<AsyncOperationWithProgressCompletedHandler<TResult, TProgress>>
            {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Completed)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                }
            }
            pub fn GetResults(&self) -> windows_core::Result<TResult> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetResults)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                }
            }
            pub fn Id(&self) -> windows_core::Result<u32> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Id)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn Status(&self) -> windows_core::Result<AsyncStatus> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Status)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn ErrorCode(&self) -> windows_core::Result<windows_core::HRESULT> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).ErrorCode)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn Cancel(&self) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).Cancel)(windows_core::Interface::as_raw(
                        this,
                    ))
                    .ok()
                }
            }
            pub fn Close(&self) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IAsyncInfo>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(
                        this,
                    ))
                    .ok()
                }
            }
        }
        unsafe impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
            > Send for IAsyncOperationWithProgress<TResult, TProgress>
        {
        }
        unsafe impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
            > Sync for IAsyncOperationWithProgress<TResult, TProgress>
        {
        }
        impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
            > windows_core::RuntimeName for IAsyncOperationWithProgress<TResult, TProgress>
        {
            const NAME: &'static str = "Windows.Foundation.IAsyncOperationWithProgress";
        }
        pub trait IAsyncOperationWithProgress_Impl<TResult, TProgress>: IAsyncInfo_Impl
        where
            TResult: windows_core::RuntimeType + 'static,
            TProgress: windows_core::RuntimeType + 'static,
        {
            fn SetProgress(
                &self,
                handler: Option<&AsyncOperationProgressHandler<TResult, TProgress>>,
            ) -> windows_core::Result<()>;
            fn Progress(
                &self,
            ) -> windows_core::Result<AsyncOperationProgressHandler<TResult, TProgress>>;
            fn SetCompleted(
                &self,
                handler: Option<&AsyncOperationWithProgressCompletedHandler<TResult, TProgress>>,
            ) -> windows_core::Result<()>;
            fn Completed(
                &self,
            ) -> windows_core::Result<AsyncOperationWithProgressCompletedHandler<TResult, TProgress>>;
            fn GetResults(&self) -> windows_core::Result<TResult>;
        }
        impl<
                TResult: windows_core::RuntimeType + 'static,
                TProgress: windows_core::RuntimeType + 'static,
            > IAsyncOperationWithProgress_Vtbl<TResult, TProgress>
        {
            pub const fn new<
                Identity: IAsyncOperationWithProgress_Impl<TResult, TProgress>,
                const OFFSET: isize,
            >() -> Self {
                unsafe extern "system" fn SetProgress<
                    TResult: windows_core::RuntimeType + 'static,
                    TProgress: windows_core::RuntimeType + 'static,
                    Identity: IAsyncOperationWithProgress_Impl<TResult, TProgress>,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    handler: *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IAsyncOperationWithProgress_Impl::SetProgress(
                        this,
                        windows_core::from_raw_borrowed(&handler),
                    )
                    .into()
                }
                unsafe extern "system" fn Progress<
                    TResult: windows_core::RuntimeType + 'static,
                    TProgress: windows_core::RuntimeType + 'static,
                    Identity: IAsyncOperationWithProgress_Impl<TResult, TProgress>,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IAsyncOperationWithProgress_Impl::Progress(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            core::mem::forget(ok__);
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn SetCompleted<
                    TResult: windows_core::RuntimeType + 'static,
                    TProgress: windows_core::RuntimeType + 'static,
                    Identity: IAsyncOperationWithProgress_Impl<TResult, TProgress>,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    handler: *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IAsyncOperationWithProgress_Impl::SetCompleted(
                        this,
                        windows_core::from_raw_borrowed(&handler),
                    )
                    .into()
                }
                unsafe extern "system" fn Completed<
                    TResult: windows_core::RuntimeType + 'static,
                    TProgress: windows_core::RuntimeType + 'static,
                    Identity: IAsyncOperationWithProgress_Impl<TResult, TProgress>,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IAsyncOperationWithProgress_Impl::Completed(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            core::mem::forget(ok__);
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetResults<
                    TResult: windows_core::RuntimeType + 'static,
                    TProgress: windows_core::RuntimeType + 'static,
                    Identity: IAsyncOperationWithProgress_Impl<TResult, TProgress>,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut windows_core::AbiType<TResult>,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IAsyncOperationWithProgress_Impl::GetResults(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            core::mem::forget(ok__);
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                Self {
                    base__: windows_core::IInspectable_Vtbl::new::<
                        Identity,
                        IAsyncOperationWithProgress<TResult, TProgress>,
                        OFFSET,
                    >(),
                    SetProgress: SetProgress::<TResult, TProgress, Identity, OFFSET>,
                    Progress: Progress::<TResult, TProgress, Identity, OFFSET>,
                    SetCompleted: SetCompleted::<TResult, TProgress, Identity, OFFSET>,
                    Completed: Completed::<TResult, TProgress, Identity, OFFSET>,
                    GetResults: GetResults::<TResult, TProgress, Identity, OFFSET>,
                    TResult: core::marker::PhantomData::<TResult>,
                    TProgress: core::marker::PhantomData::<TProgress>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == & < IAsyncOperationWithProgress < TResult , TProgress > as windows_core::Interface >::IID
            }
        }
        #[repr(C)]
        pub struct IAsyncOperationWithProgress_Vtbl<TResult, TProgress>
        where
            TResult: windows_core::RuntimeType + 'static,
            TProgress: windows_core::RuntimeType + 'static,
        {
            pub base__: windows_core::IInspectable_Vtbl,
            pub SetProgress: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Progress: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub SetCompleted: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Completed: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub GetResults: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut windows_core::AbiType<TResult>,
            ) -> windows_core::HRESULT,
            TResult: core::marker::PhantomData<TResult>,
            TProgress: core::marker::PhantomData<TProgress>,
        }
        windows_core::imp::define_interface!(
            IClosable,
            IClosable_Vtbl,
            0x30d5a829_7fa4_4026_83bb_d75bae4ea99e
        );
        impl windows_core::RuntimeType for IClosable {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        windows_core::imp::interface_hierarchy!(
            IClosable,
            windows_core::IUnknown,
            windows_core::IInspectable
        );
        impl IClosable {
            pub fn Close(&self) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(
                        this,
                    ))
                    .ok()
                }
            }
        }
        impl windows_core::RuntimeName for IClosable {
            const NAME: &'static str = "Windows.Foundation.IClosable";
        }
        pub trait IClosable_Impl: windows_core::IUnknownImpl {
            fn Close(&self) -> windows_core::Result<()>;
        }
        impl IClosable_Vtbl {
            pub const fn new<Identity: IClosable_Impl, const OFFSET: isize>() -> Self {
                unsafe extern "system" fn Close<Identity: IClosable_Impl, const OFFSET: isize>(
                    this: *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IClosable_Impl::Close(this).into()
                }
                Self {
                    base__: windows_core::IInspectable_Vtbl::new::<Identity, IClosable, OFFSET>(),
                    Close: Close::<Identity, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IClosable as windows_core::Interface>::IID
            }
        }
        #[repr(C)]
        pub struct IClosable_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub Close: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IDeferral,
            IDeferral_Vtbl,
            0xd6269732_3b7f_46a7_b40b_4fdca2a2c693
        );
        impl windows_core::RuntimeType for IDeferral {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        #[repr(C)]
        pub struct IDeferral_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub Complete:
                unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IDeferralFactory,
            IDeferralFactory_Vtbl,
            0x65a1ecc5_3fb5_4832_8ca9_f061b281d13a
        );
        impl windows_core::RuntimeType for IDeferralFactory {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        #[repr(C)]
        pub struct IDeferralFactory_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub Create: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IGetActivationFactory,
            IGetActivationFactory_Vtbl,
            0x4edb8ee2_96dd_49a7_94f7_4607ddab8e3c
        );
        impl windows_core::RuntimeType for IGetActivationFactory {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        windows_core::imp::interface_hierarchy!(
            IGetActivationFactory,
            windows_core::IUnknown,
            windows_core::IInspectable
        );
        impl IGetActivationFactory {
            pub fn GetActivationFactory(
                &self,
                activatableclassid: &windows_core::HSTRING,
            ) -> windows_core::Result<windows_core::IInspectable> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetActivationFactory)(
                        windows_core::Interface::as_raw(this),
                        core::mem::transmute_copy(activatableclassid),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                }
            }
        }
        impl windows_core::RuntimeName for IGetActivationFactory {
            const NAME: &'static str = "Windows.Foundation.IGetActivationFactory";
        }
        pub trait IGetActivationFactory_Impl: windows_core::IUnknownImpl {
            fn GetActivationFactory(
                &self,
                activatableClassId: &windows_core::HSTRING,
            ) -> windows_core::Result<windows_core::IInspectable>;
        }
        impl IGetActivationFactory_Vtbl {
            pub const fn new<Identity: IGetActivationFactory_Impl, const OFFSET: isize>() -> Self {
                unsafe extern "system" fn GetActivationFactory<
                    Identity: IGetActivationFactory_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    activatableclassid: *mut core::ffi::c_void,
                    result__: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IGetActivationFactory_Impl::GetActivationFactory(
                        this,
                        core::mem::transmute(&activatableclassid),
                    ) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            core::mem::forget(ok__);
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                Self {
                    base__: windows_core::IInspectable_Vtbl::new::<
                        Identity,
                        IGetActivationFactory,
                        OFFSET,
                    >(),
                    GetActivationFactory: GetActivationFactory::<Identity, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IGetActivationFactory as windows_core::Interface>::IID
            }
        }
        #[repr(C)]
        pub struct IGetActivationFactory_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub GetActivationFactory: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            )
                -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IGuidHelperStatics,
            IGuidHelperStatics_Vtbl,
            0x59c7966b_ae52_5283_ad7f_a1b9e9678add
        );
        impl windows_core::RuntimeType for IGuidHelperStatics {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        #[repr(C)]
        pub struct IGuidHelperStatics_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub CreateNewGuid: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut windows_core::GUID,
            ) -> windows_core::HRESULT,
            pub Empty: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut windows_core::GUID,
            ) -> windows_core::HRESULT,
            pub Equals: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                &windows_core::GUID,
                &windows_core::GUID,
                *mut bool,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IMemoryBuffer,
            IMemoryBuffer_Vtbl,
            0xfbc4dd2a_245b_11e4_af98_689423260cf8
        );
        impl windows_core::RuntimeType for IMemoryBuffer {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        windows_core::imp::interface_hierarchy!(
            IMemoryBuffer,
            windows_core::IUnknown,
            windows_core::IInspectable
        );
        windows_core::imp::required_hierarchy!(IMemoryBuffer, IClosable);
        impl IMemoryBuffer {
            pub fn CreateReference(&self) -> windows_core::Result<IMemoryBufferReference> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateReference)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                }
            }
            pub fn Close(&self) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IClosable>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(
                        this,
                    ))
                    .ok()
                }
            }
        }
        impl windows_core::RuntimeName for IMemoryBuffer {
            const NAME: &'static str = "Windows.Foundation.IMemoryBuffer";
        }
        pub trait IMemoryBuffer_Impl: IClosable_Impl {
            fn CreateReference(&self) -> windows_core::Result<IMemoryBufferReference>;
        }
        impl IMemoryBuffer_Vtbl {
            pub const fn new<Identity: IMemoryBuffer_Impl, const OFFSET: isize>() -> Self {
                unsafe extern "system" fn CreateReference<
                    Identity: IMemoryBuffer_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IMemoryBuffer_Impl::CreateReference(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            core::mem::forget(ok__);
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                Self {
                    base__: windows_core::IInspectable_Vtbl::new::<Identity, IMemoryBuffer, OFFSET>(
                    ),
                    CreateReference: CreateReference::<Identity, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IMemoryBuffer as windows_core::Interface>::IID
            }
        }
        #[repr(C)]
        pub struct IMemoryBuffer_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub CreateReference: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IMemoryBufferFactory,
            IMemoryBufferFactory_Vtbl,
            0xfbc4dd2b_245b_11e4_af98_689423260cf8
        );
        impl windows_core::RuntimeType for IMemoryBufferFactory {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        #[repr(C)]
        pub struct IMemoryBufferFactory_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub Create: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IMemoryBufferReference,
            IMemoryBufferReference_Vtbl,
            0xfbc4dd29_245b_11e4_af98_689423260cf8
        );
        impl windows_core::RuntimeType for IMemoryBufferReference {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        windows_core::imp::interface_hierarchy!(
            IMemoryBufferReference,
            windows_core::IUnknown,
            windows_core::IInspectable
        );
        windows_core::imp::required_hierarchy!(IMemoryBufferReference, IClosable);
        impl IMemoryBufferReference {
            pub fn Capacity(&self) -> windows_core::Result<u32> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Capacity)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn Closed<P0>(&self, handler: P0) -> windows_core::Result<EventRegistrationToken>
            where
                P0: windows_core::Param<
                    TypedEventHandler<IMemoryBufferReference, windows_core::IInspectable>,
                >,
            {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Closed)(
                        windows_core::Interface::as_raw(this),
                        handler.param().abi(),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn RemoveClosed(&self, cookie: EventRegistrationToken) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).RemoveClosed)(
                        windows_core::Interface::as_raw(this),
                        cookie,
                    )
                    .ok()
                }
            }
            pub fn Close(&self) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IClosable>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(
                        this,
                    ))
                    .ok()
                }
            }
        }
        impl windows_core::RuntimeName for IMemoryBufferReference {
            const NAME: &'static str = "Windows.Foundation.IMemoryBufferReference";
        }
        pub trait IMemoryBufferReference_Impl: IClosable_Impl {
            fn Capacity(&self) -> windows_core::Result<u32>;
            fn Closed(
                &self,
                handler: Option<
                    &TypedEventHandler<IMemoryBufferReference, windows_core::IInspectable>,
                >,
            ) -> windows_core::Result<EventRegistrationToken>;
            fn RemoveClosed(&self, cookie: &EventRegistrationToken) -> windows_core::Result<()>;
        }
        impl IMemoryBufferReference_Vtbl {
            pub const fn new<Identity: IMemoryBufferReference_Impl, const OFFSET: isize>() -> Self {
                unsafe extern "system" fn Capacity<
                    Identity: IMemoryBufferReference_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut u32,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IMemoryBufferReference_Impl::Capacity(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn Closed<
                    Identity: IMemoryBufferReference_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    handler: *mut core::ffi::c_void,
                    result__: *mut EventRegistrationToken,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IMemoryBufferReference_Impl::Closed(
                        this,
                        windows_core::from_raw_borrowed(&handler),
                    ) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn RemoveClosed<
                    Identity: IMemoryBufferReference_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    cookie: EventRegistrationToken,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IMemoryBufferReference_Impl::RemoveClosed(this, core::mem::transmute(&cookie))
                        .into()
                }
                Self {
                    base__: windows_core::IInspectable_Vtbl::new::<
                        Identity,
                        IMemoryBufferReference,
                        OFFSET,
                    >(),
                    Capacity: Capacity::<Identity, OFFSET>,
                    Closed: Closed::<Identity, OFFSET>,
                    RemoveClosed: RemoveClosed::<Identity, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IMemoryBufferReference as windows_core::Interface>::IID
            }
        }
        #[repr(C)]
        pub struct IMemoryBufferReference_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub Capacity: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
            ) -> windows_core::HRESULT,
            pub Closed: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut EventRegistrationToken,
            ) -> windows_core::HRESULT,
            pub RemoveClosed: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                EventRegistrationToken,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IPropertyValue,
            IPropertyValue_Vtbl,
            0x4bd682dd_7554_40e9_9a9b_82654ede7e62
        );
        impl windows_core::RuntimeType for IPropertyValue {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        windows_core::imp::interface_hierarchy!(
            IPropertyValue,
            windows_core::IUnknown,
            windows_core::IInspectable
        );
        impl IPropertyValue {
            pub fn Type(&self) -> windows_core::Result<PropertyType> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Type)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn IsNumericScalar(&self) -> windows_core::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).IsNumericScalar)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetUInt8(&self) -> windows_core::Result<u8> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetUInt8)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetInt16(&self) -> windows_core::Result<i16> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetInt16)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetUInt16(&self) -> windows_core::Result<u16> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetUInt16)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetInt32(&self) -> windows_core::Result<i32> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetInt32)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetUInt32(&self) -> windows_core::Result<u32> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetUInt32)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetInt64(&self) -> windows_core::Result<i64> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetInt64)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetUInt64(&self) -> windows_core::Result<u64> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetUInt64)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetSingle(&self) -> windows_core::Result<f32> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetSingle)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetDouble(&self) -> windows_core::Result<f64> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetDouble)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetChar16(&self) -> windows_core::Result<u16> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetChar16)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetBoolean(&self) -> windows_core::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetBoolean)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetString(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetString)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetGuid(&self) -> windows_core::Result<windows_core::GUID> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetGuid)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetDateTime(&self) -> windows_core::Result<DateTime> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetDateTime)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetTimeSpan(&self) -> windows_core::Result<TimeSpan> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetTimeSpan)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetPoint(&self) -> windows_core::Result<Point> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetPoint)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetSize(&self) -> windows_core::Result<Size> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetSize)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetRect(&self) -> windows_core::Result<Rect> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetRect)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetUInt8Array(
                &self,
                value: &mut windows_core::Array<u8>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetUInt8Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetInt16Array(
                &self,
                value: &mut windows_core::Array<i16>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetInt16Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetUInt16Array(
                &self,
                value: &mut windows_core::Array<u16>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetUInt16Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetInt32Array(
                &self,
                value: &mut windows_core::Array<i32>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetInt32Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetUInt32Array(
                &self,
                value: &mut windows_core::Array<u32>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetUInt32Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetInt64Array(
                &self,
                value: &mut windows_core::Array<i64>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetInt64Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetUInt64Array(
                &self,
                value: &mut windows_core::Array<u64>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetUInt64Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetSingleArray(
                &self,
                value: &mut windows_core::Array<f32>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetSingleArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetDoubleArray(
                &self,
                value: &mut windows_core::Array<f64>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetDoubleArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetChar16Array(
                &self,
                value: &mut windows_core::Array<u16>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetChar16Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetBooleanArray(
                &self,
                value: &mut windows_core::Array<bool>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetBooleanArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetStringArray(
                &self,
                value: &mut windows_core::Array<windows_core::HSTRING>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetStringArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetInspectableArray(
                &self,
                value: &mut windows_core::Array<windows_core::IInspectable>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetInspectableArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetGuidArray(
                &self,
                value: &mut windows_core::Array<windows_core::GUID>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetGuidArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetDateTimeArray(
                &self,
                value: &mut windows_core::Array<DateTime>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetDateTimeArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetTimeSpanArray(
                &self,
                value: &mut windows_core::Array<TimeSpan>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetTimeSpanArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetPointArray(
                &self,
                value: &mut windows_core::Array<Point>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetPointArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetSizeArray(
                &self,
                value: &mut windows_core::Array<Size>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetSizeArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetRectArray(
                &self,
                value: &mut windows_core::Array<Rect>,
            ) -> windows_core::Result<()> {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).GetRectArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
        }
        impl windows_core::RuntimeName for IPropertyValue {
            const NAME: &'static str = "Windows.Foundation.IPropertyValue";
        }
        pub trait IPropertyValue_Impl: windows_core::IUnknownImpl {
            fn Type(&self) -> windows_core::Result<PropertyType>;
            fn IsNumericScalar(&self) -> windows_core::Result<bool>;
            fn GetUInt8(&self) -> windows_core::Result<u8>;
            fn GetInt16(&self) -> windows_core::Result<i16>;
            fn GetUInt16(&self) -> windows_core::Result<u16>;
            fn GetInt32(&self) -> windows_core::Result<i32>;
            fn GetUInt32(&self) -> windows_core::Result<u32>;
            fn GetInt64(&self) -> windows_core::Result<i64>;
            fn GetUInt64(&self) -> windows_core::Result<u64>;
            fn GetSingle(&self) -> windows_core::Result<f32>;
            fn GetDouble(&self) -> windows_core::Result<f64>;
            fn GetChar16(&self) -> windows_core::Result<u16>;
            fn GetBoolean(&self) -> windows_core::Result<bool>;
            fn GetString(&self) -> windows_core::Result<windows_core::HSTRING>;
            fn GetGuid(&self) -> windows_core::Result<windows_core::GUID>;
            fn GetDateTime(&self) -> windows_core::Result<DateTime>;
            fn GetTimeSpan(&self) -> windows_core::Result<TimeSpan>;
            fn GetPoint(&self) -> windows_core::Result<Point>;
            fn GetSize(&self) -> windows_core::Result<Size>;
            fn GetRect(&self) -> windows_core::Result<Rect>;
            fn GetUInt8Array(
                &self,
                value: &mut windows_core::Array<u8>,
            ) -> windows_core::Result<()>;
            fn GetInt16Array(
                &self,
                value: &mut windows_core::Array<i16>,
            ) -> windows_core::Result<()>;
            fn GetUInt16Array(
                &self,
                value: &mut windows_core::Array<u16>,
            ) -> windows_core::Result<()>;
            fn GetInt32Array(
                &self,
                value: &mut windows_core::Array<i32>,
            ) -> windows_core::Result<()>;
            fn GetUInt32Array(
                &self,
                value: &mut windows_core::Array<u32>,
            ) -> windows_core::Result<()>;
            fn GetInt64Array(
                &self,
                value: &mut windows_core::Array<i64>,
            ) -> windows_core::Result<()>;
            fn GetUInt64Array(
                &self,
                value: &mut windows_core::Array<u64>,
            ) -> windows_core::Result<()>;
            fn GetSingleArray(
                &self,
                value: &mut windows_core::Array<f32>,
            ) -> windows_core::Result<()>;
            fn GetDoubleArray(
                &self,
                value: &mut windows_core::Array<f64>,
            ) -> windows_core::Result<()>;
            fn GetChar16Array(
                &self,
                value: &mut windows_core::Array<u16>,
            ) -> windows_core::Result<()>;
            fn GetBooleanArray(
                &self,
                value: &mut windows_core::Array<bool>,
            ) -> windows_core::Result<()>;
            fn GetStringArray(
                &self,
                value: &mut windows_core::Array<windows_core::HSTRING>,
            ) -> windows_core::Result<()>;
            fn GetInspectableArray(
                &self,
                value: &mut windows_core::Array<windows_core::IInspectable>,
            ) -> windows_core::Result<()>;
            fn GetGuidArray(
                &self,
                value: &mut windows_core::Array<windows_core::GUID>,
            ) -> windows_core::Result<()>;
            fn GetDateTimeArray(
                &self,
                value: &mut windows_core::Array<DateTime>,
            ) -> windows_core::Result<()>;
            fn GetTimeSpanArray(
                &self,
                value: &mut windows_core::Array<TimeSpan>,
            ) -> windows_core::Result<()>;
            fn GetPointArray(
                &self,
                value: &mut windows_core::Array<Point>,
            ) -> windows_core::Result<()>;
            fn GetSizeArray(
                &self,
                value: &mut windows_core::Array<Size>,
            ) -> windows_core::Result<()>;
            fn GetRectArray(
                &self,
                value: &mut windows_core::Array<Rect>,
            ) -> windows_core::Result<()>;
        }
        impl IPropertyValue_Vtbl {
            pub const fn new<Identity: IPropertyValue_Impl, const OFFSET: isize>() -> Self {
                unsafe extern "system" fn Type<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut PropertyType,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::Type(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn IsNumericScalar<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut bool,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::IsNumericScalar(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetUInt8<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut u8,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetUInt8(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetInt16<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut i16,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetInt16(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetUInt16<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut u16,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetUInt16(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetInt32<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut i32,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetInt32(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetUInt32<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut u32,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetUInt32(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetInt64<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut i64,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetInt64(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetUInt64<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut u64,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetUInt64(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetSingle<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut f32,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetSingle(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetDouble<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut f64,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetDouble(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetChar16<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut u16,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetChar16(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetBoolean<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut bool,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetBoolean(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetString<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetString(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            core::mem::forget(ok__);
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetGuid<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut windows_core::GUID,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetGuid(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetDateTime<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut DateTime,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetDateTime(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetTimeSpan<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut TimeSpan,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetTimeSpan(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetPoint<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut Point,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetPoint(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetSize<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut Size,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetSize(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetRect<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut Rect,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IPropertyValue_Impl::GetRect(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetUInt8Array<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut u8,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetUInt8Array(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetInt16Array<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut i16,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetInt16Array(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetUInt16Array<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut u16,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetUInt16Array(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetInt32Array<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut i32,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetInt32Array(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetUInt32Array<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut u32,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetUInt32Array(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetInt64Array<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut i64,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetInt64Array(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetUInt64Array<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut u64,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetUInt64Array(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetSingleArray<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut f32,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetSingleArray(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetDoubleArray<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut f64,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetDoubleArray(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetChar16Array<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut u16,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetChar16Array(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetBooleanArray<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut bool,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetBooleanArray(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetStringArray<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut windows_core::HSTRING,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetStringArray(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetInspectableArray<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut windows_core::IInspectable,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetInspectableArray(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetGuidArray<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut windows_core::GUID,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetGuidArray(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetDateTimeArray<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut DateTime,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetDateTimeArray(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetTimeSpanArray<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut TimeSpan,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetTimeSpanArray(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetPointArray<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut Point,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetPointArray(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetSizeArray<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut Size,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetSizeArray(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                unsafe extern "system" fn GetRectArray<
                    Identity: IPropertyValue_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    value_array_size: *mut u32,
                    value: *mut *mut Rect,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IPropertyValue_Impl::GetRectArray(
                        this,
                        windows_core::ArrayProxy::from_raw_parts(
                            core::mem::transmute_copy(&value),
                            value_array_size,
                        )
                        .as_array(),
                    )
                    .into()
                }
                Self {
                    base__: windows_core::IInspectable_Vtbl::new::<Identity, IPropertyValue, OFFSET>(
                    ),
                    Type: Type::<Identity, OFFSET>,
                    IsNumericScalar: IsNumericScalar::<Identity, OFFSET>,
                    GetUInt8: GetUInt8::<Identity, OFFSET>,
                    GetInt16: GetInt16::<Identity, OFFSET>,
                    GetUInt16: GetUInt16::<Identity, OFFSET>,
                    GetInt32: GetInt32::<Identity, OFFSET>,
                    GetUInt32: GetUInt32::<Identity, OFFSET>,
                    GetInt64: GetInt64::<Identity, OFFSET>,
                    GetUInt64: GetUInt64::<Identity, OFFSET>,
                    GetSingle: GetSingle::<Identity, OFFSET>,
                    GetDouble: GetDouble::<Identity, OFFSET>,
                    GetChar16: GetChar16::<Identity, OFFSET>,
                    GetBoolean: GetBoolean::<Identity, OFFSET>,
                    GetString: GetString::<Identity, OFFSET>,
                    GetGuid: GetGuid::<Identity, OFFSET>,
                    GetDateTime: GetDateTime::<Identity, OFFSET>,
                    GetTimeSpan: GetTimeSpan::<Identity, OFFSET>,
                    GetPoint: GetPoint::<Identity, OFFSET>,
                    GetSize: GetSize::<Identity, OFFSET>,
                    GetRect: GetRect::<Identity, OFFSET>,
                    GetUInt8Array: GetUInt8Array::<Identity, OFFSET>,
                    GetInt16Array: GetInt16Array::<Identity, OFFSET>,
                    GetUInt16Array: GetUInt16Array::<Identity, OFFSET>,
                    GetInt32Array: GetInt32Array::<Identity, OFFSET>,
                    GetUInt32Array: GetUInt32Array::<Identity, OFFSET>,
                    GetInt64Array: GetInt64Array::<Identity, OFFSET>,
                    GetUInt64Array: GetUInt64Array::<Identity, OFFSET>,
                    GetSingleArray: GetSingleArray::<Identity, OFFSET>,
                    GetDoubleArray: GetDoubleArray::<Identity, OFFSET>,
                    GetChar16Array: GetChar16Array::<Identity, OFFSET>,
                    GetBooleanArray: GetBooleanArray::<Identity, OFFSET>,
                    GetStringArray: GetStringArray::<Identity, OFFSET>,
                    GetInspectableArray: GetInspectableArray::<Identity, OFFSET>,
                    GetGuidArray: GetGuidArray::<Identity, OFFSET>,
                    GetDateTimeArray: GetDateTimeArray::<Identity, OFFSET>,
                    GetTimeSpanArray: GetTimeSpanArray::<Identity, OFFSET>,
                    GetPointArray: GetPointArray::<Identity, OFFSET>,
                    GetSizeArray: GetSizeArray::<Identity, OFFSET>,
                    GetRectArray: GetRectArray::<Identity, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IPropertyValue as windows_core::Interface>::IID
            }
        }
        #[repr(C)]
        pub struct IPropertyValue_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub Type: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut PropertyType,
            ) -> windows_core::HRESULT,
            pub IsNumericScalar: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut bool,
            ) -> windows_core::HRESULT,
            pub GetUInt8:
                unsafe extern "system" fn(*mut core::ffi::c_void, *mut u8) -> windows_core::HRESULT,
            pub GetInt16: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut i16,
            ) -> windows_core::HRESULT,
            pub GetUInt16: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u16,
            ) -> windows_core::HRESULT,
            pub GetInt32: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut i32,
            ) -> windows_core::HRESULT,
            pub GetUInt32: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
            ) -> windows_core::HRESULT,
            pub GetInt64: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut i64,
            ) -> windows_core::HRESULT,
            pub GetUInt64: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u64,
            ) -> windows_core::HRESULT,
            pub GetSingle: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut f32,
            ) -> windows_core::HRESULT,
            pub GetDouble: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut f64,
            ) -> windows_core::HRESULT,
            pub GetChar16: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u16,
            ) -> windows_core::HRESULT,
            pub GetBoolean: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut bool,
            ) -> windows_core::HRESULT,
            pub GetString: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub GetGuid: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut windows_core::GUID,
            ) -> windows_core::HRESULT,
            pub GetDateTime: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut DateTime,
            ) -> windows_core::HRESULT,
            pub GetTimeSpan: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut TimeSpan,
            ) -> windows_core::HRESULT,
            pub GetPoint: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut Point,
            ) -> windows_core::HRESULT,
            pub GetSize: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut Size,
            ) -> windows_core::HRESULT,
            pub GetRect: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut Rect,
            ) -> windows_core::HRESULT,
            pub GetUInt8Array: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut u8,
            ) -> windows_core::HRESULT,
            pub GetInt16Array: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut i16,
            ) -> windows_core::HRESULT,
            pub GetUInt16Array: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut u16,
            ) -> windows_core::HRESULT,
            pub GetInt32Array: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut i32,
            ) -> windows_core::HRESULT,
            pub GetUInt32Array: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut u32,
            ) -> windows_core::HRESULT,
            pub GetInt64Array: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut i64,
            ) -> windows_core::HRESULT,
            pub GetUInt64Array: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut u64,
            ) -> windows_core::HRESULT,
            pub GetSingleArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut f32,
            ) -> windows_core::HRESULT,
            pub GetDoubleArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut f64,
            ) -> windows_core::HRESULT,
            pub GetChar16Array: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut u16,
            ) -> windows_core::HRESULT,
            pub GetBooleanArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut bool,
            ) -> windows_core::HRESULT,
            pub GetStringArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut windows_core::HSTRING,
            ) -> windows_core::HRESULT,
            pub GetInspectableArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut windows_core::IInspectable,
            )
                -> windows_core::HRESULT,
            pub GetGuidArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut windows_core::GUID,
            ) -> windows_core::HRESULT,
            pub GetDateTimeArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut DateTime,
            ) -> windows_core::HRESULT,
            pub GetTimeSpanArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut TimeSpan,
            ) -> windows_core::HRESULT,
            pub GetPointArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut Point,
            ) -> windows_core::HRESULT,
            pub GetSizeArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut Size,
            ) -> windows_core::HRESULT,
            pub GetRectArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut Rect,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IPropertyValueStatics,
            IPropertyValueStatics_Vtbl,
            0x629bdbc8_d932_4ff4_96b9_8d96c5c1e858
        );
        impl windows_core::RuntimeType for IPropertyValueStatics {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        #[repr(C)]
        pub struct IPropertyValueStatics_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub CreateEmpty: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateUInt8: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u8,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateInt16: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                i16,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateUInt16: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u16,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateInt32: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                i32,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateUInt32: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateInt64: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                i64,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateUInt64: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u64,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateSingle: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                f32,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateDouble: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                f64,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateChar16: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u16,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateBoolean: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                bool,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateString: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateInspectable: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateGuid: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                windows_core::GUID,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateDateTime: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                DateTime,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateTimeSpan: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                TimeSpan,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreatePoint: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                Point,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateSize: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                Size,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateRect: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                Rect,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateUInt8Array: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const u8,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateInt16Array: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const i16,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateUInt16Array: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const u16,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateInt32Array: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const i32,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateUInt32Array: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const u32,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateInt64Array: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const i64,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateUInt64Array: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const u64,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateSingleArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const f32,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateDoubleArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const f64,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateChar16Array: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const u16,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateBooleanArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const bool,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateStringArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const windows_core::HSTRING,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateInspectableArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const windows_core::IInspectable,
                *mut *mut core::ffi::c_void,
            )
                -> windows_core::HRESULT,
            pub CreateGuidArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const windows_core::GUID,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateDateTimeArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const DateTime,
                *mut *mut core::ffi::c_void,
            )
                -> windows_core::HRESULT,
            pub CreateTimeSpanArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const TimeSpan,
                *mut *mut core::ffi::c_void,
            )
                -> windows_core::HRESULT,
            pub CreatePointArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const Point,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateSizeArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const Size,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateRectArray: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                *const Rect,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
        }
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct IReference<T>(windows_core::IUnknown, core::marker::PhantomData<T>)
        where
            T: windows_core::RuntimeType + 'static;
        impl<T: windows_core::RuntimeType + 'static>
            windows_core::imp::CanInto<windows_core::IUnknown> for IReference<T>
        {
        }
        impl<T: windows_core::RuntimeType + 'static>
            windows_core::imp::CanInto<windows_core::IInspectable> for IReference<T>
        {
        }
        unsafe impl<T: windows_core::RuntimeType + 'static> windows_core::Interface for IReference<T> {
            type Vtable = IReference_Vtbl<T>;
            const IID: windows_core::GUID =
                windows_core::GUID::from_signature(<Self as windows_core::RuntimeType>::SIGNATURE);
        }
        impl<T: windows_core::RuntimeType + 'static> windows_core::RuntimeType for IReference<T> {
            const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::new()
                .push_slice(b"pinterface({61c17706-2d65-11e0-9ae8-d48564015472}")
                .push_slice(b";")
                .push_other(T::SIGNATURE)
                .push_slice(b")");
        }
        impl<T: windows_core::RuntimeType + 'static> windows_core::imp::CanInto<IPropertyValue>
            for IReference<T>
        {
            const QUERY: bool = true;
        }
        impl<T: windows_core::RuntimeType + 'static> IReference<T> {
            pub fn Value(&self) -> windows_core::Result<T> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Value)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                }
            }
            pub fn Type(&self) -> windows_core::Result<PropertyType> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Type)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn IsNumericScalar(&self) -> windows_core::Result<bool> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).IsNumericScalar)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetUInt8(&self) -> windows_core::Result<u8> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetUInt8)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetInt16(&self) -> windows_core::Result<i16> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetInt16)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetUInt16(&self) -> windows_core::Result<u16> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetUInt16)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetInt32(&self) -> windows_core::Result<i32> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetInt32)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetUInt32(&self) -> windows_core::Result<u32> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetUInt32)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetInt64(&self) -> windows_core::Result<i64> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetInt64)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetUInt64(&self) -> windows_core::Result<u64> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetUInt64)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetSingle(&self) -> windows_core::Result<f32> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetSingle)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetDouble(&self) -> windows_core::Result<f64> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetDouble)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetChar16(&self) -> windows_core::Result<u16> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetChar16)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetBoolean(&self) -> windows_core::Result<bool> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetBoolean)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetString(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetString)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetGuid(&self) -> windows_core::Result<windows_core::GUID> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetGuid)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetDateTime(&self) -> windows_core::Result<DateTime> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetDateTime)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetTimeSpan(&self) -> windows_core::Result<TimeSpan> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetTimeSpan)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetPoint(&self) -> windows_core::Result<Point> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetPoint)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetSize(&self) -> windows_core::Result<Size> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetSize)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetRect(&self) -> windows_core::Result<Rect> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetRect)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetUInt8Array(
                &self,
                value: &mut windows_core::Array<u8>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetUInt8Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetInt16Array(
                &self,
                value: &mut windows_core::Array<i16>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetInt16Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetUInt16Array(
                &self,
                value: &mut windows_core::Array<u16>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetUInt16Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetInt32Array(
                &self,
                value: &mut windows_core::Array<i32>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetInt32Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetUInt32Array(
                &self,
                value: &mut windows_core::Array<u32>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetUInt32Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetInt64Array(
                &self,
                value: &mut windows_core::Array<i64>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetInt64Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetUInt64Array(
                &self,
                value: &mut windows_core::Array<u64>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetUInt64Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetSingleArray(
                &self,
                value: &mut windows_core::Array<f32>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetSingleArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetDoubleArray(
                &self,
                value: &mut windows_core::Array<f64>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetDoubleArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetChar16Array(
                &self,
                value: &mut windows_core::Array<u16>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetChar16Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetBooleanArray(
                &self,
                value: &mut windows_core::Array<bool>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetBooleanArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetStringArray(
                &self,
                value: &mut windows_core::Array<windows_core::HSTRING>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetStringArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetInspectableArray(
                &self,
                value: &mut windows_core::Array<windows_core::IInspectable>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetInspectableArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetGuidArray(
                &self,
                value: &mut windows_core::Array<windows_core::GUID>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetGuidArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetDateTimeArray(
                &self,
                value: &mut windows_core::Array<DateTime>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetDateTimeArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetTimeSpanArray(
                &self,
                value: &mut windows_core::Array<TimeSpan>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetTimeSpanArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetPointArray(
                &self,
                value: &mut windows_core::Array<Point>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetPointArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetSizeArray(
                &self,
                value: &mut windows_core::Array<Size>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetSizeArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetRectArray(
                &self,
                value: &mut windows_core::Array<Rect>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetRectArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
        }
        impl<T: windows_core::RuntimeType + 'static> windows_core::RuntimeName for IReference<T> {
            const NAME: &'static str = "Windows.Foundation.IReference";
        }
        pub trait IReference_Impl<T>: IPropertyValue_Impl
        where
            T: windows_core::RuntimeType + 'static,
        {
            fn Value(&self) -> windows_core::Result<T>;
        }
        impl<T: windows_core::RuntimeType + 'static> IReference_Vtbl<T> {
            pub const fn new<Identity: IReference_Impl<T>, const OFFSET: isize>() -> Self {
                unsafe extern "system" fn Value<
                    T: windows_core::RuntimeType + 'static,
                    Identity: IReference_Impl<T>,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut windows_core::AbiType<T>,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IReference_Impl::Value(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            core::mem::forget(ok__);
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                Self {
                    base__: windows_core::IInspectable_Vtbl::new::<Identity, IReference<T>, OFFSET>(
                    ),
                    Value: Value::<T, Identity, OFFSET>,
                    T: core::marker::PhantomData::<T>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IReference<T> as windows_core::Interface>::IID
            }
        }
        #[repr(C)]
        pub struct IReference_Vtbl<T>
        where
            T: windows_core::RuntimeType + 'static,
        {
            pub base__: windows_core::IInspectable_Vtbl,
            pub Value: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut windows_core::AbiType<T>,
            ) -> windows_core::HRESULT,
            T: core::marker::PhantomData<T>,
        }
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct IReferenceArray<T>(windows_core::IUnknown, core::marker::PhantomData<T>)
        where
            T: windows_core::RuntimeType + 'static;
        impl<T: windows_core::RuntimeType + 'static>
            windows_core::imp::CanInto<windows_core::IUnknown> for IReferenceArray<T>
        {
        }
        impl<T: windows_core::RuntimeType + 'static>
            windows_core::imp::CanInto<windows_core::IInspectable> for IReferenceArray<T>
        {
        }
        unsafe impl<T: windows_core::RuntimeType + 'static> windows_core::Interface for IReferenceArray<T> {
            type Vtable = IReferenceArray_Vtbl<T>;
            const IID: windows_core::GUID =
                windows_core::GUID::from_signature(<Self as windows_core::RuntimeType>::SIGNATURE);
        }
        impl<T: windows_core::RuntimeType + 'static> windows_core::RuntimeType for IReferenceArray<T> {
            const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::new()
                .push_slice(b"pinterface({61c17707-2d65-11e0-9ae8-d48564015472}")
                .push_slice(b";")
                .push_other(T::SIGNATURE)
                .push_slice(b")");
        }
        impl<T: windows_core::RuntimeType + 'static> windows_core::imp::CanInto<IPropertyValue>
            for IReferenceArray<T>
        {
            const QUERY: bool = true;
        }
        impl<T: windows_core::RuntimeType + 'static> IReferenceArray<T> {
            pub fn Value(&self) -> windows_core::Result<windows_core::Array<T>> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::MaybeUninit::zeroed();
                    (windows_core::Interface::vtable(this).Value)(
                        windows_core::Interface::as_raw(this),
                        windows_core::Array::<T>::set_abi_len(core::mem::transmute(&mut result__)),
                        result__.as_mut_ptr() as *mut _ as _,
                    )
                    .map(|| result__.assume_init())
                }
            }
            pub fn Type(&self) -> windows_core::Result<PropertyType> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Type)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn IsNumericScalar(&self) -> windows_core::Result<bool> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).IsNumericScalar)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetUInt8(&self) -> windows_core::Result<u8> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetUInt8)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetInt16(&self) -> windows_core::Result<i16> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetInt16)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetUInt16(&self) -> windows_core::Result<u16> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetUInt16)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetInt32(&self) -> windows_core::Result<i32> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetInt32)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetUInt32(&self) -> windows_core::Result<u32> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetUInt32)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetInt64(&self) -> windows_core::Result<i64> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetInt64)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetUInt64(&self) -> windows_core::Result<u64> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetUInt64)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetSingle(&self) -> windows_core::Result<f32> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetSingle)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetDouble(&self) -> windows_core::Result<f64> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetDouble)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetChar16(&self) -> windows_core::Result<u16> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetChar16)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetBoolean(&self) -> windows_core::Result<bool> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetBoolean)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetString(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetString)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetGuid(&self) -> windows_core::Result<windows_core::GUID> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetGuid)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetDateTime(&self) -> windows_core::Result<DateTime> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetDateTime)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetTimeSpan(&self) -> windows_core::Result<TimeSpan> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetTimeSpan)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetPoint(&self) -> windows_core::Result<Point> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetPoint)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetSize(&self) -> windows_core::Result<Size> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetSize)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetRect(&self) -> windows_core::Result<Rect> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetRect)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn GetUInt8Array(
                &self,
                value: &mut windows_core::Array<u8>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetUInt8Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetInt16Array(
                &self,
                value: &mut windows_core::Array<i16>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetInt16Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetUInt16Array(
                &self,
                value: &mut windows_core::Array<u16>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetUInt16Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetInt32Array(
                &self,
                value: &mut windows_core::Array<i32>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetInt32Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetUInt32Array(
                &self,
                value: &mut windows_core::Array<u32>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetUInt32Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetInt64Array(
                &self,
                value: &mut windows_core::Array<i64>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetInt64Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetUInt64Array(
                &self,
                value: &mut windows_core::Array<u64>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetUInt64Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetSingleArray(
                &self,
                value: &mut windows_core::Array<f32>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetSingleArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetDoubleArray(
                &self,
                value: &mut windows_core::Array<f64>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetDoubleArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetChar16Array(
                &self,
                value: &mut windows_core::Array<u16>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetChar16Array)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetBooleanArray(
                &self,
                value: &mut windows_core::Array<bool>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetBooleanArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetStringArray(
                &self,
                value: &mut windows_core::Array<windows_core::HSTRING>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetStringArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetInspectableArray(
                &self,
                value: &mut windows_core::Array<windows_core::IInspectable>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetInspectableArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetGuidArray(
                &self,
                value: &mut windows_core::Array<windows_core::GUID>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetGuidArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetDateTimeArray(
                &self,
                value: &mut windows_core::Array<DateTime>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetDateTimeArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetTimeSpanArray(
                &self,
                value: &mut windows_core::Array<TimeSpan>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetTimeSpanArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetPointArray(
                &self,
                value: &mut windows_core::Array<Point>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetPointArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetSizeArray(
                &self,
                value: &mut windows_core::Array<Size>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetSizeArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
            pub fn GetRectArray(
                &self,
                value: &mut windows_core::Array<Rect>,
            ) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IPropertyValue>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).GetRectArray)(
                        windows_core::Interface::as_raw(this),
                        value.set_abi_len(),
                        value as *mut _ as _,
                    )
                    .ok()
                }
            }
        }
        impl<T: windows_core::RuntimeType + 'static> windows_core::RuntimeName for IReferenceArray<T> {
            const NAME: &'static str = "Windows.Foundation.IReferenceArray";
        }
        pub trait IReferenceArray_Impl<T>: IPropertyValue_Impl
        where
            T: windows_core::RuntimeType + 'static,
        {
            fn Value(&self) -> windows_core::Result<windows_core::Array<T>>;
        }
        impl<T: windows_core::RuntimeType + 'static> IReferenceArray_Vtbl<T> {
            pub const fn new<Identity: IReferenceArray_Impl<T>, const OFFSET: isize>() -> Self {
                unsafe extern "system" fn Value<
                    T: windows_core::RuntimeType + 'static,
                    Identity: IReferenceArray_Impl<T>,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result_size__: *mut u32,
                    result__: *mut *mut windows_core::AbiType<T>,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IReferenceArray_Impl::Value(this) {
                        Ok(ok__) => {
                            let (ok_data__, ok_data_len__) = ok__.into_abi();
                            result__.write(core::mem::transmute(ok_data__));
                            result_size__.write(ok_data_len__);
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                Self {
                    base__: windows_core::IInspectable_Vtbl::new::<
                        Identity,
                        IReferenceArray<T>,
                        OFFSET,
                    >(),
                    Value: Value::<T, Identity, OFFSET>,
                    T: core::marker::PhantomData::<T>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IReferenceArray<T> as windows_core::Interface>::IID
            }
        }
        #[repr(C)]
        pub struct IReferenceArray_Vtbl<T>
        where
            T: windows_core::RuntimeType + 'static,
        {
            pub base__: windows_core::IInspectable_Vtbl,
            pub Value: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
                *mut *mut windows_core::AbiType<T>,
            ) -> windows_core::HRESULT,
            T: core::marker::PhantomData<T>,
        }
        windows_core::imp::define_interface!(
            IStringable,
            IStringable_Vtbl,
            0x96369f54_8eb6_48f0_abce_c1b211e627c3
        );
        impl windows_core::RuntimeType for IStringable {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        windows_core::imp::interface_hierarchy!(
            IStringable,
            windows_core::IUnknown,
            windows_core::IInspectable
        );
        impl IStringable {
            pub fn ToString(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).ToString)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
        }
        impl windows_core::RuntimeName for IStringable {
            const NAME: &'static str = "Windows.Foundation.IStringable";
        }
        pub trait IStringable_Impl: windows_core::IUnknownImpl {
            fn ToString(&self) -> windows_core::Result<windows_core::HSTRING>;
        }
        impl IStringable_Vtbl {
            pub const fn new<Identity: IStringable_Impl, const OFFSET: isize>() -> Self {
                unsafe extern "system" fn ToString<
                    Identity: IStringable_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IStringable_Impl::ToString(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            core::mem::forget(ok__);
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                Self {
                    base__: windows_core::IInspectable_Vtbl::new::<Identity, IStringable, OFFSET>(),
                    ToString: ToString::<Identity, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IStringable as windows_core::Interface>::IID
            }
        }
        #[repr(C)]
        pub struct IStringable_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub ToString: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IUriEscapeStatics,
            IUriEscapeStatics_Vtbl,
            0xc1d432ba_c824_4452_a7fd_512bc3bbe9a1
        );
        impl windows_core::RuntimeType for IUriEscapeStatics {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        #[repr(C)]
        pub struct IUriEscapeStatics_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub UnescapeComponent: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub EscapeComponent: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IUriRuntimeClass,
            IUriRuntimeClass_Vtbl,
            0x9e365e57_48b2_4160_956f_c7385120bbfc
        );
        impl windows_core::RuntimeType for IUriRuntimeClass {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        #[repr(C)]
        pub struct IUriRuntimeClass_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub AbsoluteUri: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub DisplayUri: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Domain: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Extension: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Fragment: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Host: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Password: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Path: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Query: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub QueryParsed: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub RawUri: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub SchemeName: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub UserName: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Port: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut i32,
            ) -> windows_core::HRESULT,
            pub Suspicious: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut bool,
            ) -> windows_core::HRESULT,
            pub Equals: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut bool,
            ) -> windows_core::HRESULT,
            pub CombineUri: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IUriRuntimeClassFactory,
            IUriRuntimeClassFactory_Vtbl,
            0x44a9796f_723e_4fdf_a218_033e75b0c084
        );
        impl windows_core::RuntimeType for IUriRuntimeClassFactory {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        #[repr(C)]
        pub struct IUriRuntimeClassFactory_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub CreateUri: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub CreateWithRelativeUri: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            )
                -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IUriRuntimeClassWithAbsoluteCanonicalUri,
            IUriRuntimeClassWithAbsoluteCanonicalUri_Vtbl,
            0x758d9661_221c_480f_a339_50656673f46f
        );
        impl windows_core::RuntimeType for IUriRuntimeClassWithAbsoluteCanonicalUri {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        #[repr(C)]
        pub struct IUriRuntimeClassWithAbsoluteCanonicalUri_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub AbsoluteCanonicalUri: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            )
                -> windows_core::HRESULT,
            pub DisplayIri: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IWwwFormUrlDecoderEntry,
            IWwwFormUrlDecoderEntry_Vtbl,
            0x125e7431_f678_4e8e_b670_20a9b06c512d
        );
        impl windows_core::RuntimeType for IWwwFormUrlDecoderEntry {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        windows_core::imp::interface_hierarchy!(
            IWwwFormUrlDecoderEntry,
            windows_core::IUnknown,
            windows_core::IInspectable
        );
        impl IWwwFormUrlDecoderEntry {
            pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Name)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn Value(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Value)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
        }
        impl windows_core::RuntimeName for IWwwFormUrlDecoderEntry {
            const NAME: &'static str = "Windows.Foundation.IWwwFormUrlDecoderEntry";
        }
        pub trait IWwwFormUrlDecoderEntry_Impl: windows_core::IUnknownImpl {
            fn Name(&self) -> windows_core::Result<windows_core::HSTRING>;
            fn Value(&self) -> windows_core::Result<windows_core::HSTRING>;
        }
        impl IWwwFormUrlDecoderEntry_Vtbl {
            pub const fn new<Identity: IWwwFormUrlDecoderEntry_Impl, const OFFSET: isize>() -> Self
            {
                unsafe extern "system" fn Name<
                    Identity: IWwwFormUrlDecoderEntry_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IWwwFormUrlDecoderEntry_Impl::Name(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            core::mem::forget(ok__);
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn Value<
                    Identity: IWwwFormUrlDecoderEntry_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    result__: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IWwwFormUrlDecoderEntry_Impl::Value(this) {
                        Ok(ok__) => {
                            result__.write(core::mem::transmute_copy(&ok__));
                            core::mem::forget(ok__);
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                Self {
                    base__: windows_core::IInspectable_Vtbl::new::<
                        Identity,
                        IWwwFormUrlDecoderEntry,
                        OFFSET,
                    >(),
                    Name: Name::<Identity, OFFSET>,
                    Value: Value::<Identity, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IWwwFormUrlDecoderEntry as windows_core::Interface>::IID
            }
        }
        #[repr(C)]
        pub struct IWwwFormUrlDecoderEntry_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub Name: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Value: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IWwwFormUrlDecoderRuntimeClass,
            IWwwFormUrlDecoderRuntimeClass_Vtbl,
            0xd45a0451_f225_4542_9296_0e1df5d254df
        );
        impl windows_core::RuntimeType for IWwwFormUrlDecoderRuntimeClass {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        #[repr(C)]
        pub struct IWwwFormUrlDecoderRuntimeClass_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub GetFirstValueByName: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            )
                -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IWwwFormUrlDecoderRuntimeClassFactory,
            IWwwFormUrlDecoderRuntimeClassFactory_Vtbl,
            0x5b8c6b3d_24ae_41b5_a1bf_f0c3d544845b
        );
        impl windows_core::RuntimeType for IWwwFormUrlDecoderRuntimeClassFactory {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_interface::<Self>();
        }
        #[repr(C)]
        pub struct IWwwFormUrlDecoderRuntimeClassFactory_Vtbl {
            pub base__: windows_core::IInspectable_Vtbl,
            pub CreateWwwFormUrlDecoder: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            )
                -> windows_core::HRESULT,
        }
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct MemoryBuffer(windows_core::IUnknown);
        windows_core::imp::interface_hierarchy!(
            MemoryBuffer,
            windows_core::IUnknown,
            windows_core::IInspectable,
            IMemoryBuffer
        );
        windows_core::imp::required_hierarchy!(MemoryBuffer, IClosable);
        impl MemoryBuffer {
            pub fn Close(&self) -> windows_core::Result<()> {
                let this = &windows_core::Interface::cast::<IClosable>(self)?;
                unsafe {
                    (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(
                        this,
                    ))
                    .ok()
                }
            }
            pub fn CreateReference(&self) -> windows_core::Result<IMemoryBufferReference> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateReference)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                }
            }
            pub fn Create(capacity: u32) -> windows_core::Result<MemoryBuffer> {
                Self::IMemoryBufferFactory(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Create)(
                        windows_core::Interface::as_raw(this),
                        capacity,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            fn IMemoryBufferFactory<
                R,
                F: FnOnce(&IMemoryBufferFactory) -> windows_core::Result<R>,
            >(
                callback: F,
            ) -> windows_core::Result<R> {
                static SHARED: windows_core::imp::FactoryCache<MemoryBuffer, IMemoryBufferFactory> =
                    windows_core::imp::FactoryCache::new();
                SHARED.call(callback)
            }
        }
        impl windows_core::RuntimeType for MemoryBuffer {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_class::<Self, IMemoryBuffer>();
        }
        unsafe impl windows_core::Interface for MemoryBuffer {
            type Vtable = <IMemoryBuffer as windows_core::Interface>::Vtable;
            const IID: windows_core::GUID = <IMemoryBuffer as windows_core::Interface>::IID;
        }
        impl windows_core::RuntimeName for MemoryBuffer {
            const NAME: &'static str = "Windows.Foundation.MemoryBuffer";
        }
        unsafe impl Send for MemoryBuffer {}
        unsafe impl Sync for MemoryBuffer {}
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Default, PartialEq)]
        pub struct Point {
            pub X: f32,
            pub Y: f32,
        }
        impl windows_core::TypeKind for Point {
            type TypeKind = windows_core::CopyType;
        }
        impl windows_core::RuntimeType for Point {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::from_slice(
                    b"struct(Windows.Foundation.Point;f4;f4)",
                );
        }
        #[repr(transparent)]
        #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
        pub struct PropertyType(pub i32);
        impl PropertyType {
            pub const Empty: Self = Self(0i32);
            pub const UInt8: Self = Self(1i32);
            pub const Int16: Self = Self(2i32);
            pub const UInt16: Self = Self(3i32);
            pub const Int32: Self = Self(4i32);
            pub const UInt32: Self = Self(5i32);
            pub const Int64: Self = Self(6i32);
            pub const UInt64: Self = Self(7i32);
            pub const Single: Self = Self(8i32);
            pub const Double: Self = Self(9i32);
            pub const Char16: Self = Self(10i32);
            pub const Boolean: Self = Self(11i32);
            pub const String: Self = Self(12i32);
            pub const Inspectable: Self = Self(13i32);
            pub const DateTime: Self = Self(14i32);
            pub const TimeSpan: Self = Self(15i32);
            pub const Guid: Self = Self(16i32);
            pub const Point: Self = Self(17i32);
            pub const Size: Self = Self(18i32);
            pub const Rect: Self = Self(19i32);
            pub const OtherType: Self = Self(20i32);
            pub const UInt8Array: Self = Self(1025i32);
            pub const Int16Array: Self = Self(1026i32);
            pub const UInt16Array: Self = Self(1027i32);
            pub const Int32Array: Self = Self(1028i32);
            pub const UInt32Array: Self = Self(1029i32);
            pub const Int64Array: Self = Self(1030i32);
            pub const UInt64Array: Self = Self(1031i32);
            pub const SingleArray: Self = Self(1032i32);
            pub const DoubleArray: Self = Self(1033i32);
            pub const Char16Array: Self = Self(1034i32);
            pub const BooleanArray: Self = Self(1035i32);
            pub const StringArray: Self = Self(1036i32);
            pub const InspectableArray: Self = Self(1037i32);
            pub const DateTimeArray: Self = Self(1038i32);
            pub const TimeSpanArray: Self = Self(1039i32);
            pub const GuidArray: Self = Self(1040i32);
            pub const PointArray: Self = Self(1041i32);
            pub const SizeArray: Self = Self(1042i32);
            pub const RectArray: Self = Self(1043i32);
            pub const OtherTypeArray: Self = Self(1044i32);
        }
        impl windows_core::TypeKind for PropertyType {
            type TypeKind = windows_core::CopyType;
        }
        impl windows_core::RuntimeType for PropertyType {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::from_slice(
                    b"enum(Windows.Foundation.PropertyType;i4)",
                );
        }
        pub struct PropertyValue;
        impl PropertyValue {
            pub fn CreateEmpty() -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateEmpty)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateUInt8(value: u8) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateUInt8)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateInt16(value: i16) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateInt16)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateUInt16(value: u16) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateUInt16)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateInt32(value: i32) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateInt32)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateUInt32(value: u32) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateUInt32)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateInt64(value: i64) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateInt64)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateUInt64(value: u64) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateUInt64)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateSingle(value: f32) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateSingle)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateDouble(value: f64) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateDouble)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateChar16(value: u16) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateChar16)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateBoolean(value: bool) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateBoolean)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateString(
                value: &windows_core::HSTRING,
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateString)(
                        windows_core::Interface::as_raw(this),
                        core::mem::transmute_copy(value),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateInspectable<P0>(
                value: P0,
            ) -> windows_core::Result<windows_core::IInspectable>
            where
                P0: windows_core::Param<windows_core::IInspectable>,
            {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateInspectable)(
                        windows_core::Interface::as_raw(this),
                        value.param().abi(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateGuid(
                value: windows_core::GUID,
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateGuid)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateDateTime(
                value: DateTime,
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateDateTime)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateTimeSpan(
                value: TimeSpan,
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateTimeSpan)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreatePoint(value: Point) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreatePoint)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateSize(value: Size) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateSize)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateRect(value: Rect) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateRect)(
                        windows_core::Interface::as_raw(this),
                        value,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateUInt8Array(
                value: &[u8],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateUInt8Array)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateInt16Array(
                value: &[i16],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateInt16Array)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateUInt16Array(
                value: &[u16],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateUInt16Array)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateInt32Array(
                value: &[i32],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateInt32Array)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateUInt32Array(
                value: &[u32],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateUInt32Array)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateInt64Array(
                value: &[i64],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateInt64Array)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateUInt64Array(
                value: &[u64],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateUInt64Array)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateSingleArray(
                value: &[f32],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateSingleArray)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateDoubleArray(
                value: &[f64],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateDoubleArray)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateChar16Array(
                value: &[u16],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateChar16Array)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateBooleanArray(
                value: &[bool],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateBooleanArray)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateStringArray(
                value: &[windows_core::HSTRING],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateStringArray)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        core::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateInspectableArray(
                value: &[Option<windows_core::IInspectable>],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateInspectableArray)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        core::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateGuidArray(
                value: &[windows_core::GUID],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateGuidArray)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateDateTimeArray(
                value: &[DateTime],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateDateTimeArray)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateTimeSpanArray(
                value: &[TimeSpan],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateTimeSpanArray)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreatePointArray(
                value: &[Point],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreatePointArray)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateSizeArray(
                value: &[Size],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateSizeArray)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateRectArray(
                value: &[Rect],
            ) -> windows_core::Result<windows_core::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateRectArray)(
                        windows_core::Interface::as_raw(this),
                        value.len().try_into().unwrap(),
                        value.as_ptr(),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            fn IPropertyValueStatics<
                R,
                F: FnOnce(&IPropertyValueStatics) -> windows_core::Result<R>,
            >(
                callback: F,
            ) -> windows_core::Result<R> {
                static SHARED: windows_core::imp::FactoryCache<
                    PropertyValue,
                    IPropertyValueStatics,
                > = windows_core::imp::FactoryCache::new();
                SHARED.call(callback)
            }
        }
        impl windows_core::RuntimeName for PropertyValue {
            const NAME: &'static str = "Windows.Foundation.PropertyValue";
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Default, PartialEq)]
        pub struct Rect {
            pub X: f32,
            pub Y: f32,
            pub Width: f32,
            pub Height: f32,
        }
        impl windows_core::TypeKind for Rect {
            type TypeKind = windows_core::CopyType;
        }
        impl windows_core::RuntimeType for Rect {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::from_slice(
                    b"struct(Windows.Foundation.Rect;f4;f4;f4;f4)",
                );
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Default, PartialEq)]
        pub struct Size {
            pub Width: f32,
            pub Height: f32,
        }
        impl windows_core::TypeKind for Size {
            type TypeKind = windows_core::CopyType;
        }
        impl windows_core::RuntimeType for Size {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::from_slice(
                    b"struct(Windows.Foundation.Size;f4;f4)",
                );
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Default, PartialEq)]
        pub struct TimeSpan {
            pub Duration: i64,
        }
        impl windows_core::TypeKind for TimeSpan {
            type TypeKind = windows_core::CopyType;
        }
        impl windows_core::RuntimeType for TimeSpan {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::from_slice(
                    b"struct(Windows.Foundation.TimeSpan;i8)",
                );
        }
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct TypedEventHandler<TSender, TResult>(
            windows_core::IUnknown,
            core::marker::PhantomData<TSender>,
            core::marker::PhantomData<TResult>,
        )
        where
            TSender: windows_core::RuntimeType + 'static,
            TResult: windows_core::RuntimeType + 'static;
        unsafe impl<
                TSender: windows_core::RuntimeType + 'static,
                TResult: windows_core::RuntimeType + 'static,
            > windows_core::Interface for TypedEventHandler<TSender, TResult>
        {
            type Vtable = TypedEventHandler_Vtbl<TSender, TResult>;
            const IID: windows_core::GUID =
                windows_core::GUID::from_signature(<Self as windows_core::RuntimeType>::SIGNATURE);
        }
        impl<
                TSender: windows_core::RuntimeType + 'static,
                TResult: windows_core::RuntimeType + 'static,
            > windows_core::RuntimeType for TypedEventHandler<TSender, TResult>
        {
            const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::new()
                .push_slice(b"pinterface({9de1c534-6ae1-11e0-84e1-18a905bcc53f}")
                .push_slice(b";")
                .push_other(TSender::SIGNATURE)
                .push_slice(b";")
                .push_other(TResult::SIGNATURE)
                .push_slice(b")");
        }
        impl<
                TSender: windows_core::RuntimeType + 'static,
                TResult: windows_core::RuntimeType + 'static,
            > TypedEventHandler<TSender, TResult>
        {
            pub fn new<
                F: FnMut(
                        &<TSender as windows_core::Type<TSender>>::Default,
                        &<TResult as windows_core::Type<TResult>>::Default,
                    ) -> windows_core::Result<()>
                    + Send
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com = TypedEventHandlerBox {
                    vtable: &TypedEventHandlerBox::<TSender, TResult, F>::VTABLE,
                    count: windows_core::imp::RefCount::new(1),
                    invoke,
                };
                unsafe { core::mem::transmute(Box::new(com)) }
            }
            pub fn Invoke<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
            where
                P0: windows_core::Param<TSender>,
                P1: windows_core::Param<TResult>,
            {
                let this = self;
                unsafe {
                    (windows_core::Interface::vtable(this).Invoke)(
                        windows_core::Interface::as_raw(this),
                        sender.param().abi(),
                        args.param().abi(),
                    )
                    .ok()
                }
            }
        }
        #[repr(C)]
        pub struct TypedEventHandler_Vtbl<TSender, TResult>
        where
            TSender: windows_core::RuntimeType + 'static,
            TResult: windows_core::RuntimeType + 'static,
        {
            base__: windows_core::IUnknown_Vtbl,
            Invoke: unsafe extern "system" fn(
                this: *mut core::ffi::c_void,
                sender: windows_core::AbiType<TSender>,
                args: windows_core::AbiType<TResult>,
            ) -> windows_core::HRESULT,
            TSender: core::marker::PhantomData<TSender>,
            TResult: core::marker::PhantomData<TResult>,
        }
        #[repr(C)]
        struct TypedEventHandlerBox<
            TSender,
            TResult,
            F: FnMut(
                    &<TSender as windows_core::Type<TSender>>::Default,
                    &<TResult as windows_core::Type<TResult>>::Default,
                ) -> windows_core::Result<()>
                + Send
                + 'static,
        >
        where
            TSender: windows_core::RuntimeType + 'static,
            TResult: windows_core::RuntimeType + 'static,
        {
            vtable: *const TypedEventHandler_Vtbl<TSender, TResult>,
            invoke: F,
            count: windows_core::imp::RefCount,
        }
        impl<
                TSender: windows_core::RuntimeType + 'static,
                TResult: windows_core::RuntimeType + 'static,
                F: FnMut(
                        &<TSender as windows_core::Type<TSender>>::Default,
                        &<TResult as windows_core::Type<TResult>>::Default,
                    ) -> windows_core::Result<()>
                    + Send
                    + 'static,
            > TypedEventHandlerBox<TSender, TResult, F>
        {
            const VTABLE: TypedEventHandler_Vtbl<TSender, TResult> =
                TypedEventHandler_Vtbl::<TSender, TResult> {
                    base__: windows_core::IUnknown_Vtbl {
                        QueryInterface: Self::QueryInterface,
                        AddRef: Self::AddRef,
                        Release: Self::Release,
                    },
                    Invoke: Self::Invoke,
                    TSender: core::marker::PhantomData::<TSender>,
                    TResult: core::marker::PhantomData::<TResult>,
                };
            unsafe extern "system" fn QueryInterface(
                this: *mut core::ffi::c_void,
                iid: *const windows_core::GUID,
                interface: *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                if iid.is_null() || interface.is_null() {
                    return windows_core::HRESULT(-2147467261);
                }
                *interface = if *iid
                    == <TypedEventHandler<TSender, TResult> as windows_core::Interface>::IID
                    || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                    || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
                {
                    &mut (*this).vtable as *mut _ as _
                } else {
                    core::ptr::null_mut()
                };
                if (*interface).is_null() {
                    windows_core::HRESULT(-2147467262)
                } else {
                    (*this).count.add_ref();
                    windows_core::HRESULT(0)
                }
            }
            unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
                let this = this as *mut *mut core::ffi::c_void as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    let _ = Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: *mut core::ffi::c_void,
                sender: windows_core::AbiType<TSender>,
                args: windows_core::AbiType<TResult>,
            ) -> windows_core::HRESULT {
                let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
                (this.invoke)(core::mem::transmute(&sender), core::mem::transmute(&args)).into()
            }
        }
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct Uri(windows_core::IUnknown);
        windows_core::imp::interface_hierarchy!(
            Uri,
            windows_core::IUnknown,
            windows_core::IInspectable
        );
        windows_core::imp::required_hierarchy!(Uri, IStringable);
        impl Uri {
            pub fn ToString(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = &windows_core::Interface::cast::<IStringable>(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).ToString)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn UnescapeComponent(
                tounescape: &windows_core::HSTRING,
            ) -> windows_core::Result<windows_core::HSTRING> {
                Self::IUriEscapeStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).UnescapeComponent)(
                        windows_core::Interface::as_raw(this),
                        core::mem::transmute_copy(tounescape),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                })
            }
            pub fn EscapeComponent(
                toescape: &windows_core::HSTRING,
            ) -> windows_core::Result<windows_core::HSTRING> {
                Self::IUriEscapeStatics(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).EscapeComponent)(
                        windows_core::Interface::as_raw(this),
                        core::mem::transmute_copy(toescape),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                })
            }
            pub fn AbsoluteUri(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).AbsoluteUri)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn DisplayUri(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).DisplayUri)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn Domain(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Domain)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn Extension(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Extension)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn Fragment(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Fragment)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn Host(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Host)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn Password(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Password)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn Path(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Path)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn Query(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Query)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn QueryParsed(&self) -> windows_core::Result<WwwFormUrlDecoder> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).QueryParsed)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                }
            }
            pub fn RawUri(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).RawUri)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn SchemeName(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).SchemeName)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn UserName(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).UserName)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn Port(&self) -> windows_core::Result<i32> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Port)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn Suspicious(&self) -> windows_core::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Suspicious)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn Equals<P0>(&self, puri: P0) -> windows_core::Result<bool>
            where
                P0: windows_core::Param<Uri>,
            {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Equals)(
                        windows_core::Interface::as_raw(this),
                        puri.param().abi(),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn CombineUri(
                &self,
                relativeuri: &windows_core::HSTRING,
            ) -> windows_core::Result<Uri> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CombineUri)(
                        windows_core::Interface::as_raw(this),
                        core::mem::transmute_copy(relativeuri),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                }
            }
            pub fn CreateUri(uri: &windows_core::HSTRING) -> windows_core::Result<Uri> {
                Self::IUriRuntimeClassFactory(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateUri)(
                        windows_core::Interface::as_raw(this),
                        core::mem::transmute_copy(uri),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn CreateWithRelativeUri(
                baseuri: &windows_core::HSTRING,
                relativeuri: &windows_core::HSTRING,
            ) -> windows_core::Result<Uri> {
                Self::IUriRuntimeClassFactory(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateWithRelativeUri)(
                        windows_core::Interface::as_raw(this),
                        core::mem::transmute_copy(baseuri),
                        core::mem::transmute_copy(relativeuri),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            pub fn AbsoluteCanonicalUri(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = &windows_core::Interface::cast::<
                    IUriRuntimeClassWithAbsoluteCanonicalUri,
                >(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).AbsoluteCanonicalUri)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn DisplayIri(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = &windows_core::Interface::cast::<
                    IUriRuntimeClassWithAbsoluteCanonicalUri,
                >(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).DisplayIri)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            fn IUriEscapeStatics<R, F: FnOnce(&IUriEscapeStatics) -> windows_core::Result<R>>(
                callback: F,
            ) -> windows_core::Result<R> {
                static SHARED: windows_core::imp::FactoryCache<Uri, IUriEscapeStatics> =
                    windows_core::imp::FactoryCache::new();
                SHARED.call(callback)
            }
            fn IUriRuntimeClassFactory<
                R,
                F: FnOnce(&IUriRuntimeClassFactory) -> windows_core::Result<R>,
            >(
                callback: F,
            ) -> windows_core::Result<R> {
                static SHARED: windows_core::imp::FactoryCache<Uri, IUriRuntimeClassFactory> =
                    windows_core::imp::FactoryCache::new();
                SHARED.call(callback)
            }
        }
        impl windows_core::RuntimeType for Uri {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_class::<Self, IUriRuntimeClass>();
        }
        unsafe impl windows_core::Interface for Uri {
            type Vtable = <IUriRuntimeClass as windows_core::Interface>::Vtable;
            const IID: windows_core::GUID = <IUriRuntimeClass as windows_core::Interface>::IID;
        }
        impl windows_core::RuntimeName for Uri {
            const NAME: &'static str = "Windows.Foundation.Uri";
        }
        unsafe impl Send for Uri {}
        unsafe impl Sync for Uri {}
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct WwwFormUrlDecoder(windows_core::IUnknown);
        windows_core::imp::interface_hierarchy!(
            WwwFormUrlDecoder,
            windows_core::IUnknown,
            windows_core::IInspectable
        );
        windows_core::imp::required_hierarchy!(
            WwwFormUrlDecoder,
            Collections::IIterable<IWwwFormUrlDecoderEntry>,
            Collections::IVectorView<IWwwFormUrlDecoderEntry>
        );
        impl WwwFormUrlDecoder {
            pub fn First(
                &self,
            ) -> windows_core::Result<Collections::IIterator<IWwwFormUrlDecoderEntry>> {
                let this = &windows_core::Interface::cast::<
                    Collections::IIterable<IWwwFormUrlDecoderEntry>,
                >(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).First)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                }
            }
            pub fn GetAt(&self, index: u32) -> windows_core::Result<IWwwFormUrlDecoderEntry> {
                let this = &windows_core::Interface::cast::<
                    Collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetAt)(
                        windows_core::Interface::as_raw(this),
                        index,
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                }
            }
            pub fn Size(&self) -> windows_core::Result<u32> {
                let this = &windows_core::Interface::cast::<
                    Collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Size)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
            where
                P0: windows_core::Param<IWwwFormUrlDecoderEntry>,
            {
                let this = &windows_core::Interface::cast::<
                    Collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).IndexOf)(
                        windows_core::Interface::as_raw(this),
                        value.param().abi(),
                        index,
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetMany(
                &self,
                startindex: u32,
                items: &mut [Option<IWwwFormUrlDecoderEntry>],
            ) -> windows_core::Result<u32> {
                let this = &windows_core::Interface::cast::<
                    Collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >(self)?;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetMany)(
                        windows_core::Interface::as_raw(this),
                        startindex,
                        items.len().try_into().unwrap(),
                        core::mem::transmute_copy(&items),
                        &mut result__,
                    )
                    .map(|| result__)
                }
            }
            pub fn GetFirstValueByName(
                &self,
                name: &windows_core::HSTRING,
            ) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).GetFirstValueByName)(
                        windows_core::Interface::as_raw(this),
                        core::mem::transmute_copy(name),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn CreateWwwFormUrlDecoder(
                query: &windows_core::HSTRING,
            ) -> windows_core::Result<WwwFormUrlDecoder> {
                Self::IWwwFormUrlDecoderRuntimeClassFactory(|this| unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).CreateWwwFormUrlDecoder)(
                        windows_core::Interface::as_raw(this),
                        core::mem::transmute_copy(query),
                        &mut result__,
                    )
                    .and_then(|| windows_core::Type::from_abi(result__))
                })
            }
            fn IWwwFormUrlDecoderRuntimeClassFactory<
                R,
                F: FnOnce(&IWwwFormUrlDecoderRuntimeClassFactory) -> windows_core::Result<R>,
            >(
                callback: F,
            ) -> windows_core::Result<R> {
                static SHARED: windows_core::imp::FactoryCache<
                    WwwFormUrlDecoder,
                    IWwwFormUrlDecoderRuntimeClassFactory,
                > = windows_core::imp::FactoryCache::new();
                SHARED.call(callback)
            }
        }
        impl windows_core::RuntimeType for WwwFormUrlDecoder {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_class::<Self, IWwwFormUrlDecoderRuntimeClass>();
        }
        unsafe impl windows_core::Interface for WwwFormUrlDecoder {
            type Vtable = <IWwwFormUrlDecoderRuntimeClass as windows_core::Interface>::Vtable;
            const IID: windows_core::GUID =
                <IWwwFormUrlDecoderRuntimeClass as windows_core::Interface>::IID;
        }
        impl windows_core::RuntimeName for WwwFormUrlDecoder {
            const NAME: &'static str = "Windows.Foundation.WwwFormUrlDecoder";
        }
        unsafe impl Send for WwwFormUrlDecoder {}
        unsafe impl Sync for WwwFormUrlDecoder {}
        impl IntoIterator for WwwFormUrlDecoder {
            type Item = IWwwFormUrlDecoderEntry;
            type IntoIter = Collections::IIterator<Self::Item>;
            fn into_iter(self) -> Self::IntoIter {
                IntoIterator::into_iter(&self)
            }
        }
        impl IntoIterator for &WwwFormUrlDecoder {
            type Item = IWwwFormUrlDecoderEntry;
            type IntoIter = Collections::IIterator<Self::Item>;
            fn into_iter(self) -> Self::IntoIter {
                self.First().unwrap()
            }
        }
        #[repr(transparent)]
        #[derive(Clone, Debug, Eq, PartialEq)]
        pub struct WwwFormUrlDecoderEntry(windows_core::IUnknown);
        windows_core::imp::interface_hierarchy!(
            WwwFormUrlDecoderEntry,
            windows_core::IUnknown,
            windows_core::IInspectable,
            IWwwFormUrlDecoderEntry
        );
        impl WwwFormUrlDecoderEntry {
            pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Name)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
            pub fn Value(&self) -> windows_core::Result<windows_core::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__ = core::mem::zeroed();
                    (windows_core::Interface::vtable(this).Value)(
                        windows_core::Interface::as_raw(this),
                        &mut result__,
                    )
                    .map(|| core::mem::transmute(result__))
                }
            }
        }
        impl windows_core::RuntimeType for WwwFormUrlDecoderEntry {
            const SIGNATURE: windows_core::imp::ConstBuffer =
                windows_core::imp::ConstBuffer::for_class::<Self, IWwwFormUrlDecoderEntry>();
        }
        unsafe impl windows_core::Interface for WwwFormUrlDecoderEntry {
            type Vtable = <IWwwFormUrlDecoderEntry as windows_core::Interface>::Vtable;
            const IID: windows_core::GUID =
                <IWwwFormUrlDecoderEntry as windows_core::Interface>::IID;
        }
        impl windows_core::RuntimeName for WwwFormUrlDecoderEntry {
            const NAME: &'static str = "Windows.Foundation.WwwFormUrlDecoderEntry";
        }
        unsafe impl Send for WwwFormUrlDecoderEntry {}
        unsafe impl Sync for WwwFormUrlDecoderEntry {}
        pub mod Collections {
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct CollectionChange(pub i32);
            impl CollectionChange {
                pub const Reset: Self = Self(0i32);
                pub const ItemInserted: Self = Self(1i32);
                pub const ItemRemoved: Self = Self(2i32);
                pub const ItemChanged: Self = Self(3i32);
            }
            impl windows_core::TypeKind for CollectionChange {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for CollectionChange {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Collections.CollectionChange;i4)",
                    );
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct IIterable<T>(windows_core::IUnknown, core::marker::PhantomData<T>)
            where
                T: windows_core::RuntimeType + 'static;
            impl<T: windows_core::RuntimeType + 'static>
                windows_core::imp::CanInto<windows_core::IUnknown> for IIterable<T>
            {
            }
            impl<T: windows_core::RuntimeType + 'static>
                windows_core::imp::CanInto<windows_core::IInspectable> for IIterable<T>
            {
            }
            unsafe impl<T: windows_core::RuntimeType + 'static> windows_core::Interface for IIterable<T> {
                type Vtable = IIterable_Vtbl<T>;
                const IID: windows_core::GUID = windows_core::GUID::from_signature(
                    <Self as windows_core::RuntimeType>::SIGNATURE,
                );
            }
            impl<T: windows_core::RuntimeType + 'static> windows_core::RuntimeType for IIterable<T> {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::new()
                        .push_slice(b"pinterface({faa585ea-6214-4217-afda-7f46de5869b3}")
                        .push_slice(b";")
                        .push_other(T::SIGNATURE)
                        .push_slice(b")");
            }
            impl<T: windows_core::RuntimeType + 'static> IIterable<T> {
                pub fn First(&self) -> windows_core::Result<IIterator<T>> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).First)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
            }
            impl<T: windows_core::RuntimeType + 'static> windows_core::RuntimeName for IIterable<T> {
                const NAME: &'static str = "Windows.Foundation.Collections.IIterable";
            }
            pub trait IIterable_Impl<T>: windows_core::IUnknownImpl
            where
                T: windows_core::RuntimeType + 'static,
            {
                fn First(&self) -> windows_core::Result<IIterator<T>>;
            }
            impl<T: windows_core::RuntimeType + 'static> IIterable_Vtbl<T> {
                pub const fn new<Identity: IIterable_Impl<T>, const OFFSET: isize>() -> Self {
                    unsafe extern "system" fn First<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IIterable_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IIterable_Impl::First(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<
                            Identity,
                            IIterable<T>,
                            OFFSET,
                        >(),
                        First: First::<T, Identity, OFFSET>,
                        T: core::marker::PhantomData::<T>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IIterable<T> as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct IIterable_Vtbl<T>
            where
                T: windows_core::RuntimeType + 'static,
            {
                pub base__: windows_core::IInspectable_Vtbl,
                pub First: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
                T: core::marker::PhantomData<T>,
            }
            impl<T: windows_core::RuntimeType> IntoIterator for IIterable<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    IntoIterator::into_iter(&self)
                }
            }
            impl<T: windows_core::RuntimeType> IntoIterator for &IIterable<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct IIterator<T>(windows_core::IUnknown, core::marker::PhantomData<T>)
            where
                T: windows_core::RuntimeType + 'static;
            impl<T: windows_core::RuntimeType + 'static>
                windows_core::imp::CanInto<windows_core::IUnknown> for IIterator<T>
            {
            }
            impl<T: windows_core::RuntimeType + 'static>
                windows_core::imp::CanInto<windows_core::IInspectable> for IIterator<T>
            {
            }
            unsafe impl<T: windows_core::RuntimeType + 'static> windows_core::Interface for IIterator<T> {
                type Vtable = IIterator_Vtbl<T>;
                const IID: windows_core::GUID = windows_core::GUID::from_signature(
                    <Self as windows_core::RuntimeType>::SIGNATURE,
                );
            }
            impl<T: windows_core::RuntimeType + 'static> windows_core::RuntimeType for IIterator<T> {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::new()
                        .push_slice(b"pinterface({6a79e863-4300-459a-9966-cbb660963ee1}")
                        .push_slice(b";")
                        .push_other(T::SIGNATURE)
                        .push_slice(b")");
            }
            impl<T: windows_core::RuntimeType + 'static> IIterator<T> {
                pub fn Current(&self) -> windows_core::Result<T> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Current)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn HasCurrent(&self) -> windows_core::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).HasCurrent)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn MoveNext(&self) -> windows_core::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).MoveNext)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn GetMany(
                    &self,
                    items: &mut [<T as windows_core::Type<T>>::Default],
                ) -> windows_core::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetMany)(
                            windows_core::Interface::as_raw(this),
                            items.len().try_into().unwrap(),
                            core::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
            }
            impl<T: windows_core::RuntimeType + 'static> windows_core::RuntimeName for IIterator<T> {
                const NAME: &'static str = "Windows.Foundation.Collections.IIterator";
            }
            pub trait IIterator_Impl<T>: windows_core::IUnknownImpl
            where
                T: windows_core::RuntimeType + 'static,
            {
                fn Current(&self) -> windows_core::Result<T>;
                fn HasCurrent(&self) -> windows_core::Result<bool>;
                fn MoveNext(&self) -> windows_core::Result<bool>;
                fn GetMany(
                    &self,
                    items: &mut [<T as windows_core::Type<T>>::Default],
                ) -> windows_core::Result<u32>;
            }
            impl<T: windows_core::RuntimeType + 'static> IIterator_Vtbl<T> {
                pub const fn new<Identity: IIterator_Impl<T>, const OFFSET: isize>() -> Self {
                    unsafe extern "system" fn Current<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IIterator_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut windows_core::AbiType<T>,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IIterator_Impl::Current(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn HasCurrent<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IIterator_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut bool,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IIterator_Impl::HasCurrent(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn MoveNext<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IIterator_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut bool,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IIterator_Impl::MoveNext(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn GetMany<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IIterator_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        items_array_size: u32,
                        items: *mut T,
                        result__: *mut u32,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IIterator_Impl::GetMany(
                            this,
                            core::slice::from_raw_parts_mut(
                                core::mem::transmute_copy(&items),
                                items_array_size as usize,
                            ),
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<
                            Identity,
                            IIterator<T>,
                            OFFSET,
                        >(),
                        Current: Current::<T, Identity, OFFSET>,
                        HasCurrent: HasCurrent::<T, Identity, OFFSET>,
                        MoveNext: MoveNext::<T, Identity, OFFSET>,
                        GetMany: GetMany::<T, Identity, OFFSET>,
                        T: core::marker::PhantomData::<T>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IIterator<T> as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct IIterator_Vtbl<T>
            where
                T: windows_core::RuntimeType + 'static,
            {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Current: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut windows_core::AbiType<T>,
                ) -> windows_core::HRESULT,
                pub HasCurrent: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut bool,
                ) -> windows_core::HRESULT,
                pub MoveNext: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut bool,
                ) -> windows_core::HRESULT,
                pub GetMany: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    u32,
                    *mut T,
                    *mut u32,
                ) -> windows_core::HRESULT,
                T: core::marker::PhantomData<T>,
            }
            impl<T: windows_core::RuntimeType> Iterator for IIterator<T> {
                type Item = T;
                fn next(&mut self) -> Option<Self::Item> {
                    let result = self.Current().ok();
                    if result.is_some() {
                        self.MoveNext().ok()?;
                    }
                    result
                }
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct IKeyValuePair<K, V>(
                windows_core::IUnknown,
                core::marker::PhantomData<K>,
                core::marker::PhantomData<V>,
            )
            where
                K: windows_core::RuntimeType + 'static,
                V: windows_core::RuntimeType + 'static;
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::imp::CanInto<windows_core::IUnknown> for IKeyValuePair<K, V>
            {
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::imp::CanInto<windows_core::IInspectable> for IKeyValuePair<K, V>
            {
            }
            unsafe impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::Interface for IKeyValuePair<K, V>
            {
                type Vtable = IKeyValuePair_Vtbl<K, V>;
                const IID: windows_core::GUID = windows_core::GUID::from_signature(
                    <Self as windows_core::RuntimeType>::SIGNATURE,
                );
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::RuntimeType for IKeyValuePair<K, V>
            {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::new()
                        .push_slice(b"pinterface({02b51929-c1c4-4a7e-8940-0312b5c18500}")
                        .push_slice(b";")
                        .push_other(K::SIGNATURE)
                        .push_slice(b";")
                        .push_other(V::SIGNATURE)
                        .push_slice(b")");
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > IKeyValuePair<K, V>
            {
                pub fn Key(&self) -> windows_core::Result<K> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Key)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Value(&self) -> windows_core::Result<V> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Value)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::RuntimeName for IKeyValuePair<K, V>
            {
                const NAME: &'static str = "Windows.Foundation.Collections.IKeyValuePair";
            }
            pub trait IKeyValuePair_Impl<K, V>: windows_core::IUnknownImpl
            where
                K: windows_core::RuntimeType + 'static,
                V: windows_core::RuntimeType + 'static,
            {
                fn Key(&self) -> windows_core::Result<K>;
                fn Value(&self) -> windows_core::Result<V>;
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > IKeyValuePair_Vtbl<K, V>
            {
                pub const fn new<Identity: IKeyValuePair_Impl<K, V>, const OFFSET: isize>() -> Self
                {
                    unsafe extern "system" fn Key<
                        K: windows_core::RuntimeType + 'static,
                        V: windows_core::RuntimeType + 'static,
                        Identity: IKeyValuePair_Impl<K, V>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut windows_core::AbiType<K>,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IKeyValuePair_Impl::Key(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn Value<
                        K: windows_core::RuntimeType + 'static,
                        V: windows_core::RuntimeType + 'static,
                        Identity: IKeyValuePair_Impl<K, V>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut windows_core::AbiType<V>,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IKeyValuePair_Impl::Value(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<
                            Identity,
                            IKeyValuePair<K, V>,
                            OFFSET,
                        >(),
                        Key: Key::<K, V, Identity, OFFSET>,
                        Value: Value::<K, V, Identity, OFFSET>,
                        K: core::marker::PhantomData::<K>,
                        V: core::marker::PhantomData::<V>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IKeyValuePair<K, V> as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct IKeyValuePair_Vtbl<K, V>
            where
                K: windows_core::RuntimeType + 'static,
                V: windows_core::RuntimeType + 'static,
            {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Key: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut windows_core::AbiType<K>,
                ) -> windows_core::HRESULT,
                pub Value: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut windows_core::AbiType<V>,
                ) -> windows_core::HRESULT,
                K: core::marker::PhantomData<K>,
                V: core::marker::PhantomData<V>,
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct IMap<K, V>(
                windows_core::IUnknown,
                core::marker::PhantomData<K>,
                core::marker::PhantomData<V>,
            )
            where
                K: windows_core::RuntimeType + 'static,
                V: windows_core::RuntimeType + 'static;
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::imp::CanInto<windows_core::IUnknown> for IMap<K, V>
            {
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::imp::CanInto<windows_core::IInspectable> for IMap<K, V>
            {
            }
            unsafe impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::Interface for IMap<K, V>
            {
                type Vtable = IMap_Vtbl<K, V>;
                const IID: windows_core::GUID = windows_core::GUID::from_signature(
                    <Self as windows_core::RuntimeType>::SIGNATURE,
                );
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::RuntimeType for IMap<K, V>
            {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::new()
                        .push_slice(b"pinterface({3c2925fe-8519-45c1-aa79-197b6718c1c1}")
                        .push_slice(b";")
                        .push_other(K::SIGNATURE)
                        .push_slice(b";")
                        .push_other(V::SIGNATURE)
                        .push_slice(b")");
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::imp::CanInto<IIterable<IKeyValuePair<K, V>>> for IMap<K, V>
            {
                const QUERY: bool = true;
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > IMap<K, V>
            {
                pub fn Lookup<P0>(&self, key: P0) -> windows_core::Result<V>
                where
                    P0: windows_core::Param<K>,
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Lookup)(
                            windows_core::Interface::as_raw(this),
                            key.param().abi(),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Size(&self) -> windows_core::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Size)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn HasKey<P0>(&self, key: P0) -> windows_core::Result<bool>
                where
                    P0: windows_core::Param<K>,
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).HasKey)(
                            windows_core::Interface::as_raw(this),
                            key.param().abi(),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn GetView(&self) -> windows_core::Result<IMapView<K, V>> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetView)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Insert<P0, P1>(&self, key: P0, value: P1) -> windows_core::Result<bool>
                where
                    P0: windows_core::Param<K>,
                    P1: windows_core::Param<V>,
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Insert)(
                            windows_core::Interface::as_raw(this),
                            key.param().abi(),
                            value.param().abi(),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn Remove<P0>(&self, key: P0) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<K>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).Remove)(
                            windows_core::Interface::as_raw(this),
                            key.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Clear(&self) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).Clear)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
                pub fn First(&self) -> windows_core::Result<IIterator<IKeyValuePair<K, V>>> {
                    let this =
                        &windows_core::Interface::cast::<IIterable<IKeyValuePair<K, V>>>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).First)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > IntoIterator for IMap<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    IntoIterator::into_iter(&self)
                }
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > IntoIterator for &IMap<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::RuntimeName for IMap<K, V>
            {
                const NAME: &'static str = "Windows.Foundation.Collections.IMap";
            }
            pub trait IMap_Impl<K, V>: IIterable_Impl<IKeyValuePair<K, V>>
            where
                K: windows_core::RuntimeType + 'static,
                V: windows_core::RuntimeType + 'static,
            {
                fn Lookup(
                    &self,
                    key: &<K as windows_core::Type<K>>::Default,
                ) -> windows_core::Result<V>;
                fn Size(&self) -> windows_core::Result<u32>;
                fn HasKey(
                    &self,
                    key: &<K as windows_core::Type<K>>::Default,
                ) -> windows_core::Result<bool>;
                fn GetView(&self) -> windows_core::Result<IMapView<K, V>>;
                fn Insert(
                    &self,
                    key: &<K as windows_core::Type<K>>::Default,
                    value: &<V as windows_core::Type<V>>::Default,
                ) -> windows_core::Result<bool>;
                fn Remove(
                    &self,
                    key: &<K as windows_core::Type<K>>::Default,
                ) -> windows_core::Result<()>;
                fn Clear(&self) -> windows_core::Result<()>;
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > IMap_Vtbl<K, V>
            {
                pub const fn new<Identity: IMap_Impl<K, V>, const OFFSET: isize>() -> Self {
                    unsafe extern "system" fn Lookup<
                        K: windows_core::RuntimeType + 'static,
                        V: windows_core::RuntimeType + 'static,
                        Identity: IMap_Impl<K, V>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        key: windows_core::AbiType<K>,
                        result__: *mut windows_core::AbiType<V>,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IMap_Impl::Lookup(this, core::mem::transmute(&key)) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn Size<
                        K: windows_core::RuntimeType + 'static,
                        V: windows_core::RuntimeType + 'static,
                        Identity: IMap_Impl<K, V>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut u32,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IMap_Impl::Size(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn HasKey<
                        K: windows_core::RuntimeType + 'static,
                        V: windows_core::RuntimeType + 'static,
                        Identity: IMap_Impl<K, V>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        key: windows_core::AbiType<K>,
                        result__: *mut bool,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IMap_Impl::HasKey(this, core::mem::transmute(&key)) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn GetView<
                        K: windows_core::RuntimeType + 'static,
                        V: windows_core::RuntimeType + 'static,
                        Identity: IMap_Impl<K, V>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IMap_Impl::GetView(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn Insert<
                        K: windows_core::RuntimeType + 'static,
                        V: windows_core::RuntimeType + 'static,
                        Identity: IMap_Impl<K, V>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        key: windows_core::AbiType<K>,
                        value: windows_core::AbiType<V>,
                        result__: *mut bool,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IMap_Impl::Insert(
                            this,
                            core::mem::transmute(&key),
                            core::mem::transmute(&value),
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn Remove<
                        K: windows_core::RuntimeType + 'static,
                        V: windows_core::RuntimeType + 'static,
                        Identity: IMap_Impl<K, V>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        key: windows_core::AbiType<K>,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IMap_Impl::Remove(this, core::mem::transmute(&key)).into()
                    }
                    unsafe extern "system" fn Clear<
                        K: windows_core::RuntimeType + 'static,
                        V: windows_core::RuntimeType + 'static,
                        Identity: IMap_Impl<K, V>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IMap_Impl::Clear(this).into()
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<Identity, IMap<K, V>, OFFSET>(
                        ),
                        Lookup: Lookup::<K, V, Identity, OFFSET>,
                        Size: Size::<K, V, Identity, OFFSET>,
                        HasKey: HasKey::<K, V, Identity, OFFSET>,
                        GetView: GetView::<K, V, Identity, OFFSET>,
                        Insert: Insert::<K, V, Identity, OFFSET>,
                        Remove: Remove::<K, V, Identity, OFFSET>,
                        Clear: Clear::<K, V, Identity, OFFSET>,
                        K: core::marker::PhantomData::<K>,
                        V: core::marker::PhantomData::<V>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IMap<K, V> as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct IMap_Vtbl<K, V>
            where
                K: windows_core::RuntimeType + 'static,
                V: windows_core::RuntimeType + 'static,
            {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Lookup: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    windows_core::AbiType<K>,
                    *mut windows_core::AbiType<V>,
                ) -> windows_core::HRESULT,
                pub Size: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut u32,
                ) -> windows_core::HRESULT,
                pub HasKey: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    windows_core::AbiType<K>,
                    *mut bool,
                ) -> windows_core::HRESULT,
                pub GetView: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
                pub Insert: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    windows_core::AbiType<K>,
                    windows_core::AbiType<V>,
                    *mut bool,
                ) -> windows_core::HRESULT,
                pub Remove: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    windows_core::AbiType<K>,
                ) -> windows_core::HRESULT,
                pub Clear:
                    unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
                K: core::marker::PhantomData<K>,
                V: core::marker::PhantomData<V>,
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct IMapChangedEventArgs<K>(
                windows_core::IUnknown,
                core::marker::PhantomData<K>,
            )
            where
                K: windows_core::RuntimeType + 'static;
            impl<K: windows_core::RuntimeType + 'static>
                windows_core::imp::CanInto<windows_core::IUnknown> for IMapChangedEventArgs<K>
            {
            }
            impl<K: windows_core::RuntimeType + 'static>
                windows_core::imp::CanInto<windows_core::IInspectable> for IMapChangedEventArgs<K>
            {
            }
            unsafe impl<K: windows_core::RuntimeType + 'static> windows_core::Interface
                for IMapChangedEventArgs<K>
            {
                type Vtable = IMapChangedEventArgs_Vtbl<K>;
                const IID: windows_core::GUID = windows_core::GUID::from_signature(
                    <Self as windows_core::RuntimeType>::SIGNATURE,
                );
            }
            impl<K: windows_core::RuntimeType + 'static> windows_core::RuntimeType for IMapChangedEventArgs<K> {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::new()
                        .push_slice(b"pinterface({9939f4df-050a-4c0f-aa60-77075f9c4777}")
                        .push_slice(b";")
                        .push_other(K::SIGNATURE)
                        .push_slice(b")");
            }
            impl<K: windows_core::RuntimeType + 'static> IMapChangedEventArgs<K> {
                pub fn CollectionChange(&self) -> windows_core::Result<CollectionChange> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).CollectionChange)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn Key(&self) -> windows_core::Result<K> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Key)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
            }
            impl<K: windows_core::RuntimeType + 'static> windows_core::RuntimeName for IMapChangedEventArgs<K> {
                const NAME: &'static str = "Windows.Foundation.Collections.IMapChangedEventArgs";
            }
            pub trait IMapChangedEventArgs_Impl<K>: windows_core::IUnknownImpl
            where
                K: windows_core::RuntimeType + 'static,
            {
                fn CollectionChange(&self) -> windows_core::Result<CollectionChange>;
                fn Key(&self) -> windows_core::Result<K>;
            }
            impl<K: windows_core::RuntimeType + 'static> IMapChangedEventArgs_Vtbl<K> {
                pub const fn new<Identity: IMapChangedEventArgs_Impl<K>, const OFFSET: isize>(
                ) -> Self {
                    unsafe extern "system" fn CollectionChange<
                        K: windows_core::RuntimeType + 'static,
                        Identity: IMapChangedEventArgs_Impl<K>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut CollectionChange,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IMapChangedEventArgs_Impl::CollectionChange(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn Key<
                        K: windows_core::RuntimeType + 'static,
                        Identity: IMapChangedEventArgs_Impl<K>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut windows_core::AbiType<K>,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IMapChangedEventArgs_Impl::Key(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<
                            Identity,
                            IMapChangedEventArgs<K>,
                            OFFSET,
                        >(),
                        CollectionChange: CollectionChange::<K, Identity, OFFSET>,
                        Key: Key::<K, Identity, OFFSET>,
                        K: core::marker::PhantomData::<K>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IMapChangedEventArgs<K> as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct IMapChangedEventArgs_Vtbl<K>
            where
                K: windows_core::RuntimeType + 'static,
            {
                pub base__: windows_core::IInspectable_Vtbl,
                pub CollectionChange: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut CollectionChange,
                )
                    -> windows_core::HRESULT,
                pub Key: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut windows_core::AbiType<K>,
                ) -> windows_core::HRESULT,
                K: core::marker::PhantomData<K>,
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct IMapView<K, V>(
                windows_core::IUnknown,
                core::marker::PhantomData<K>,
                core::marker::PhantomData<V>,
            )
            where
                K: windows_core::RuntimeType + 'static,
                V: windows_core::RuntimeType + 'static;
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::imp::CanInto<windows_core::IUnknown> for IMapView<K, V>
            {
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::imp::CanInto<windows_core::IInspectable> for IMapView<K, V>
            {
            }
            unsafe impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::Interface for IMapView<K, V>
            {
                type Vtable = IMapView_Vtbl<K, V>;
                const IID: windows_core::GUID = windows_core::GUID::from_signature(
                    <Self as windows_core::RuntimeType>::SIGNATURE,
                );
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::RuntimeType for IMapView<K, V>
            {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::new()
                        .push_slice(b"pinterface({e480ce40-a338-4ada-adcf-272272e48cb9}")
                        .push_slice(b";")
                        .push_other(K::SIGNATURE)
                        .push_slice(b";")
                        .push_other(V::SIGNATURE)
                        .push_slice(b")");
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::imp::CanInto<IIterable<IKeyValuePair<K, V>>> for IMapView<K, V>
            {
                const QUERY: bool = true;
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > IMapView<K, V>
            {
                pub fn Lookup<P0>(&self, key: P0) -> windows_core::Result<V>
                where
                    P0: windows_core::Param<K>,
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Lookup)(
                            windows_core::Interface::as_raw(this),
                            key.param().abi(),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Size(&self) -> windows_core::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Size)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn HasKey<P0>(&self, key: P0) -> windows_core::Result<bool>
                where
                    P0: windows_core::Param<K>,
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).HasKey)(
                            windows_core::Interface::as_raw(this),
                            key.param().abi(),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn Split(
                    &self,
                    first: &mut Option<IMapView<K, V>>,
                    second: &mut Option<IMapView<K, V>>,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).Split)(
                            windows_core::Interface::as_raw(this),
                            first as *mut _ as _,
                            second as *mut _ as _,
                        )
                        .ok()
                    }
                }
                pub fn First(&self) -> windows_core::Result<IIterator<IKeyValuePair<K, V>>> {
                    let this =
                        &windows_core::Interface::cast::<IIterable<IKeyValuePair<K, V>>>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).First)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > IntoIterator for IMapView<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    IntoIterator::into_iter(&self)
                }
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > IntoIterator for &IMapView<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::RuntimeName for IMapView<K, V>
            {
                const NAME: &'static str = "Windows.Foundation.Collections.IMapView";
            }
            pub trait IMapView_Impl<K, V>: IIterable_Impl<IKeyValuePair<K, V>>
            where
                K: windows_core::RuntimeType + 'static,
                V: windows_core::RuntimeType + 'static,
            {
                fn Lookup(
                    &self,
                    key: &<K as windows_core::Type<K>>::Default,
                ) -> windows_core::Result<V>;
                fn Size(&self) -> windows_core::Result<u32>;
                fn HasKey(
                    &self,
                    key: &<K as windows_core::Type<K>>::Default,
                ) -> windows_core::Result<bool>;
                fn Split(
                    &self,
                    first: &mut Option<IMapView<K, V>>,
                    second: &mut Option<IMapView<K, V>>,
                ) -> windows_core::Result<()>;
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > IMapView_Vtbl<K, V>
            {
                pub const fn new<Identity: IMapView_Impl<K, V>, const OFFSET: isize>() -> Self {
                    unsafe extern "system" fn Lookup<
                        K: windows_core::RuntimeType + 'static,
                        V: windows_core::RuntimeType + 'static,
                        Identity: IMapView_Impl<K, V>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        key: windows_core::AbiType<K>,
                        result__: *mut windows_core::AbiType<V>,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IMapView_Impl::Lookup(this, core::mem::transmute(&key)) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn Size<
                        K: windows_core::RuntimeType + 'static,
                        V: windows_core::RuntimeType + 'static,
                        Identity: IMapView_Impl<K, V>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut u32,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IMapView_Impl::Size(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn HasKey<
                        K: windows_core::RuntimeType + 'static,
                        V: windows_core::RuntimeType + 'static,
                        Identity: IMapView_Impl<K, V>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        key: windows_core::AbiType<K>,
                        result__: *mut bool,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IMapView_Impl::HasKey(this, core::mem::transmute(&key)) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn Split<
                        K: windows_core::RuntimeType + 'static,
                        V: windows_core::RuntimeType + 'static,
                        Identity: IMapView_Impl<K, V>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        first: *mut *mut core::ffi::c_void,
                        second: *mut *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IMapView_Impl::Split(
                            this,
                            core::mem::transmute_copy(&first),
                            core::mem::transmute_copy(&second),
                        )
                        .into()
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<
                            Identity,
                            IMapView<K, V>,
                            OFFSET,
                        >(),
                        Lookup: Lookup::<K, V, Identity, OFFSET>,
                        Size: Size::<K, V, Identity, OFFSET>,
                        HasKey: HasKey::<K, V, Identity, OFFSET>,
                        Split: Split::<K, V, Identity, OFFSET>,
                        K: core::marker::PhantomData::<K>,
                        V: core::marker::PhantomData::<V>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IMapView<K, V> as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct IMapView_Vtbl<K, V>
            where
                K: windows_core::RuntimeType + 'static,
                V: windows_core::RuntimeType + 'static,
            {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Lookup: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    windows_core::AbiType<K>,
                    *mut windows_core::AbiType<V>,
                ) -> windows_core::HRESULT,
                pub Size: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut u32,
                ) -> windows_core::HRESULT,
                pub HasKey: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    windows_core::AbiType<K>,
                    *mut bool,
                ) -> windows_core::HRESULT,
                pub Split: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
                K: core::marker::PhantomData<K>,
                V: core::marker::PhantomData<V>,
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct IObservableMap<K, V>(
                windows_core::IUnknown,
                core::marker::PhantomData<K>,
                core::marker::PhantomData<V>,
            )
            where
                K: windows_core::RuntimeType + 'static,
                V: windows_core::RuntimeType + 'static;
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::imp::CanInto<windows_core::IUnknown> for IObservableMap<K, V>
            {
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::imp::CanInto<windows_core::IInspectable> for IObservableMap<K, V>
            {
            }
            unsafe impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::Interface for IObservableMap<K, V>
            {
                type Vtable = IObservableMap_Vtbl<K, V>;
                const IID: windows_core::GUID = windows_core::GUID::from_signature(
                    <Self as windows_core::RuntimeType>::SIGNATURE,
                );
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::RuntimeType for IObservableMap<K, V>
            {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::new()
                        .push_slice(b"pinterface({65df2bf5-bf39-41b5-aebc-5a9d865e472b}")
                        .push_slice(b";")
                        .push_other(K::SIGNATURE)
                        .push_slice(b";")
                        .push_other(V::SIGNATURE)
                        .push_slice(b")");
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::imp::CanInto<IIterable<IKeyValuePair<K, V>>>
                for IObservableMap<K, V>
            {
                const QUERY: bool = true;
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::imp::CanInto<IMap<K, V>> for IObservableMap<K, V>
            {
                const QUERY: bool = true;
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > IObservableMap<K, V>
            {
                pub fn MapChanged<P0>(
                    &self,
                    vhnd: P0,
                ) -> windows_core::Result<super::EventRegistrationToken>
                where
                    P0: windows_core::Param<MapChangedEventHandler<K, V>>,
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).MapChanged)(
                            windows_core::Interface::as_raw(this),
                            vhnd.param().abi(),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn RemoveMapChanged(
                    &self,
                    token: super::EventRegistrationToken,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveMapChanged)(
                            windows_core::Interface::as_raw(this),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn First(&self) -> windows_core::Result<IIterator<IKeyValuePair<K, V>>> {
                    let this =
                        &windows_core::Interface::cast::<IIterable<IKeyValuePair<K, V>>>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).First)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Lookup<P0>(&self, key: P0) -> windows_core::Result<V>
                where
                    P0: windows_core::Param<K>,
                {
                    let this = &windows_core::Interface::cast::<IMap<K, V>>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Lookup)(
                            windows_core::Interface::as_raw(this),
                            key.param().abi(),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Size(&self) -> windows_core::Result<u32> {
                    let this = &windows_core::Interface::cast::<IMap<K, V>>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Size)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn HasKey<P0>(&self, key: P0) -> windows_core::Result<bool>
                where
                    P0: windows_core::Param<K>,
                {
                    let this = &windows_core::Interface::cast::<IMap<K, V>>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).HasKey)(
                            windows_core::Interface::as_raw(this),
                            key.param().abi(),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn GetView(&self) -> windows_core::Result<IMapView<K, V>> {
                    let this = &windows_core::Interface::cast::<IMap<K, V>>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetView)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Insert<P0, P1>(&self, key: P0, value: P1) -> windows_core::Result<bool>
                where
                    P0: windows_core::Param<K>,
                    P1: windows_core::Param<V>,
                {
                    let this = &windows_core::Interface::cast::<IMap<K, V>>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Insert)(
                            windows_core::Interface::as_raw(this),
                            key.param().abi(),
                            value.param().abi(),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn Remove<P0>(&self, key: P0) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<K>,
                {
                    let this = &windows_core::Interface::cast::<IMap<K, V>>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Remove)(
                            windows_core::Interface::as_raw(this),
                            key.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Clear(&self) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<IMap<K, V>>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Clear)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > IntoIterator for IObservableMap<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    IntoIterator::into_iter(&self)
                }
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > IntoIterator for &IObservableMap<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::RuntimeName for IObservableMap<K, V>
            {
                const NAME: &'static str = "Windows.Foundation.Collections.IObservableMap";
            }
            pub trait IObservableMap_Impl<K, V>:
                IIterable_Impl<IKeyValuePair<K, V>> + IMap_Impl<K, V>
            where
                K: windows_core::RuntimeType + 'static,
                V: windows_core::RuntimeType + 'static,
            {
                fn MapChanged(
                    &self,
                    vhnd: Option<&MapChangedEventHandler<K, V>>,
                ) -> windows_core::Result<super::EventRegistrationToken>;
                fn RemoveMapChanged(
                    &self,
                    token: &super::EventRegistrationToken,
                ) -> windows_core::Result<()>;
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > IObservableMap_Vtbl<K, V>
            {
                pub const fn new<Identity: IObservableMap_Impl<K, V>, const OFFSET: isize>() -> Self
                {
                    unsafe extern "system" fn MapChanged<
                        K: windows_core::RuntimeType + 'static,
                        V: windows_core::RuntimeType + 'static,
                        Identity: IObservableMap_Impl<K, V>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        vhnd: *mut core::ffi::c_void,
                        result__: *mut super::EventRegistrationToken,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IObservableMap_Impl::MapChanged(
                            this,
                            windows_core::from_raw_borrowed(&vhnd),
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn RemoveMapChanged<
                        K: windows_core::RuntimeType + 'static,
                        V: windows_core::RuntimeType + 'static,
                        Identity: IObservableMap_Impl<K, V>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        token: super::EventRegistrationToken,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IObservableMap_Impl::RemoveMapChanged(this, core::mem::transmute(&token))
                            .into()
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<
                            Identity,
                            IObservableMap<K, V>,
                            OFFSET,
                        >(),
                        MapChanged: MapChanged::<K, V, Identity, OFFSET>,
                        RemoveMapChanged: RemoveMapChanged::<K, V, Identity, OFFSET>,
                        K: core::marker::PhantomData::<K>,
                        V: core::marker::PhantomData::<V>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IObservableMap<K, V> as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct IObservableMap_Vtbl<K, V>
            where
                K: windows_core::RuntimeType + 'static,
                V: windows_core::RuntimeType + 'static,
            {
                pub base__: windows_core::IInspectable_Vtbl,
                pub MapChanged: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut super::EventRegistrationToken,
                ) -> windows_core::HRESULT,
                pub RemoveMapChanged: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    super::EventRegistrationToken,
                )
                    -> windows_core::HRESULT,
                K: core::marker::PhantomData<K>,
                V: core::marker::PhantomData<V>,
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct IObservableVector<T>(windows_core::IUnknown, core::marker::PhantomData<T>)
            where
                T: windows_core::RuntimeType + 'static;
            impl<T: windows_core::RuntimeType + 'static>
                windows_core::imp::CanInto<windows_core::IUnknown> for IObservableVector<T>
            {
            }
            impl<T: windows_core::RuntimeType + 'static>
                windows_core::imp::CanInto<windows_core::IInspectable> for IObservableVector<T>
            {
            }
            unsafe impl<T: windows_core::RuntimeType + 'static> windows_core::Interface
                for IObservableVector<T>
            {
                type Vtable = IObservableVector_Vtbl<T>;
                const IID: windows_core::GUID = windows_core::GUID::from_signature(
                    <Self as windows_core::RuntimeType>::SIGNATURE,
                );
            }
            impl<T: windows_core::RuntimeType + 'static> windows_core::RuntimeType for IObservableVector<T> {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::new()
                        .push_slice(b"pinterface({5917eb53-50b4-4a0d-b309-65862b3f1dbc}")
                        .push_slice(b";")
                        .push_other(T::SIGNATURE)
                        .push_slice(b")");
            }
            impl<T: windows_core::RuntimeType + 'static> windows_core::imp::CanInto<IIterable<T>>
                for IObservableVector<T>
            {
                const QUERY: bool = true;
            }
            impl<T: windows_core::RuntimeType + 'static> windows_core::imp::CanInto<IVector<T>>
                for IObservableVector<T>
            {
                const QUERY: bool = true;
            }
            impl<T: windows_core::RuntimeType + 'static> IObservableVector<T> {
                pub fn VectorChanged<P0>(
                    &self,
                    vhnd: P0,
                ) -> windows_core::Result<super::EventRegistrationToken>
                where
                    P0: windows_core::Param<VectorChangedEventHandler<T>>,
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).VectorChanged)(
                            windows_core::Interface::as_raw(this),
                            vhnd.param().abi(),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn RemoveVectorChanged(
                    &self,
                    token: super::EventRegistrationToken,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveVectorChanged)(
                            windows_core::Interface::as_raw(this),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn First(&self) -> windows_core::Result<IIterator<T>> {
                    let this = &windows_core::Interface::cast::<IIterable<T>>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).First)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn GetAt(&self, index: u32) -> windows_core::Result<T> {
                    let this = &windows_core::Interface::cast::<IVector<T>>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetAt)(
                            windows_core::Interface::as_raw(this),
                            index,
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Size(&self) -> windows_core::Result<u32> {
                    let this = &windows_core::Interface::cast::<IVector<T>>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Size)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn GetView(&self) -> windows_core::Result<IVectorView<T>> {
                    let this = &windows_core::Interface::cast::<IVector<T>>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetView)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
                where
                    P0: windows_core::Param<T>,
                {
                    let this = &windows_core::Interface::cast::<IVector<T>>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IndexOf)(
                            windows_core::Interface::as_raw(this),
                            value.param().abi(),
                            index,
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
                where
                    P1: windows_core::Param<T>,
                {
                    let this = &windows_core::Interface::cast::<IVector<T>>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).SetAt)(
                            windows_core::Interface::as_raw(this),
                            index,
                            value.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
                where
                    P1: windows_core::Param<T>,
                {
                    let this = &windows_core::Interface::cast::<IVector<T>>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).InsertAt)(
                            windows_core::Interface::as_raw(this),
                            index,
                            value.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<IVector<T>>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveAt)(
                            windows_core::Interface::as_raw(this),
                            index,
                        )
                        .ok()
                    }
                }
                pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<T>,
                {
                    let this = &windows_core::Interface::cast::<IVector<T>>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Append)(
                            windows_core::Interface::as_raw(this),
                            value.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<IVector<T>>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveAtEnd)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
                pub fn Clear(&self) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<IVector<T>>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Clear)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
                pub fn GetMany(
                    &self,
                    startindex: u32,
                    items: &mut [<T as windows_core::Type<T>>::Default],
                ) -> windows_core::Result<u32> {
                    let this = &windows_core::Interface::cast::<IVector<T>>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetMany)(
                            windows_core::Interface::as_raw(this),
                            startindex,
                            items.len().try_into().unwrap(),
                            core::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn ReplaceAll(
                    &self,
                    items: &[<T as windows_core::Type<T>>::Default],
                ) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<IVector<T>>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).ReplaceAll)(
                            windows_core::Interface::as_raw(this),
                            items.len().try_into().unwrap(),
                            core::mem::transmute(items.as_ptr()),
                        )
                        .ok()
                    }
                }
            }
            impl<T: windows_core::RuntimeType + 'static> IntoIterator for IObservableVector<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    IntoIterator::into_iter(&self)
                }
            }
            impl<T: windows_core::RuntimeType + 'static> IntoIterator for &IObservableVector<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            impl<T: windows_core::RuntimeType + 'static> windows_core::RuntimeName for IObservableVector<T> {
                const NAME: &'static str = "Windows.Foundation.Collections.IObservableVector";
            }
            pub trait IObservableVector_Impl<T>: IIterable_Impl<T> + IVector_Impl<T>
            where
                T: windows_core::RuntimeType + 'static,
            {
                fn VectorChanged(
                    &self,
                    vhnd: Option<&VectorChangedEventHandler<T>>,
                ) -> windows_core::Result<super::EventRegistrationToken>;
                fn RemoveVectorChanged(
                    &self,
                    token: &super::EventRegistrationToken,
                ) -> windows_core::Result<()>;
            }
            impl<T: windows_core::RuntimeType + 'static> IObservableVector_Vtbl<T> {
                pub const fn new<Identity: IObservableVector_Impl<T>, const OFFSET: isize>() -> Self
                {
                    unsafe extern "system" fn VectorChanged<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IObservableVector_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        vhnd: *mut core::ffi::c_void,
                        result__: *mut super::EventRegistrationToken,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IObservableVector_Impl::VectorChanged(
                            this,
                            windows_core::from_raw_borrowed(&vhnd),
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn RemoveVectorChanged<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IObservableVector_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        token: super::EventRegistrationToken,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IObservableVector_Impl::RemoveVectorChanged(
                            this,
                            core::mem::transmute(&token),
                        )
                        .into()
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<
                            Identity,
                            IObservableVector<T>,
                            OFFSET,
                        >(),
                        VectorChanged: VectorChanged::<T, Identity, OFFSET>,
                        RemoveVectorChanged: RemoveVectorChanged::<T, Identity, OFFSET>,
                        T: core::marker::PhantomData::<T>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IObservableVector<T> as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct IObservableVector_Vtbl<T>
            where
                T: windows_core::RuntimeType + 'static,
            {
                pub base__: windows_core::IInspectable_Vtbl,
                pub VectorChanged: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut super::EventRegistrationToken,
                )
                    -> windows_core::HRESULT,
                pub RemoveVectorChanged: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    super::EventRegistrationToken,
                )
                    -> windows_core::HRESULT,
                T: core::marker::PhantomData<T>,
            }
            windows_core::imp::define_interface!(
                IPropertySet,
                IPropertySet_Vtbl,
                0x8a43ed9f_f4e6_4421_acf9_1dab2986820c
            );
            impl windows_core::RuntimeType for IPropertySet {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            windows_core::imp::interface_hierarchy!(
                IPropertySet,
                windows_core::IUnknown,
                windows_core::IInspectable
            );
            windows_core::imp::required_hierarchy ! ( IPropertySet , IIterable < IKeyValuePair < windows_core::HSTRING , windows_core::IInspectable > > , IMap < windows_core::HSTRING , windows_core::IInspectable > , IObservableMap < windows_core::HSTRING , windows_core::IInspectable > );
            impl IPropertySet {
                pub fn First(
                    &self,
                ) -> windows_core::Result<
                    IIterator<IKeyValuePair<windows_core::HSTRING, windows_core::IInspectable>>,
                > {
                    let this = &windows_core::Interface::cast::<
                        IIterable<IKeyValuePair<windows_core::HSTRING, windows_core::IInspectable>>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).First)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Lookup(
                    &self,
                    key: &windows_core::HSTRING,
                ) -> windows_core::Result<windows_core::IInspectable> {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Lookup)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(key),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Size(&self) -> windows_core::Result<u32> {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Size)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn HasKey(&self, key: &windows_core::HSTRING) -> windows_core::Result<bool> {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).HasKey)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(key),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn GetView(
                    &self,
                ) -> windows_core::Result<IMapView<windows_core::HSTRING, windows_core::IInspectable>>
                {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetView)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Insert<P1>(
                    &self,
                    key: &windows_core::HSTRING,
                    value: P1,
                ) -> windows_core::Result<bool>
                where
                    P1: windows_core::Param<windows_core::IInspectable>,
                {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Insert)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(key),
                            value.param().abi(),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn Remove(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Remove)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(key),
                        )
                        .ok()
                    }
                }
                pub fn Clear(&self) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Clear)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
                pub fn MapChanged<P0>(
                    &self,
                    vhnd: P0,
                ) -> windows_core::Result<super::EventRegistrationToken>
                where
                    P0: windows_core::Param<
                        MapChangedEventHandler<windows_core::HSTRING, windows_core::IInspectable>,
                    >,
                {
                    let this = &windows_core::Interface::cast::<
                        IObservableMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).MapChanged)(
                            windows_core::Interface::as_raw(this),
                            vhnd.param().abi(),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn RemoveMapChanged(
                    &self,
                    token: super::EventRegistrationToken,
                ) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<
                        IObservableMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveMapChanged)(
                            windows_core::Interface::as_raw(this),
                            token,
                        )
                        .ok()
                    }
                }
            }
            impl IntoIterator for IPropertySet {
                type Item = IKeyValuePair<windows_core::HSTRING, windows_core::IInspectable>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    IntoIterator::into_iter(&self)
                }
            }
            impl IntoIterator for &IPropertySet {
                type Item = IKeyValuePair<windows_core::HSTRING, windows_core::IInspectable>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            impl windows_core::RuntimeName for IPropertySet {
                const NAME: &'static str = "Windows.Foundation.Collections.IPropertySet";
            }
            pub trait IPropertySet_Impl: IIterable_Impl<IKeyValuePair<windows_core::HSTRING, windows_core::IInspectable>>
                + IMap_Impl<windows_core::HSTRING, windows_core::IInspectable>
                + IObservableMap_Impl<windows_core::HSTRING, windows_core::IInspectable>
            {
            }
            impl IPropertySet_Vtbl {
                pub const fn new<Identity: IPropertySet_Impl, const OFFSET: isize>() -> Self {
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<
                            Identity,
                            IPropertySet,
                            OFFSET,
                        >(),
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IPropertySet as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct IPropertySet_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct IVector<T>(windows_core::IUnknown, core::marker::PhantomData<T>)
            where
                T: windows_core::RuntimeType + 'static;
            impl<T: windows_core::RuntimeType + 'static>
                windows_core::imp::CanInto<windows_core::IUnknown> for IVector<T>
            {
            }
            impl<T: windows_core::RuntimeType + 'static>
                windows_core::imp::CanInto<windows_core::IInspectable> for IVector<T>
            {
            }
            unsafe impl<T: windows_core::RuntimeType + 'static> windows_core::Interface for IVector<T> {
                type Vtable = IVector_Vtbl<T>;
                const IID: windows_core::GUID = windows_core::GUID::from_signature(
                    <Self as windows_core::RuntimeType>::SIGNATURE,
                );
            }
            impl<T: windows_core::RuntimeType + 'static> windows_core::RuntimeType for IVector<T> {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::new()
                        .push_slice(b"pinterface({913337e9-11a1-4345-a3a2-4e7f956e222d}")
                        .push_slice(b";")
                        .push_other(T::SIGNATURE)
                        .push_slice(b")");
            }
            impl<T: windows_core::RuntimeType + 'static> windows_core::imp::CanInto<IIterable<T>>
                for IVector<T>
            {
                const QUERY: bool = true;
            }
            impl<T: windows_core::RuntimeType + 'static> IVector<T> {
                pub fn GetAt(&self, index: u32) -> windows_core::Result<T> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetAt)(
                            windows_core::Interface::as_raw(this),
                            index,
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Size(&self) -> windows_core::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Size)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn GetView(&self) -> windows_core::Result<IVectorView<T>> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetView)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
                where
                    P0: windows_core::Param<T>,
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IndexOf)(
                            windows_core::Interface::as_raw(this),
                            value.param().abi(),
                            index,
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
                where
                    P1: windows_core::Param<T>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).SetAt)(
                            windows_core::Interface::as_raw(this),
                            index,
                            value.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
                where
                    P1: windows_core::Param<T>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).InsertAt)(
                            windows_core::Interface::as_raw(this),
                            index,
                            value.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveAt)(
                            windows_core::Interface::as_raw(this),
                            index,
                        )
                        .ok()
                    }
                }
                pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<T>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).Append)(
                            windows_core::Interface::as_raw(this),
                            value.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveAtEnd)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
                pub fn Clear(&self) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).Clear)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
                pub fn GetMany(
                    &self,
                    startindex: u32,
                    items: &mut [<T as windows_core::Type<T>>::Default],
                ) -> windows_core::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetMany)(
                            windows_core::Interface::as_raw(this),
                            startindex,
                            items.len().try_into().unwrap(),
                            core::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn ReplaceAll(
                    &self,
                    items: &[<T as windows_core::Type<T>>::Default],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).ReplaceAll)(
                            windows_core::Interface::as_raw(this),
                            items.len().try_into().unwrap(),
                            core::mem::transmute(items.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn First(&self) -> windows_core::Result<IIterator<T>> {
                    let this = &windows_core::Interface::cast::<IIterable<T>>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).First)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
            }
            impl<T: windows_core::RuntimeType + 'static> IntoIterator for IVector<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    IntoIterator::into_iter(&self)
                }
            }
            impl<T: windows_core::RuntimeType + 'static> IntoIterator for &IVector<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            impl<T: windows_core::RuntimeType + 'static> windows_core::RuntimeName for IVector<T> {
                const NAME: &'static str = "Windows.Foundation.Collections.IVector";
            }
            pub trait IVector_Impl<T>: IIterable_Impl<T>
            where
                T: windows_core::RuntimeType + 'static,
            {
                fn GetAt(&self, index: u32) -> windows_core::Result<T>;
                fn Size(&self) -> windows_core::Result<u32>;
                fn GetView(&self) -> windows_core::Result<IVectorView<T>>;
                fn IndexOf(
                    &self,
                    value: &<T as windows_core::Type<T>>::Default,
                    index: &mut u32,
                ) -> windows_core::Result<bool>;
                fn SetAt(
                    &self,
                    index: u32,
                    value: &<T as windows_core::Type<T>>::Default,
                ) -> windows_core::Result<()>;
                fn InsertAt(
                    &self,
                    index: u32,
                    value: &<T as windows_core::Type<T>>::Default,
                ) -> windows_core::Result<()>;
                fn RemoveAt(&self, index: u32) -> windows_core::Result<()>;
                fn Append(
                    &self,
                    value: &<T as windows_core::Type<T>>::Default,
                ) -> windows_core::Result<()>;
                fn RemoveAtEnd(&self) -> windows_core::Result<()>;
                fn Clear(&self) -> windows_core::Result<()>;
                fn GetMany(
                    &self,
                    startIndex: u32,
                    items: &mut [<T as windows_core::Type<T>>::Default],
                ) -> windows_core::Result<u32>;
                fn ReplaceAll(
                    &self,
                    items: &[<T as windows_core::Type<T>>::Default],
                ) -> windows_core::Result<()>;
            }
            impl<T: windows_core::RuntimeType + 'static> IVector_Vtbl<T> {
                pub const fn new<Identity: IVector_Impl<T>, const OFFSET: isize>() -> Self {
                    unsafe extern "system" fn GetAt<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IVector_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        index: u32,
                        result__: *mut windows_core::AbiType<T>,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IVector_Impl::GetAt(this, index) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn Size<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IVector_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut u32,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IVector_Impl::Size(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn GetView<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IVector_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IVector_Impl::GetView(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn IndexOf<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IVector_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        value: windows_core::AbiType<T>,
                        index: *mut u32,
                        result__: *mut bool,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IVector_Impl::IndexOf(
                            this,
                            core::mem::transmute(&value),
                            core::mem::transmute_copy(&index),
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn SetAt<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IVector_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        index: u32,
                        value: windows_core::AbiType<T>,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IVector_Impl::SetAt(this, index, core::mem::transmute(&value)).into()
                    }
                    unsafe extern "system" fn InsertAt<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IVector_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        index: u32,
                        value: windows_core::AbiType<T>,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IVector_Impl::InsertAt(this, index, core::mem::transmute(&value)).into()
                    }
                    unsafe extern "system" fn RemoveAt<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IVector_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        index: u32,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IVector_Impl::RemoveAt(this, index).into()
                    }
                    unsafe extern "system" fn Append<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IVector_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        value: windows_core::AbiType<T>,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IVector_Impl::Append(this, core::mem::transmute(&value)).into()
                    }
                    unsafe extern "system" fn RemoveAtEnd<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IVector_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IVector_Impl::RemoveAtEnd(this).into()
                    }
                    unsafe extern "system" fn Clear<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IVector_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IVector_Impl::Clear(this).into()
                    }
                    unsafe extern "system" fn GetMany<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IVector_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        startindex: u32,
                        items_array_size: u32,
                        items: *mut T,
                        result__: *mut u32,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IVector_Impl::GetMany(
                            this,
                            startindex,
                            core::slice::from_raw_parts_mut(
                                core::mem::transmute_copy(&items),
                                items_array_size as usize,
                            ),
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn ReplaceAll<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IVector_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        items_array_size: u32,
                        items: *const T,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IVector_Impl::ReplaceAll(
                            this,
                            core::slice::from_raw_parts(
                                core::mem::transmute_copy(&items),
                                items_array_size as usize,
                            ),
                        )
                        .into()
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<Identity, IVector<T>, OFFSET>(
                        ),
                        GetAt: GetAt::<T, Identity, OFFSET>,
                        Size: Size::<T, Identity, OFFSET>,
                        GetView: GetView::<T, Identity, OFFSET>,
                        IndexOf: IndexOf::<T, Identity, OFFSET>,
                        SetAt: SetAt::<T, Identity, OFFSET>,
                        InsertAt: InsertAt::<T, Identity, OFFSET>,
                        RemoveAt: RemoveAt::<T, Identity, OFFSET>,
                        Append: Append::<T, Identity, OFFSET>,
                        RemoveAtEnd: RemoveAtEnd::<T, Identity, OFFSET>,
                        Clear: Clear::<T, Identity, OFFSET>,
                        GetMany: GetMany::<T, Identity, OFFSET>,
                        ReplaceAll: ReplaceAll::<T, Identity, OFFSET>,
                        T: core::marker::PhantomData::<T>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IVector<T> as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct IVector_Vtbl<T>
            where
                T: windows_core::RuntimeType + 'static,
            {
                pub base__: windows_core::IInspectable_Vtbl,
                pub GetAt: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    u32,
                    *mut windows_core::AbiType<T>,
                ) -> windows_core::HRESULT,
                pub Size: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut u32,
                ) -> windows_core::HRESULT,
                pub GetView: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
                pub IndexOf: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    windows_core::AbiType<T>,
                    *mut u32,
                    *mut bool,
                ) -> windows_core::HRESULT,
                pub SetAt: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    u32,
                    windows_core::AbiType<T>,
                ) -> windows_core::HRESULT,
                pub InsertAt: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    u32,
                    windows_core::AbiType<T>,
                ) -> windows_core::HRESULT,
                pub RemoveAt:
                    unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
                pub Append: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    windows_core::AbiType<T>,
                ) -> windows_core::HRESULT,
                pub RemoveAtEnd:
                    unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
                pub Clear:
                    unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
                pub GetMany: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    u32,
                    u32,
                    *mut T,
                    *mut u32,
                ) -> windows_core::HRESULT,
                pub ReplaceAll: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    u32,
                    *const T,
                ) -> windows_core::HRESULT,
                T: core::marker::PhantomData<T>,
            }
            windows_core::imp::define_interface!(
                IVectorChangedEventArgs,
                IVectorChangedEventArgs_Vtbl,
                0x575933df_34fe_4480_af15_07691f3d5d9b
            );
            impl windows_core::RuntimeType for IVectorChangedEventArgs {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            windows_core::imp::interface_hierarchy!(
                IVectorChangedEventArgs,
                windows_core::IUnknown,
                windows_core::IInspectable
            );
            impl IVectorChangedEventArgs {
                pub fn CollectionChange(&self) -> windows_core::Result<CollectionChange> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).CollectionChange)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn Index(&self) -> windows_core::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Index)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
            }
            impl windows_core::RuntimeName for IVectorChangedEventArgs {
                const NAME: &'static str = "Windows.Foundation.Collections.IVectorChangedEventArgs";
            }
            pub trait IVectorChangedEventArgs_Impl: windows_core::IUnknownImpl {
                fn CollectionChange(&self) -> windows_core::Result<CollectionChange>;
                fn Index(&self) -> windows_core::Result<u32>;
            }
            impl IVectorChangedEventArgs_Vtbl {
                pub const fn new<Identity: IVectorChangedEventArgs_Impl, const OFFSET: isize>(
                ) -> Self {
                    unsafe extern "system" fn CollectionChange<
                        Identity: IVectorChangedEventArgs_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut CollectionChange,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IVectorChangedEventArgs_Impl::CollectionChange(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn Index<
                        Identity: IVectorChangedEventArgs_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut u32,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IVectorChangedEventArgs_Impl::Index(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<
                            Identity,
                            IVectorChangedEventArgs,
                            OFFSET,
                        >(),
                        CollectionChange: CollectionChange::<Identity, OFFSET>,
                        Index: Index::<Identity, OFFSET>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IVectorChangedEventArgs as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct IVectorChangedEventArgs_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub CollectionChange: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut CollectionChange,
                )
                    -> windows_core::HRESULT,
                pub Index: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut u32,
                ) -> windows_core::HRESULT,
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct IVectorView<T>(windows_core::IUnknown, core::marker::PhantomData<T>)
            where
                T: windows_core::RuntimeType + 'static;
            impl<T: windows_core::RuntimeType + 'static>
                windows_core::imp::CanInto<windows_core::IUnknown> for IVectorView<T>
            {
            }
            impl<T: windows_core::RuntimeType + 'static>
                windows_core::imp::CanInto<windows_core::IInspectable> for IVectorView<T>
            {
            }
            unsafe impl<T: windows_core::RuntimeType + 'static> windows_core::Interface for IVectorView<T> {
                type Vtable = IVectorView_Vtbl<T>;
                const IID: windows_core::GUID = windows_core::GUID::from_signature(
                    <Self as windows_core::RuntimeType>::SIGNATURE,
                );
            }
            impl<T: windows_core::RuntimeType + 'static> windows_core::RuntimeType for IVectorView<T> {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::new()
                        .push_slice(b"pinterface({bbe1fa4c-b0e3-4583-baef-1f1b2e483e56}")
                        .push_slice(b";")
                        .push_other(T::SIGNATURE)
                        .push_slice(b")");
            }
            impl<T: windows_core::RuntimeType + 'static> windows_core::imp::CanInto<IIterable<T>>
                for IVectorView<T>
            {
                const QUERY: bool = true;
            }
            impl<T: windows_core::RuntimeType + 'static> IVectorView<T> {
                pub fn GetAt(&self, index: u32) -> windows_core::Result<T> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetAt)(
                            windows_core::Interface::as_raw(this),
                            index,
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Size(&self) -> windows_core::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Size)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
                where
                    P0: windows_core::Param<T>,
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IndexOf)(
                            windows_core::Interface::as_raw(this),
                            value.param().abi(),
                            index,
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn GetMany(
                    &self,
                    startindex: u32,
                    items: &mut [<T as windows_core::Type<T>>::Default],
                ) -> windows_core::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetMany)(
                            windows_core::Interface::as_raw(this),
                            startindex,
                            items.len().try_into().unwrap(),
                            core::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn First(&self) -> windows_core::Result<IIterator<T>> {
                    let this = &windows_core::Interface::cast::<IIterable<T>>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).First)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
            }
            impl<T: windows_core::RuntimeType + 'static> IntoIterator for IVectorView<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    IntoIterator::into_iter(&self)
                }
            }
            impl<T: windows_core::RuntimeType + 'static> IntoIterator for &IVectorView<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            impl<T: windows_core::RuntimeType + 'static> windows_core::RuntimeName for IVectorView<T> {
                const NAME: &'static str = "Windows.Foundation.Collections.IVectorView";
            }
            pub trait IVectorView_Impl<T>: IIterable_Impl<T>
            where
                T: windows_core::RuntimeType + 'static,
            {
                fn GetAt(&self, index: u32) -> windows_core::Result<T>;
                fn Size(&self) -> windows_core::Result<u32>;
                fn IndexOf(
                    &self,
                    value: &<T as windows_core::Type<T>>::Default,
                    index: &mut u32,
                ) -> windows_core::Result<bool>;
                fn GetMany(
                    &self,
                    startIndex: u32,
                    items: &mut [<T as windows_core::Type<T>>::Default],
                ) -> windows_core::Result<u32>;
            }
            impl<T: windows_core::RuntimeType + 'static> IVectorView_Vtbl<T> {
                pub const fn new<Identity: IVectorView_Impl<T>, const OFFSET: isize>() -> Self {
                    unsafe extern "system" fn GetAt<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IVectorView_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        index: u32,
                        result__: *mut windows_core::AbiType<T>,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IVectorView_Impl::GetAt(this, index) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn Size<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IVectorView_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut u32,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IVectorView_Impl::Size(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn IndexOf<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IVectorView_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        value: windows_core::AbiType<T>,
                        index: *mut u32,
                        result__: *mut bool,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IVectorView_Impl::IndexOf(
                            this,
                            core::mem::transmute(&value),
                            core::mem::transmute_copy(&index),
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn GetMany<
                        T: windows_core::RuntimeType + 'static,
                        Identity: IVectorView_Impl<T>,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        startindex: u32,
                        items_array_size: u32,
                        items: *mut T,
                        result__: *mut u32,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IVectorView_Impl::GetMany(
                            this,
                            startindex,
                            core::slice::from_raw_parts_mut(
                                core::mem::transmute_copy(&items),
                                items_array_size as usize,
                            ),
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<
                            Identity,
                            IVectorView<T>,
                            OFFSET,
                        >(),
                        GetAt: GetAt::<T, Identity, OFFSET>,
                        Size: Size::<T, Identity, OFFSET>,
                        IndexOf: IndexOf::<T, Identity, OFFSET>,
                        GetMany: GetMany::<T, Identity, OFFSET>,
                        T: core::marker::PhantomData::<T>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IVectorView<T> as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct IVectorView_Vtbl<T>
            where
                T: windows_core::RuntimeType + 'static,
            {
                pub base__: windows_core::IInspectable_Vtbl,
                pub GetAt: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    u32,
                    *mut windows_core::AbiType<T>,
                ) -> windows_core::HRESULT,
                pub Size: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut u32,
                ) -> windows_core::HRESULT,
                pub IndexOf: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    windows_core::AbiType<T>,
                    *mut u32,
                    *mut bool,
                ) -> windows_core::HRESULT,
                pub GetMany: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    u32,
                    u32,
                    *mut T,
                    *mut u32,
                ) -> windows_core::HRESULT,
                T: core::marker::PhantomData<T>,
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct MapChangedEventHandler<K, V>(
                windows_core::IUnknown,
                core::marker::PhantomData<K>,
                core::marker::PhantomData<V>,
            )
            where
                K: windows_core::RuntimeType + 'static,
                V: windows_core::RuntimeType + 'static;
            unsafe impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::Interface for MapChangedEventHandler<K, V>
            {
                type Vtable = MapChangedEventHandler_Vtbl<K, V>;
                const IID: windows_core::GUID = windows_core::GUID::from_signature(
                    <Self as windows_core::RuntimeType>::SIGNATURE,
                );
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > windows_core::RuntimeType for MapChangedEventHandler<K, V>
            {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::new()
                        .push_slice(b"pinterface({179517f3-94ee-41f8-bddc-768a895544f3}")
                        .push_slice(b";")
                        .push_other(K::SIGNATURE)
                        .push_slice(b";")
                        .push_other(V::SIGNATURE)
                        .push_slice(b")");
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                > MapChangedEventHandler<K, V>
            {
                pub fn new<
                    F: FnMut(
                            Option<&IObservableMap<K, V>>,
                            Option<&IMapChangedEventArgs<K>>,
                        ) -> windows_core::Result<()>
                        + Send
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = MapChangedEventHandlerBox {
                        vtable: &MapChangedEventHandlerBox::<K, V, F>::VTABLE,
                        count: windows_core::imp::RefCount::new(1),
                        invoke,
                    };
                    unsafe { core::mem::transmute(Box::new(com)) }
                }
                pub fn Invoke<P0, P1>(&self, sender: P0, event: P1) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<IObservableMap<K, V>>,
                    P1: windows_core::Param<IMapChangedEventArgs<K>>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).Invoke)(
                            windows_core::Interface::as_raw(this),
                            sender.param().abi(),
                            event.param().abi(),
                        )
                        .ok()
                    }
                }
            }
            #[repr(C)]
            pub struct MapChangedEventHandler_Vtbl<K, V>
            where
                K: windows_core::RuntimeType + 'static,
                V: windows_core::RuntimeType + 'static,
            {
                base__: windows_core::IUnknown_Vtbl,
                Invoke: unsafe extern "system" fn(
                    this: *mut core::ffi::c_void,
                    sender: *mut core::ffi::c_void,
                    event: *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
                K: core::marker::PhantomData<K>,
                V: core::marker::PhantomData<V>,
            }
            #[repr(C)]
            struct MapChangedEventHandlerBox<
                K,
                V,
                F: FnMut(
                        Option<&IObservableMap<K, V>>,
                        Option<&IMapChangedEventArgs<K>>,
                    ) -> windows_core::Result<()>
                    + Send
                    + 'static,
            >
            where
                K: windows_core::RuntimeType + 'static,
                V: windows_core::RuntimeType + 'static,
            {
                vtable: *const MapChangedEventHandler_Vtbl<K, V>,
                invoke: F,
                count: windows_core::imp::RefCount,
            }
            impl<
                    K: windows_core::RuntimeType + 'static,
                    V: windows_core::RuntimeType + 'static,
                    F: FnMut(
                            Option<&IObservableMap<K, V>>,
                            Option<&IMapChangedEventArgs<K>>,
                        ) -> windows_core::Result<()>
                        + Send
                        + 'static,
                > MapChangedEventHandlerBox<K, V, F>
            {
                const VTABLE: MapChangedEventHandler_Vtbl<K, V> =
                    MapChangedEventHandler_Vtbl::<K, V> {
                        base__: windows_core::IUnknown_Vtbl {
                            QueryInterface: Self::QueryInterface,
                            AddRef: Self::AddRef,
                            Release: Self::Release,
                        },
                        Invoke: Self::Invoke,
                        K: core::marker::PhantomData::<K>,
                        V: core::marker::PhantomData::<V>,
                    };
                unsafe extern "system" fn QueryInterface(
                    this: *mut core::ffi::c_void,
                    iid: *const windows_core::GUID,
                    interface: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = this as *mut *mut core::ffi::c_void as *mut Self;
                    if iid.is_null() || interface.is_null() {
                        return windows_core::HRESULT(-2147467261);
                    }
                    *interface = if *iid
                        == <MapChangedEventHandler<K, V> as windows_core::Interface>::IID
                        || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                        || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        core::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        windows_core::HRESULT(-2147467262)
                    } else {
                        (*this).count.add_ref();
                        windows_core::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
                    let this = this as *mut *mut core::ffi::c_void as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
                    let this = this as *mut *mut core::ffi::c_void as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        let _ = Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: *mut core::ffi::c_void,
                    sender: *mut core::ffi::c_void,
                    event: *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
                    (this.invoke)(
                        windows_core::from_raw_borrowed(&sender),
                        windows_core::from_raw_borrowed(&event),
                    )
                    .into()
                }
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct PropertySet(windows_core::IUnknown);
            windows_core::imp::interface_hierarchy!(
                PropertySet,
                windows_core::IUnknown,
                windows_core::IInspectable,
                IPropertySet
            );
            windows_core::imp::required_hierarchy ! ( PropertySet , IIterable < IKeyValuePair < windows_core::HSTRING , windows_core::IInspectable > > , IMap < windows_core::HSTRING , windows_core::IInspectable > , IObservableMap < windows_core::HSTRING , windows_core::IInspectable > );
            impl PropertySet {
                pub fn new() -> windows_core::Result<Self> {
                    Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        PropertySet,
                        windows_core::imp::IGenericFactory,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
                pub fn First(
                    &self,
                ) -> windows_core::Result<
                    IIterator<IKeyValuePair<windows_core::HSTRING, windows_core::IInspectable>>,
                > {
                    let this = &windows_core::Interface::cast::<
                        IIterable<IKeyValuePair<windows_core::HSTRING, windows_core::IInspectable>>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).First)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Lookup(
                    &self,
                    key: &windows_core::HSTRING,
                ) -> windows_core::Result<windows_core::IInspectable> {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Lookup)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(key),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Size(&self) -> windows_core::Result<u32> {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Size)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn HasKey(&self, key: &windows_core::HSTRING) -> windows_core::Result<bool> {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).HasKey)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(key),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn GetView(
                    &self,
                ) -> windows_core::Result<IMapView<windows_core::HSTRING, windows_core::IInspectable>>
                {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetView)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Insert<P1>(
                    &self,
                    key: &windows_core::HSTRING,
                    value: P1,
                ) -> windows_core::Result<bool>
                where
                    P1: windows_core::Param<windows_core::IInspectable>,
                {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Insert)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(key),
                            value.param().abi(),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn Remove(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Remove)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(key),
                        )
                        .ok()
                    }
                }
                pub fn Clear(&self) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Clear)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
                pub fn MapChanged<P0>(
                    &self,
                    vhnd: P0,
                ) -> windows_core::Result<super::EventRegistrationToken>
                where
                    P0: windows_core::Param<
                        MapChangedEventHandler<windows_core::HSTRING, windows_core::IInspectable>,
                    >,
                {
                    let this = &windows_core::Interface::cast::<
                        IObservableMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).MapChanged)(
                            windows_core::Interface::as_raw(this),
                            vhnd.param().abi(),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn RemoveMapChanged(
                    &self,
                    token: super::EventRegistrationToken,
                ) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<
                        IObservableMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveMapChanged)(
                            windows_core::Interface::as_raw(this),
                            token,
                        )
                        .ok()
                    }
                }
            }
            impl windows_core::RuntimeType for PropertySet {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_class::<Self, IPropertySet>();
            }
            unsafe impl windows_core::Interface for PropertySet {
                type Vtable = <IPropertySet as windows_core::Interface>::Vtable;
                const IID: windows_core::GUID = <IPropertySet as windows_core::Interface>::IID;
            }
            impl windows_core::RuntimeName for PropertySet {
                const NAME: &'static str = "Windows.Foundation.Collections.PropertySet";
            }
            unsafe impl Send for PropertySet {}
            unsafe impl Sync for PropertySet {}
            impl IntoIterator for PropertySet {
                type Item = IKeyValuePair<windows_core::HSTRING, windows_core::IInspectable>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    IntoIterator::into_iter(&self)
                }
            }
            impl IntoIterator for &PropertySet {
                type Item = IKeyValuePair<windows_core::HSTRING, windows_core::IInspectable>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct StringMap(windows_core::IUnknown);
            windows_core::imp::interface_hierarchy ! ( StringMap , windows_core::IUnknown , windows_core::IInspectable , IMap < windows_core::HSTRING , windows_core::HSTRING > );
            windows_core::imp::required_hierarchy ! ( StringMap , IIterable < IKeyValuePair < windows_core::HSTRING , windows_core::HSTRING > > , IObservableMap < windows_core::HSTRING , windows_core::HSTRING > );
            impl StringMap {
                pub fn new() -> windows_core::Result<Self> {
                    Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        StringMap,
                        windows_core::imp::IGenericFactory,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
                pub fn First(
                    &self,
                ) -> windows_core::Result<
                    IIterator<IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>>,
                > {
                    let this = &windows_core::Interface::cast::<
                        IIterable<IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).First)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Lookup(
                    &self,
                    key: &windows_core::HSTRING,
                ) -> windows_core::Result<windows_core::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Lookup)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(key),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn Size(&self) -> windows_core::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Size)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn HasKey(&self, key: &windows_core::HSTRING) -> windows_core::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).HasKey)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(key),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn GetView(
                    &self,
                ) -> windows_core::Result<IMapView<windows_core::HSTRING, windows_core::HSTRING>>
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetView)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Insert(
                    &self,
                    key: &windows_core::HSTRING,
                    value: &windows_core::HSTRING,
                ) -> windows_core::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Insert)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(key),
                            core::mem::transmute_copy(value),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn Remove(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).Remove)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(key),
                        )
                        .ok()
                    }
                }
                pub fn Clear(&self) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).Clear)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
                pub fn MapChanged<P0>(
                    &self,
                    vhnd: P0,
                ) -> windows_core::Result<super::EventRegistrationToken>
                where
                    P0: windows_core::Param<
                        MapChangedEventHandler<windows_core::HSTRING, windows_core::HSTRING>,
                    >,
                {
                    let this = &windows_core::Interface::cast::<
                        IObservableMap<windows_core::HSTRING, windows_core::HSTRING>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).MapChanged)(
                            windows_core::Interface::as_raw(this),
                            vhnd.param().abi(),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn RemoveMapChanged(
                    &self,
                    token: super::EventRegistrationToken,
                ) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<
                        IObservableMap<windows_core::HSTRING, windows_core::HSTRING>,
                    >(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveMapChanged)(
                            windows_core::Interface::as_raw(this),
                            token,
                        )
                        .ok()
                    }
                }
            }
            impl windows_core::RuntimeType for StringMap {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_class::<
                        Self,
                        IMap<windows_core::HSTRING, windows_core::HSTRING>,
                    >();
            }
            unsafe impl windows_core::Interface for StringMap {
                type Vtable = < IMap < windows_core::HSTRING , windows_core::HSTRING > as windows_core::Interface >::Vtable ;
                const IID :windows_core::GUID = < IMap < windows_core::HSTRING , windows_core::HSTRING > as windows_core::Interface >::IID ;
            }
            impl windows_core::RuntimeName for StringMap {
                const NAME: &'static str = "Windows.Foundation.Collections.StringMap";
            }
            unsafe impl Send for StringMap {}
            unsafe impl Sync for StringMap {}
            impl IntoIterator for StringMap {
                type Item = IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    IntoIterator::into_iter(&self)
                }
            }
            impl IntoIterator for &StringMap {
                type Item = IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct ValueSet(windows_core::IUnknown);
            windows_core::imp::interface_hierarchy!(
                ValueSet,
                windows_core::IUnknown,
                windows_core::IInspectable,
                IPropertySet
            );
            windows_core::imp::required_hierarchy ! ( ValueSet , IIterable < IKeyValuePair < windows_core::HSTRING , windows_core::IInspectable > > , IMap < windows_core::HSTRING , windows_core::IInspectable > , IObservableMap < windows_core::HSTRING , windows_core::IInspectable > );
            impl ValueSet {
                pub fn new() -> windows_core::Result<Self> {
                    Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        ValueSet,
                        windows_core::imp::IGenericFactory,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
                pub fn First(
                    &self,
                ) -> windows_core::Result<
                    IIterator<IKeyValuePair<windows_core::HSTRING, windows_core::IInspectable>>,
                > {
                    let this = &windows_core::Interface::cast::<
                        IIterable<IKeyValuePair<windows_core::HSTRING, windows_core::IInspectable>>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).First)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Lookup(
                    &self,
                    key: &windows_core::HSTRING,
                ) -> windows_core::Result<windows_core::IInspectable> {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Lookup)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(key),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Size(&self) -> windows_core::Result<u32> {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Size)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn HasKey(&self, key: &windows_core::HSTRING) -> windows_core::Result<bool> {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).HasKey)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(key),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn GetView(
                    &self,
                ) -> windows_core::Result<IMapView<windows_core::HSTRING, windows_core::IInspectable>>
                {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetView)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn Insert<P1>(
                    &self,
                    key: &windows_core::HSTRING,
                    value: P1,
                ) -> windows_core::Result<bool>
                where
                    P1: windows_core::Param<windows_core::IInspectable>,
                {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Insert)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(key),
                            value.param().abi(),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn Remove(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Remove)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(key),
                        )
                        .ok()
                    }
                }
                pub fn Clear(&self) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<
                        IMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Clear)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
                pub fn MapChanged<P0>(
                    &self,
                    vhnd: P0,
                ) -> windows_core::Result<super::EventRegistrationToken>
                where
                    P0: windows_core::Param<
                        MapChangedEventHandler<windows_core::HSTRING, windows_core::IInspectable>,
                    >,
                {
                    let this = &windows_core::Interface::cast::<
                        IObservableMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).MapChanged)(
                            windows_core::Interface::as_raw(this),
                            vhnd.param().abi(),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn RemoveMapChanged(
                    &self,
                    token: super::EventRegistrationToken,
                ) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<
                        IObservableMap<windows_core::HSTRING, windows_core::IInspectable>,
                    >(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveMapChanged)(
                            windows_core::Interface::as_raw(this),
                            token,
                        )
                        .ok()
                    }
                }
            }
            impl windows_core::RuntimeType for ValueSet {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_class::<Self, IPropertySet>();
            }
            unsafe impl windows_core::Interface for ValueSet {
                type Vtable = <IPropertySet as windows_core::Interface>::Vtable;
                const IID: windows_core::GUID = <IPropertySet as windows_core::Interface>::IID;
            }
            impl windows_core::RuntimeName for ValueSet {
                const NAME: &'static str = "Windows.Foundation.Collections.ValueSet";
            }
            unsafe impl Send for ValueSet {}
            unsafe impl Sync for ValueSet {}
            impl IntoIterator for ValueSet {
                type Item = IKeyValuePair<windows_core::HSTRING, windows_core::IInspectable>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    IntoIterator::into_iter(&self)
                }
            }
            impl IntoIterator for &ValueSet {
                type Item = IKeyValuePair<windows_core::HSTRING, windows_core::IInspectable>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct VectorChangedEventHandler<T>(
                windows_core::IUnknown,
                core::marker::PhantomData<T>,
            )
            where
                T: windows_core::RuntimeType + 'static;
            unsafe impl<T: windows_core::RuntimeType + 'static> windows_core::Interface
                for VectorChangedEventHandler<T>
            {
                type Vtable = VectorChangedEventHandler_Vtbl<T>;
                const IID: windows_core::GUID = windows_core::GUID::from_signature(
                    <Self as windows_core::RuntimeType>::SIGNATURE,
                );
            }
            impl<T: windows_core::RuntimeType + 'static> windows_core::RuntimeType
                for VectorChangedEventHandler<T>
            {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::new()
                        .push_slice(b"pinterface({0c051752-9fbf-4c70-aa0c-0e4c82d9a761}")
                        .push_slice(b";")
                        .push_other(T::SIGNATURE)
                        .push_slice(b")");
            }
            impl<T: windows_core::RuntimeType + 'static> VectorChangedEventHandler<T> {
                pub fn new<
                    F: FnMut(
                            Option<&IObservableVector<T>>,
                            Option<&IVectorChangedEventArgs>,
                        ) -> windows_core::Result<()>
                        + Send
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = VectorChangedEventHandlerBox {
                        vtable: &VectorChangedEventHandlerBox::<T, F>::VTABLE,
                        count: windows_core::imp::RefCount::new(1),
                        invoke,
                    };
                    unsafe { core::mem::transmute(Box::new(com)) }
                }
                pub fn Invoke<P0, P1>(&self, sender: P0, event: P1) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<IObservableVector<T>>,
                    P1: windows_core::Param<IVectorChangedEventArgs>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).Invoke)(
                            windows_core::Interface::as_raw(this),
                            sender.param().abi(),
                            event.param().abi(),
                        )
                        .ok()
                    }
                }
            }
            #[repr(C)]
            pub struct VectorChangedEventHandler_Vtbl<T>
            where
                T: windows_core::RuntimeType + 'static,
            {
                base__: windows_core::IUnknown_Vtbl,
                Invoke: unsafe extern "system" fn(
                    this: *mut core::ffi::c_void,
                    sender: *mut core::ffi::c_void,
                    event: *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
                T: core::marker::PhantomData<T>,
            }
            #[repr(C)]
            struct VectorChangedEventHandlerBox<
                T,
                F: FnMut(
                        Option<&IObservableVector<T>>,
                        Option<&IVectorChangedEventArgs>,
                    ) -> windows_core::Result<()>
                    + Send
                    + 'static,
            >
            where
                T: windows_core::RuntimeType + 'static,
            {
                vtable: *const VectorChangedEventHandler_Vtbl<T>,
                invoke: F,
                count: windows_core::imp::RefCount,
            }
            impl<
                    T: windows_core::RuntimeType + 'static,
                    F: FnMut(
                            Option<&IObservableVector<T>>,
                            Option<&IVectorChangedEventArgs>,
                        ) -> windows_core::Result<()>
                        + Send
                        + 'static,
                > VectorChangedEventHandlerBox<T, F>
            {
                const VTABLE: VectorChangedEventHandler_Vtbl<T> =
                    VectorChangedEventHandler_Vtbl::<T> {
                        base__: windows_core::IUnknown_Vtbl {
                            QueryInterface: Self::QueryInterface,
                            AddRef: Self::AddRef,
                            Release: Self::Release,
                        },
                        Invoke: Self::Invoke,
                        T: core::marker::PhantomData::<T>,
                    };
                unsafe extern "system" fn QueryInterface(
                    this: *mut core::ffi::c_void,
                    iid: *const windows_core::GUID,
                    interface: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = this as *mut *mut core::ffi::c_void as *mut Self;
                    if iid.is_null() || interface.is_null() {
                        return windows_core::HRESULT(-2147467261);
                    }
                    *interface = if *iid
                        == <VectorChangedEventHandler<T> as windows_core::Interface>::IID
                        || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                        || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        core::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        windows_core::HRESULT(-2147467262)
                    } else {
                        (*this).count.add_ref();
                        windows_core::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
                    let this = this as *mut *mut core::ffi::c_void as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
                    let this = this as *mut *mut core::ffi::c_void as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        let _ = Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: *mut core::ffi::c_void,
                    sender: *mut core::ffi::c_void,
                    event: *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
                    (this.invoke)(
                        windows_core::from_raw_borrowed(&sender),
                        windows_core::from_raw_borrowed(&event),
                    )
                    .into()
                }
            }
        }
        pub mod Diagnostics {
            pub struct AsyncCausalityTracer;
            impl AsyncCausalityTracer {
                pub fn TraceOperationCreation(
                    tracelevel: CausalityTraceLevel,
                    source: CausalitySource,
                    platformid: windows_core::GUID,
                    operationid: u64,
                    operationname: &windows_core::HSTRING,
                    relatedcontext: u64,
                ) -> windows_core::Result<()> {
                    Self::IAsyncCausalityTracerStatics(|this| unsafe {
                        (windows_core::Interface::vtable(this).TraceOperationCreation)(
                            windows_core::Interface::as_raw(this),
                            tracelevel,
                            source,
                            platformid,
                            operationid,
                            core::mem::transmute_copy(operationname),
                            relatedcontext,
                        )
                        .ok()
                    })
                }
                pub fn TraceOperationCompletion(
                    tracelevel: CausalityTraceLevel,
                    source: CausalitySource,
                    platformid: windows_core::GUID,
                    operationid: u64,
                    status: super::AsyncStatus,
                ) -> windows_core::Result<()> {
                    Self::IAsyncCausalityTracerStatics(|this| unsafe {
                        (windows_core::Interface::vtable(this).TraceOperationCompletion)(
                            windows_core::Interface::as_raw(this),
                            tracelevel,
                            source,
                            platformid,
                            operationid,
                            status,
                        )
                        .ok()
                    })
                }
                pub fn TraceOperationRelation(
                    tracelevel: CausalityTraceLevel,
                    source: CausalitySource,
                    platformid: windows_core::GUID,
                    operationid: u64,
                    relation: CausalityRelation,
                ) -> windows_core::Result<()> {
                    Self::IAsyncCausalityTracerStatics(|this| unsafe {
                        (windows_core::Interface::vtable(this).TraceOperationRelation)(
                            windows_core::Interface::as_raw(this),
                            tracelevel,
                            source,
                            platformid,
                            operationid,
                            relation,
                        )
                        .ok()
                    })
                }
                pub fn TraceSynchronousWorkStart(
                    tracelevel: CausalityTraceLevel,
                    source: CausalitySource,
                    platformid: windows_core::GUID,
                    operationid: u64,
                    work: CausalitySynchronousWork,
                ) -> windows_core::Result<()> {
                    Self::IAsyncCausalityTracerStatics(|this| unsafe {
                        (windows_core::Interface::vtable(this).TraceSynchronousWorkStart)(
                            windows_core::Interface::as_raw(this),
                            tracelevel,
                            source,
                            platformid,
                            operationid,
                            work,
                        )
                        .ok()
                    })
                }
                pub fn TraceSynchronousWorkCompletion(
                    tracelevel: CausalityTraceLevel,
                    source: CausalitySource,
                    work: CausalitySynchronousWork,
                ) -> windows_core::Result<()> {
                    Self::IAsyncCausalityTracerStatics(|this| unsafe {
                        (windows_core::Interface::vtable(this).TraceSynchronousWorkCompletion)(
                            windows_core::Interface::as_raw(this),
                            tracelevel,
                            source,
                            work,
                        )
                        .ok()
                    })
                }
                pub fn TracingStatusChanged<P0>(
                    handler: P0,
                ) -> windows_core::Result<super::EventRegistrationToken>
                where
                    P0: windows_core::Param<super::EventHandler<TracingStatusChangedEventArgs>>,
                {
                    Self::IAsyncCausalityTracerStatics(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).TracingStatusChanged)(
                            windows_core::Interface::as_raw(this),
                            handler.param().abi(),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    })
                }
                pub fn RemoveTracingStatusChanged(
                    cookie: super::EventRegistrationToken,
                ) -> windows_core::Result<()> {
                    Self::IAsyncCausalityTracerStatics(|this| unsafe {
                        (windows_core::Interface::vtable(this).RemoveTracingStatusChanged)(
                            windows_core::Interface::as_raw(this),
                            cookie,
                        )
                        .ok()
                    })
                }
                fn IAsyncCausalityTracerStatics<
                    R,
                    F: FnOnce(&IAsyncCausalityTracerStatics) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        AsyncCausalityTracer,
                        IAsyncCausalityTracerStatics,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
            }
            impl windows_core::RuntimeName for AsyncCausalityTracer {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.AsyncCausalityTracer";
            }
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct CausalityRelation(pub i32);
            impl CausalityRelation {
                pub const AssignDelegate: Self = Self(0i32);
                pub const Join: Self = Self(1i32);
                pub const Choice: Self = Self(2i32);
                pub const Cancel: Self = Self(3i32);
                pub const Error: Self = Self(4i32);
            }
            impl windows_core::TypeKind for CausalityRelation {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for CausalityRelation {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Diagnostics.CausalityRelation;i4)",
                    );
            }
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct CausalitySource(pub i32);
            impl CausalitySource {
                pub const Application: Self = Self(0i32);
                pub const Library: Self = Self(1i32);
                pub const System: Self = Self(2i32);
            }
            impl windows_core::TypeKind for CausalitySource {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for CausalitySource {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Diagnostics.CausalitySource;i4)",
                    );
            }
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct CausalitySynchronousWork(pub i32);
            impl CausalitySynchronousWork {
                pub const CompletionNotification: Self = Self(0i32);
                pub const ProgressNotification: Self = Self(1i32);
                pub const Execution: Self = Self(2i32);
            }
            impl windows_core::TypeKind for CausalitySynchronousWork {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for CausalitySynchronousWork {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Diagnostics.CausalitySynchronousWork;i4)",
                    );
            }
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct CausalityTraceLevel(pub i32);
            impl CausalityTraceLevel {
                pub const Required: Self = Self(0i32);
                pub const Important: Self = Self(1i32);
                pub const Verbose: Self = Self(2i32);
            }
            impl windows_core::TypeKind for CausalityTraceLevel {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for CausalityTraceLevel {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Diagnostics.CausalityTraceLevel;i4)",
                    );
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct ErrorDetails(windows_core::IUnknown);
            windows_core::imp::interface_hierarchy!(
                ErrorDetails,
                windows_core::IUnknown,
                windows_core::IInspectable
            );
            impl ErrorDetails {
                pub fn Description(&self) -> windows_core::Result<windows_core::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Description)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn LongDescription(&self) -> windows_core::Result<windows_core::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).LongDescription)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn HelpUri(&self) -> windows_core::Result<super::Uri> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).HelpUri)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn CreateFromHResultAsync(
                    errorcode: i32,
                ) -> windows_core::Result<super::IAsyncOperation<ErrorDetails>> {
                    Self::IErrorDetailsStatics(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).CreateFromHResultAsync)(
                            windows_core::Interface::as_raw(this),
                            errorcode,
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    })
                }
                fn IErrorDetailsStatics<
                    R,
                    F: FnOnce(&IErrorDetailsStatics) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        ErrorDetails,
                        IErrorDetailsStatics,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
            }
            impl windows_core::RuntimeType for ErrorDetails {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_class::<Self, IErrorDetails>();
            }
            unsafe impl windows_core::Interface for ErrorDetails {
                type Vtable = <IErrorDetails as windows_core::Interface>::Vtable;
                const IID: windows_core::GUID = <IErrorDetails as windows_core::Interface>::IID;
            }
            impl windows_core::RuntimeName for ErrorDetails {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.ErrorDetails";
            }
            unsafe impl Send for ErrorDetails {}
            unsafe impl Sync for ErrorDetails {}
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct ErrorOptions(pub u32);
            impl ErrorOptions {
                pub const None: Self = Self(0u32);
                pub const SuppressExceptions: Self = Self(1u32);
                pub const ForceExceptions: Self = Self(2u32);
                pub const UseSetErrorInfo: Self = Self(4u32);
                pub const SuppressSetErrorInfo: Self = Self(8u32);
            }
            impl windows_core::TypeKind for ErrorOptions {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for ErrorOptions {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Diagnostics.ErrorOptions;u4)",
                    );
            }
            impl ErrorOptions {
                pub const fn contains(&self, other: Self) -> bool {
                    self.0 & other.0 == other.0
                }
            }
            impl core::ops::BitOr for ErrorOptions {
                type Output = Self;
                fn bitor(self, other: Self) -> Self {
                    Self(self.0 | other.0)
                }
            }
            impl core::ops::BitAnd for ErrorOptions {
                type Output = Self;
                fn bitand(self, other: Self) -> Self {
                    Self(self.0 & other.0)
                }
            }
            impl core::ops::BitOrAssign for ErrorOptions {
                fn bitor_assign(&mut self, other: Self) {
                    self.0.bitor_assign(other.0)
                }
            }
            impl core::ops::BitAndAssign for ErrorOptions {
                fn bitand_assign(&mut self, other: Self) {
                    self.0.bitand_assign(other.0)
                }
            }
            impl core::ops::Not for ErrorOptions {
                type Output = Self;
                fn not(self) -> Self {
                    Self(self.0.not())
                }
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct FileLoggingSession(windows_core::IUnknown);
            windows_core::imp::interface_hierarchy!(
                FileLoggingSession,
                windows_core::IUnknown,
                windows_core::IInspectable,
                IFileLoggingSession
            );
            windows_core::imp::required_hierarchy!(FileLoggingSession, super::IClosable);
            impl FileLoggingSession {
                pub fn Close(&self) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<super::IClosable>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Close)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
                pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Name)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn AddLoggingChannel<P0>(&self, loggingchannel: P0) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<ILoggingChannel>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddLoggingChannel)(
                            windows_core::Interface::as_raw(this),
                            loggingchannel.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn AddLoggingChannelWithLevel<P0>(
                    &self,
                    loggingchannel: P0,
                    maxlevel: LoggingLevel,
                ) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<ILoggingChannel>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddLoggingChannelWithLevel)(
                            windows_core::Interface::as_raw(this),
                            loggingchannel.param().abi(),
                            maxlevel,
                        )
                        .ok()
                    }
                }
                pub fn RemoveLoggingChannel<P0>(
                    &self,
                    loggingchannel: P0,
                ) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<ILoggingChannel>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveLoggingChannel)(
                            windows_core::Interface::as_raw(this),
                            loggingchannel.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn LogFileGenerated<P0>(
                    &self,
                    handler: P0,
                ) -> windows_core::Result<super::EventRegistrationToken>
                where
                    P0: windows_core::Param<
                        super::TypedEventHandler<IFileLoggingSession, LogFileGeneratedEventArgs>,
                    >,
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).LogFileGenerated)(
                            windows_core::Interface::as_raw(this),
                            handler.param().abi(),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn RemoveLogFileGenerated(
                    &self,
                    token: super::EventRegistrationToken,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveLogFileGenerated)(
                            windows_core::Interface::as_raw(this),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn Create(
                    name: &windows_core::HSTRING,
                ) -> windows_core::Result<FileLoggingSession> {
                    Self::IFileLoggingSessionFactory(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Create)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    })
                }
                fn IFileLoggingSessionFactory<
                    R,
                    F: FnOnce(&IFileLoggingSessionFactory) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        FileLoggingSession,
                        IFileLoggingSessionFactory,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
            }
            impl windows_core::RuntimeType for FileLoggingSession {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_class::<Self, IFileLoggingSession>();
            }
            unsafe impl windows_core::Interface for FileLoggingSession {
                type Vtable = <IFileLoggingSession as windows_core::Interface>::Vtable;
                const IID: windows_core::GUID =
                    <IFileLoggingSession as windows_core::Interface>::IID;
            }
            impl windows_core::RuntimeName for FileLoggingSession {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.FileLoggingSession";
            }
            unsafe impl Send for FileLoggingSession {}
            unsafe impl Sync for FileLoggingSession {}
            windows_core::imp::define_interface!(
                IAsyncCausalityTracerStatics,
                IAsyncCausalityTracerStatics_Vtbl,
                0x50850b26_267e_451b_a890_ab6a370245ee
            );
            impl windows_core::RuntimeType for IAsyncCausalityTracerStatics {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct IAsyncCausalityTracerStatics_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub TraceOperationCreation: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    CausalityTraceLevel,
                    CausalitySource,
                    windows_core::GUID,
                    u64,
                    *mut core::ffi::c_void,
                    u64,
                )
                    -> windows_core::HRESULT,
                pub TraceOperationCompletion: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    CausalityTraceLevel,
                    CausalitySource,
                    windows_core::GUID,
                    u64,
                    super::AsyncStatus,
                )
                    -> windows_core::HRESULT,
                pub TraceOperationRelation: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    CausalityTraceLevel,
                    CausalitySource,
                    windows_core::GUID,
                    u64,
                    CausalityRelation,
                )
                    -> windows_core::HRESULT,
                pub TraceSynchronousWorkStart: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    CausalityTraceLevel,
                    CausalitySource,
                    windows_core::GUID,
                    u64,
                    CausalitySynchronousWork,
                )
                    -> windows_core::HRESULT,
                pub TraceSynchronousWorkCompletion:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        CausalityTraceLevel,
                        CausalitySource,
                        CausalitySynchronousWork,
                    ) -> windows_core::HRESULT,
                pub TracingStatusChanged: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut super::EventRegistrationToken,
                )
                    -> windows_core::HRESULT,
                pub RemoveTracingStatusChanged: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    super::EventRegistrationToken,
                )
                    -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                IErrorDetails,
                IErrorDetails_Vtbl,
                0x378cbb01_2cc9_428f_8c55_2c990d463e8f
            );
            impl windows_core::RuntimeType for IErrorDetails {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct IErrorDetails_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Description: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
                pub LongDescription: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
                pub HelpUri: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                IErrorDetailsStatics,
                IErrorDetailsStatics_Vtbl,
                0xb7703750_0b1d_46c8_aa0e_4b8178e4fce9
            );
            impl windows_core::RuntimeType for IErrorDetailsStatics {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct IErrorDetailsStatics_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub CreateFromHResultAsync: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    i32,
                    *mut *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                IErrorReportingSettings,
                IErrorReportingSettings_Vtbl,
                0x16369792_b03e_4ba1_8bb8_d28f4ab4d2c0
            );
            impl windows_core::RuntimeType for IErrorReportingSettings {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            windows_core::imp::interface_hierarchy!(
                IErrorReportingSettings,
                windows_core::IUnknown,
                windows_core::IInspectable
            );
            impl IErrorReportingSettings {
                pub fn SetErrorOptions(&self, value: ErrorOptions) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).SetErrorOptions)(
                            windows_core::Interface::as_raw(this),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn GetErrorOptions(&self) -> windows_core::Result<ErrorOptions> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetErrorOptions)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
            }
            impl windows_core::RuntimeName for IErrorReportingSettings {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.IErrorReportingSettings";
            }
            pub trait IErrorReportingSettings_Impl: windows_core::IUnknownImpl {
                fn SetErrorOptions(&self, value: ErrorOptions) -> windows_core::Result<()>;
                fn GetErrorOptions(&self) -> windows_core::Result<ErrorOptions>;
            }
            impl IErrorReportingSettings_Vtbl {
                pub const fn new<Identity: IErrorReportingSettings_Impl, const OFFSET: isize>(
                ) -> Self {
                    unsafe extern "system" fn SetErrorOptions<
                        Identity: IErrorReportingSettings_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        value: ErrorOptions,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IErrorReportingSettings_Impl::SetErrorOptions(this, value).into()
                    }
                    unsafe extern "system" fn GetErrorOptions<
                        Identity: IErrorReportingSettings_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut ErrorOptions,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IErrorReportingSettings_Impl::GetErrorOptions(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<
                            Identity,
                            IErrorReportingSettings,
                            OFFSET,
                        >(),
                        SetErrorOptions: SetErrorOptions::<Identity, OFFSET>,
                        GetErrorOptions: GetErrorOptions::<Identity, OFFSET>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IErrorReportingSettings as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct IErrorReportingSettings_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub SetErrorOptions: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    ErrorOptions,
                )
                    -> windows_core::HRESULT,
                pub GetErrorOptions: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut ErrorOptions,
                )
                    -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                IFileLoggingSession,
                IFileLoggingSession_Vtbl,
                0x24c74216_fed2_404c_895f_1f9699cb02f7
            );
            impl windows_core::RuntimeType for IFileLoggingSession {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            windows_core::imp::interface_hierarchy!(
                IFileLoggingSession,
                windows_core::IUnknown,
                windows_core::IInspectable
            );
            windows_core::imp::required_hierarchy!(IFileLoggingSession, super::IClosable);
            impl IFileLoggingSession {
                pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Name)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn AddLoggingChannel<P0>(&self, loggingchannel: P0) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<ILoggingChannel>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddLoggingChannel)(
                            windows_core::Interface::as_raw(this),
                            loggingchannel.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn AddLoggingChannelWithLevel<P0>(
                    &self,
                    loggingchannel: P0,
                    maxlevel: LoggingLevel,
                ) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<ILoggingChannel>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddLoggingChannelWithLevel)(
                            windows_core::Interface::as_raw(this),
                            loggingchannel.param().abi(),
                            maxlevel,
                        )
                        .ok()
                    }
                }
                pub fn RemoveLoggingChannel<P0>(
                    &self,
                    loggingchannel: P0,
                ) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<ILoggingChannel>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveLoggingChannel)(
                            windows_core::Interface::as_raw(this),
                            loggingchannel.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn LogFileGenerated<P0>(
                    &self,
                    handler: P0,
                ) -> windows_core::Result<super::EventRegistrationToken>
                where
                    P0: windows_core::Param<
                        super::TypedEventHandler<IFileLoggingSession, LogFileGeneratedEventArgs>,
                    >,
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).LogFileGenerated)(
                            windows_core::Interface::as_raw(this),
                            handler.param().abi(),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn RemoveLogFileGenerated(
                    &self,
                    token: super::EventRegistrationToken,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveLogFileGenerated)(
                            windows_core::Interface::as_raw(this),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn Close(&self) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<super::IClosable>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Close)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
            }
            impl windows_core::RuntimeName for IFileLoggingSession {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.IFileLoggingSession";
            }
            pub trait IFileLoggingSession_Impl: super::IClosable_Impl {
                fn Name(&self) -> windows_core::Result<windows_core::HSTRING>;
                fn AddLoggingChannel(
                    &self,
                    loggingChannel: Option<&ILoggingChannel>,
                ) -> windows_core::Result<()>;
                fn AddLoggingChannelWithLevel(
                    &self,
                    loggingChannel: Option<&ILoggingChannel>,
                    maxLevel: LoggingLevel,
                ) -> windows_core::Result<()>;
                fn RemoveLoggingChannel(
                    &self,
                    loggingChannel: Option<&ILoggingChannel>,
                ) -> windows_core::Result<()>;
                fn LogFileGenerated(
                    &self,
                    handler: Option<
                        &super::TypedEventHandler<IFileLoggingSession, LogFileGeneratedEventArgs>,
                    >,
                ) -> windows_core::Result<super::EventRegistrationToken>;
                fn RemoveLogFileGenerated(
                    &self,
                    token: &super::EventRegistrationToken,
                ) -> windows_core::Result<()>;
            }
            impl IFileLoggingSession_Vtbl {
                pub const fn new<Identity: IFileLoggingSession_Impl, const OFFSET: isize>() -> Self
                {
                    unsafe extern "system" fn Name<
                        Identity: IFileLoggingSession_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IFileLoggingSession_Impl::Name(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn AddLoggingChannel<
                        Identity: IFileLoggingSession_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        loggingchannel: *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IFileLoggingSession_Impl::AddLoggingChannel(
                            this,
                            windows_core::from_raw_borrowed(&loggingchannel),
                        )
                        .into()
                    }
                    unsafe extern "system" fn AddLoggingChannelWithLevel<
                        Identity: IFileLoggingSession_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        loggingchannel: *mut core::ffi::c_void,
                        maxlevel: LoggingLevel,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IFileLoggingSession_Impl::AddLoggingChannelWithLevel(
                            this,
                            windows_core::from_raw_borrowed(&loggingchannel),
                            maxlevel,
                        )
                        .into()
                    }
                    unsafe extern "system" fn RemoveLoggingChannel<
                        Identity: IFileLoggingSession_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        loggingchannel: *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IFileLoggingSession_Impl::RemoveLoggingChannel(
                            this,
                            windows_core::from_raw_borrowed(&loggingchannel),
                        )
                        .into()
                    }
                    unsafe extern "system" fn LogFileGenerated<
                        Identity: IFileLoggingSession_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        handler: *mut core::ffi::c_void,
                        result__: *mut super::EventRegistrationToken,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IFileLoggingSession_Impl::LogFileGenerated(
                            this,
                            windows_core::from_raw_borrowed(&handler),
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn RemoveLogFileGenerated<
                        Identity: IFileLoggingSession_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        token: super::EventRegistrationToken,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IFileLoggingSession_Impl::RemoveLogFileGenerated(
                            this,
                            core::mem::transmute(&token),
                        )
                        .into()
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<
                            Identity,
                            IFileLoggingSession,
                            OFFSET,
                        >(),
                        Name: Name::<Identity, OFFSET>,
                        AddLoggingChannel: AddLoggingChannel::<Identity, OFFSET>,
                        AddLoggingChannelWithLevel: AddLoggingChannelWithLevel::<Identity, OFFSET>,
                        RemoveLoggingChannel: RemoveLoggingChannel::<Identity, OFFSET>,
                        CloseAndSaveToFileAsync: 0,
                        LogFileGenerated: LogFileGenerated::<Identity, OFFSET>,
                        RemoveLogFileGenerated: RemoveLogFileGenerated::<Identity, OFFSET>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IFileLoggingSession as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct IFileLoggingSession_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Name: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
                pub AddLoggingChannel: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
                pub AddLoggingChannelWithLevel: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    LoggingLevel,
                )
                    -> windows_core::HRESULT,
                pub RemoveLoggingChannel: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
                CloseAndSaveToFileAsync: usize,
                pub LogFileGenerated: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut super::EventRegistrationToken,
                )
                    -> windows_core::HRESULT,
                pub RemoveLogFileGenerated: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    super::EventRegistrationToken,
                )
                    -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                IFileLoggingSessionFactory,
                IFileLoggingSessionFactory_Vtbl,
                0xeea08dce_8447_4daa_9133_12eb46f697d4
            );
            impl windows_core::RuntimeType for IFileLoggingSessionFactory {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct IFileLoggingSessionFactory_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Create: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                ILogFileGeneratedEventArgs,
                ILogFileGeneratedEventArgs_Vtbl,
                0x269e976f_0d38_4c1a_b53f_b395d881df84
            );
            impl windows_core::RuntimeType for ILogFileGeneratedEventArgs {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct ILogFileGeneratedEventArgs_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                get_File: usize,
            }
            windows_core::imp::define_interface!(
                ILoggingActivity,
                ILoggingActivity_Vtbl,
                0xbc032941_b766_4cb5_9848_97ac6ba6d60c
            );
            impl windows_core::RuntimeType for ILoggingActivity {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct ILoggingActivity_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Name: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
                pub Id: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut windows_core::GUID,
                ) -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                ILoggingActivity2,
                ILoggingActivity2_Vtbl,
                0x26c29808_6322_456a_af82_80c8642f178b
            );
            impl windows_core::RuntimeType for ILoggingActivity2 {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct ILoggingActivity2_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Channel: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
                pub StopActivity: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
                pub StopActivityWithFields: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
                pub StopActivityWithFieldsAndOptions:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                ILoggingActivityFactory,
                ILoggingActivityFactory_Vtbl,
                0x6b33b483_e10a_4c58_97d5_10fb451074fb
            );
            impl windows_core::RuntimeType for ILoggingActivityFactory {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct ILoggingActivityFactory_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub CreateLoggingActivity: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
                pub CreateLoggingActivityWithLevel:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        LoggingLevel,
                        *mut *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                ILoggingChannel,
                ILoggingChannel_Vtbl,
                0xe9a50343_11d7_4f01_b5ca_cf495278c0a8
            );
            impl windows_core::RuntimeType for ILoggingChannel {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            windows_core::imp::interface_hierarchy!(
                ILoggingChannel,
                windows_core::IUnknown,
                windows_core::IInspectable
            );
            windows_core::imp::required_hierarchy!(ILoggingChannel, super::IClosable);
            impl ILoggingChannel {
                pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Name)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn Enabled(&self) -> windows_core::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Enabled)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn Level(&self) -> windows_core::Result<LoggingLevel> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Level)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn LogMessage(
                    &self,
                    eventstring: &windows_core::HSTRING,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogMessage)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(eventstring),
                        )
                        .ok()
                    }
                }
                pub fn LogMessageWithLevel(
                    &self,
                    eventstring: &windows_core::HSTRING,
                    level: LoggingLevel,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogMessageWithLevel)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(eventstring),
                            level,
                        )
                        .ok()
                    }
                }
                pub fn LogValuePair(
                    &self,
                    value1: &windows_core::HSTRING,
                    value2: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogValuePair)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(value1),
                            value2,
                        )
                        .ok()
                    }
                }
                pub fn LogValuePairWithLevel(
                    &self,
                    value1: &windows_core::HSTRING,
                    value2: i32,
                    level: LoggingLevel,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogValuePairWithLevel)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(value1),
                            value2,
                            level,
                        )
                        .ok()
                    }
                }
                pub fn LoggingEnabled<P0>(
                    &self,
                    handler: P0,
                ) -> windows_core::Result<super::EventRegistrationToken>
                where
                    P0: windows_core::Param<
                        super::TypedEventHandler<ILoggingChannel, windows_core::IInspectable>,
                    >,
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).LoggingEnabled)(
                            windows_core::Interface::as_raw(this),
                            handler.param().abi(),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn RemoveLoggingEnabled(
                    &self,
                    token: super::EventRegistrationToken,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveLoggingEnabled)(
                            windows_core::Interface::as_raw(this),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn Close(&self) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<super::IClosable>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Close)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
            }
            impl windows_core::RuntimeName for ILoggingChannel {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.ILoggingChannel";
            }
            pub trait ILoggingChannel_Impl: super::IClosable_Impl {
                fn Name(&self) -> windows_core::Result<windows_core::HSTRING>;
                fn Enabled(&self) -> windows_core::Result<bool>;
                fn Level(&self) -> windows_core::Result<LoggingLevel>;
                fn LogMessage(
                    &self,
                    eventString: &windows_core::HSTRING,
                ) -> windows_core::Result<()>;
                fn LogMessageWithLevel(
                    &self,
                    eventString: &windows_core::HSTRING,
                    level: LoggingLevel,
                ) -> windows_core::Result<()>;
                fn LogValuePair(
                    &self,
                    value1: &windows_core::HSTRING,
                    value2: i32,
                ) -> windows_core::Result<()>;
                fn LogValuePairWithLevel(
                    &self,
                    value1: &windows_core::HSTRING,
                    value2: i32,
                    level: LoggingLevel,
                ) -> windows_core::Result<()>;
                fn LoggingEnabled(
                    &self,
                    handler: Option<
                        &super::TypedEventHandler<ILoggingChannel, windows_core::IInspectable>,
                    >,
                ) -> windows_core::Result<super::EventRegistrationToken>;
                fn RemoveLoggingEnabled(
                    &self,
                    token: &super::EventRegistrationToken,
                ) -> windows_core::Result<()>;
            }
            impl ILoggingChannel_Vtbl {
                pub const fn new<Identity: ILoggingChannel_Impl, const OFFSET: isize>() -> Self {
                    unsafe extern "system" fn Name<
                        Identity: ILoggingChannel_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match ILoggingChannel_Impl::Name(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn Enabled<
                        Identity: ILoggingChannel_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut bool,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match ILoggingChannel_Impl::Enabled(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn Level<
                        Identity: ILoggingChannel_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut LoggingLevel,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match ILoggingChannel_Impl::Level(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn LogMessage<
                        Identity: ILoggingChannel_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        eventstring: *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        ILoggingChannel_Impl::LogMessage(this, core::mem::transmute(&eventstring))
                            .into()
                    }
                    unsafe extern "system" fn LogMessageWithLevel<
                        Identity: ILoggingChannel_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        eventstring: *mut core::ffi::c_void,
                        level: LoggingLevel,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        ILoggingChannel_Impl::LogMessageWithLevel(
                            this,
                            core::mem::transmute(&eventstring),
                            level,
                        )
                        .into()
                    }
                    unsafe extern "system" fn LogValuePair<
                        Identity: ILoggingChannel_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        value1: *mut core::ffi::c_void,
                        value2: i32,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        ILoggingChannel_Impl::LogValuePair(
                            this,
                            core::mem::transmute(&value1),
                            value2,
                        )
                        .into()
                    }
                    unsafe extern "system" fn LogValuePairWithLevel<
                        Identity: ILoggingChannel_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        value1: *mut core::ffi::c_void,
                        value2: i32,
                        level: LoggingLevel,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        ILoggingChannel_Impl::LogValuePairWithLevel(
                            this,
                            core::mem::transmute(&value1),
                            value2,
                            level,
                        )
                        .into()
                    }
                    unsafe extern "system" fn LoggingEnabled<
                        Identity: ILoggingChannel_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        handler: *mut core::ffi::c_void,
                        result__: *mut super::EventRegistrationToken,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match ILoggingChannel_Impl::LoggingEnabled(
                            this,
                            windows_core::from_raw_borrowed(&handler),
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn RemoveLoggingEnabled<
                        Identity: ILoggingChannel_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        token: super::EventRegistrationToken,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        ILoggingChannel_Impl::RemoveLoggingEnabled(
                            this,
                            core::mem::transmute(&token),
                        )
                        .into()
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<
                            Identity,
                            ILoggingChannel,
                            OFFSET,
                        >(),
                        Name: Name::<Identity, OFFSET>,
                        Enabled: Enabled::<Identity, OFFSET>,
                        Level: Level::<Identity, OFFSET>,
                        LogMessage: LogMessage::<Identity, OFFSET>,
                        LogMessageWithLevel: LogMessageWithLevel::<Identity, OFFSET>,
                        LogValuePair: LogValuePair::<Identity, OFFSET>,
                        LogValuePairWithLevel: LogValuePairWithLevel::<Identity, OFFSET>,
                        LoggingEnabled: LoggingEnabled::<Identity, OFFSET>,
                        RemoveLoggingEnabled: RemoveLoggingEnabled::<Identity, OFFSET>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<ILoggingChannel as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct ILoggingChannel_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Name: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
                pub Enabled: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut bool,
                ) -> windows_core::HRESULT,
                pub Level: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut LoggingLevel,
                ) -> windows_core::HRESULT,
                pub LogMessage: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
                pub LogMessageWithLevel: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    LoggingLevel,
                )
                    -> windows_core::HRESULT,
                pub LogValuePair: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub LogValuePairWithLevel: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    i32,
                    LoggingLevel,
                )
                    -> windows_core::HRESULT,
                pub LoggingEnabled: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut super::EventRegistrationToken,
                )
                    -> windows_core::HRESULT,
                pub RemoveLoggingEnabled: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    super::EventRegistrationToken,
                )
                    -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                ILoggingChannel2,
                ILoggingChannel2_Vtbl,
                0x9f4c3cf3_0bac_45a5_9e33_baf3f3a246a5
            );
            impl windows_core::RuntimeType for ILoggingChannel2 {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct ILoggingChannel2_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Id: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut windows_core::GUID,
                ) -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                ILoggingChannelFactory,
                ILoggingChannelFactory_Vtbl,
                0x4edc5b9c_af80_4a9b_b0dc_398f9ae5207b
            );
            impl windows_core::RuntimeType for ILoggingChannelFactory {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct ILoggingChannelFactory_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Create: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                ILoggingChannelFactory2,
                ILoggingChannelFactory2_Vtbl,
                0x4c6ef5dd_3b27_4dc9_99f0_299c6e4603a1
            );
            impl windows_core::RuntimeType for ILoggingChannelFactory2 {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct ILoggingChannelFactory2_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub CreateWithOptions: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
                pub CreateWithOptionsAndId: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    windows_core::GUID,
                    *mut *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                ILoggingChannelOptions,
                ILoggingChannelOptions_Vtbl,
                0xc3e847ff_0ebb_4a53_8c54_dec24926cb2c
            );
            impl windows_core::RuntimeType for ILoggingChannelOptions {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct ILoggingChannelOptions_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Group: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut windows_core::GUID,
                ) -> windows_core::HRESULT,
                pub SetGroup: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    windows_core::GUID,
                ) -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                ILoggingChannelOptionsFactory,
                ILoggingChannelOptionsFactory_Vtbl,
                0xa93151da_7faf_4191_8755_5e86dc65d896
            );
            impl windows_core::RuntimeType for ILoggingChannelOptionsFactory {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct ILoggingChannelOptionsFactory_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Create: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    windows_core::GUID,
                    *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                ILoggingFields,
                ILoggingFields_Vtbl,
                0xd7f6b7af_762d_4579_83bd_52c23bc333bc
            );
            impl windows_core::RuntimeType for ILoggingFields {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct ILoggingFields_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Clear:
                    unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
                pub BeginStruct: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
                pub BeginStructWithTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub EndStruct:
                    unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
                pub AddEmpty: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
                pub AddEmptyWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddEmptyWithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddUInt8: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u8,
                ) -> windows_core::HRESULT,
                pub AddUInt8WithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u8,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddUInt8WithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u8,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddUInt8Array: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const u8,
                )
                    -> windows_core::HRESULT,
                pub AddUInt8ArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const u8,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddUInt8ArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const u8,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddInt16: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    i16,
                ) -> windows_core::HRESULT,
                pub AddInt16WithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    i16,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddInt16WithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    i16,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddInt16Array: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const i16,
                )
                    -> windows_core::HRESULT,
                pub AddInt16ArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const i16,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddInt16ArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const i16,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddUInt16: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u16,
                ) -> windows_core::HRESULT,
                pub AddUInt16WithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u16,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddUInt16WithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u16,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddUInt16Array: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const u16,
                )
                    -> windows_core::HRESULT,
                pub AddUInt16ArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const u16,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddUInt16ArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const u16,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddInt32: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    i32,
                ) -> windows_core::HRESULT,
                pub AddInt32WithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    i32,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddInt32WithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    i32,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddInt32Array: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const i32,
                )
                    -> windows_core::HRESULT,
                pub AddInt32ArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const i32,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddInt32ArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const i32,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddUInt32: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                ) -> windows_core::HRESULT,
                pub AddUInt32WithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddUInt32WithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddUInt32Array: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const u32,
                )
                    -> windows_core::HRESULT,
                pub AddUInt32ArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const u32,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddUInt32ArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const u32,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddInt64: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    i64,
                ) -> windows_core::HRESULT,
                pub AddInt64WithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    i64,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddInt64WithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    i64,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddInt64Array: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const i64,
                )
                    -> windows_core::HRESULT,
                pub AddInt64ArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const i64,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddInt64ArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const i64,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddUInt64: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u64,
                ) -> windows_core::HRESULT,
                pub AddUInt64WithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u64,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddUInt64WithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u64,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddUInt64Array: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const u64,
                )
                    -> windows_core::HRESULT,
                pub AddUInt64ArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const u64,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddUInt64ArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const u64,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddSingle: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    f32,
                ) -> windows_core::HRESULT,
                pub AddSingleWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    f32,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddSingleWithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    f32,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddSingleArray: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const f32,
                )
                    -> windows_core::HRESULT,
                pub AddSingleArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const f32,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddSingleArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const f32,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddDouble: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    f64,
                ) -> windows_core::HRESULT,
                pub AddDoubleWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    f64,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddDoubleWithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    f64,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddDoubleArray: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const f64,
                )
                    -> windows_core::HRESULT,
                pub AddDoubleArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const f64,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddDoubleArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const f64,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddChar16: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u16,
                ) -> windows_core::HRESULT,
                pub AddChar16WithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u16,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddChar16WithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u16,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddChar16Array: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const u16,
                )
                    -> windows_core::HRESULT,
                pub AddChar16ArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const u16,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddChar16ArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const u16,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddBoolean: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    bool,
                ) -> windows_core::HRESULT,
                pub AddBooleanWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    bool,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddBooleanWithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    bool,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddBooleanArray: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const bool,
                )
                    -> windows_core::HRESULT,
                pub AddBooleanArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const bool,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddBooleanArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const bool,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddString: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
                pub AddStringWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddStringWithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddStringArray: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const windows_core::HSTRING,
                )
                    -> windows_core::HRESULT,
                pub AddStringArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const windows_core::HSTRING,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddStringArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const windows_core::HSTRING,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddGuid: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    windows_core::GUID,
                ) -> windows_core::HRESULT,
                pub AddGuidWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    windows_core::GUID,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddGuidWithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    windows_core::GUID,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddGuidArray: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const windows_core::GUID,
                )
                    -> windows_core::HRESULT,
                pub AddGuidArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const windows_core::GUID,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddGuidArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const windows_core::GUID,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddDateTime: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    super::DateTime,
                )
                    -> windows_core::HRESULT,
                pub AddDateTimeWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    super::DateTime,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddDateTimeWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        super::DateTime,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddDateTimeArray: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const super::DateTime,
                )
                    -> windows_core::HRESULT,
                pub AddDateTimeArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const super::DateTime,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddDateTimeArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const super::DateTime,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddTimeSpan: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    super::TimeSpan,
                )
                    -> windows_core::HRESULT,
                pub AddTimeSpanWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    super::TimeSpan,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddTimeSpanWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        super::TimeSpan,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddTimeSpanArray: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const super::TimeSpan,
                )
                    -> windows_core::HRESULT,
                pub AddTimeSpanArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const super::TimeSpan,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddTimeSpanArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const super::TimeSpan,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddPoint: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    super::Point,
                ) -> windows_core::HRESULT,
                pub AddPointWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    super::Point,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddPointWithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    super::Point,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddPointArray: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const super::Point,
                )
                    -> windows_core::HRESULT,
                pub AddPointArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const super::Point,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddPointArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const super::Point,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddSize: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    super::Size,
                ) -> windows_core::HRESULT,
                pub AddSizeWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    super::Size,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddSizeWithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    super::Size,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddSizeArray: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const super::Size,
                )
                    -> windows_core::HRESULT,
                pub AddSizeArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const super::Size,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddSizeArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const super::Size,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
                pub AddRect: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    super::Rect,
                ) -> windows_core::HRESULT,
                pub AddRectWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    super::Rect,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddRectWithFormatAndTags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    super::Rect,
                    LoggingFieldFormat,
                    i32,
                )
                    -> windows_core::HRESULT,
                pub AddRectArray: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const super::Rect,
                )
                    -> windows_core::HRESULT,
                pub AddRectArrayWithFormat: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *const super::Rect,
                    LoggingFieldFormat,
                )
                    -> windows_core::HRESULT,
                pub AddRectArrayWithFormatAndTags:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u32,
                        *const super::Rect,
                        LoggingFieldFormat,
                        i32,
                    ) -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                ILoggingOptions,
                ILoggingOptions_Vtbl,
                0x90bc7850_0192_4f5d_ac26_006adaca12d8
            );
            impl windows_core::RuntimeType for ILoggingOptions {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct ILoggingOptions_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Keywords: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut i64,
                ) -> windows_core::HRESULT,
                pub SetKeywords:
                    unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
                pub Tags: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut i32,
                ) -> windows_core::HRESULT,
                pub SetTags:
                    unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
                pub Task: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut i16,
                ) -> windows_core::HRESULT,
                pub SetTask:
                    unsafe extern "system" fn(*mut core::ffi::c_void, i16) -> windows_core::HRESULT,
                pub Opcode: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut LoggingOpcode,
                ) -> windows_core::HRESULT,
                pub SetOpcode: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    LoggingOpcode,
                ) -> windows_core::HRESULT,
                pub ActivityId: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut windows_core::GUID,
                ) -> windows_core::HRESULT,
                pub SetActivityId: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    windows_core::GUID,
                )
                    -> windows_core::HRESULT,
                pub RelatedActivityId: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut windows_core::GUID,
                )
                    -> windows_core::HRESULT,
                pub SetRelatedActivityId: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    windows_core::GUID,
                )
                    -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                ILoggingOptionsFactory,
                ILoggingOptionsFactory_Vtbl,
                0xd713c6cb_98ab_464b_9f22_a3268478368a
            );
            impl windows_core::RuntimeType for ILoggingOptionsFactory {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct ILoggingOptionsFactory_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub CreateWithKeywords: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    i64,
                    *mut *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                ILoggingSession,
                ILoggingSession_Vtbl,
                0x6221f306_9380_4ad7_baf5_41ea9310d768
            );
            impl windows_core::RuntimeType for ILoggingSession {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            windows_core::imp::interface_hierarchy!(
                ILoggingSession,
                windows_core::IUnknown,
                windows_core::IInspectable
            );
            windows_core::imp::required_hierarchy!(ILoggingSession, super::IClosable);
            impl ILoggingSession {
                pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Name)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn AddLoggingChannel<P0>(&self, loggingchannel: P0) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<ILoggingChannel>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddLoggingChannel)(
                            windows_core::Interface::as_raw(this),
                            loggingchannel.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn AddLoggingChannelWithLevel<P0>(
                    &self,
                    loggingchannel: P0,
                    maxlevel: LoggingLevel,
                ) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<ILoggingChannel>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddLoggingChannelWithLevel)(
                            windows_core::Interface::as_raw(this),
                            loggingchannel.param().abi(),
                            maxlevel,
                        )
                        .ok()
                    }
                }
                pub fn RemoveLoggingChannel<P0>(
                    &self,
                    loggingchannel: P0,
                ) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<ILoggingChannel>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveLoggingChannel)(
                            windows_core::Interface::as_raw(this),
                            loggingchannel.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Close(&self) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<super::IClosable>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Close)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
            }
            impl windows_core::RuntimeName for ILoggingSession {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.ILoggingSession";
            }
            pub trait ILoggingSession_Impl: super::IClosable_Impl {
                fn Name(&self) -> windows_core::Result<windows_core::HSTRING>;
                fn AddLoggingChannel(
                    &self,
                    loggingChannel: Option<&ILoggingChannel>,
                ) -> windows_core::Result<()>;
                fn AddLoggingChannelWithLevel(
                    &self,
                    loggingChannel: Option<&ILoggingChannel>,
                    maxLevel: LoggingLevel,
                ) -> windows_core::Result<()>;
                fn RemoveLoggingChannel(
                    &self,
                    loggingChannel: Option<&ILoggingChannel>,
                ) -> windows_core::Result<()>;
            }
            impl ILoggingSession_Vtbl {
                pub const fn new<Identity: ILoggingSession_Impl, const OFFSET: isize>() -> Self {
                    unsafe extern "system" fn Name<
                        Identity: ILoggingSession_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match ILoggingSession_Impl::Name(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn AddLoggingChannel<
                        Identity: ILoggingSession_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        loggingchannel: *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        ILoggingSession_Impl::AddLoggingChannel(
                            this,
                            windows_core::from_raw_borrowed(&loggingchannel),
                        )
                        .into()
                    }
                    unsafe extern "system" fn AddLoggingChannelWithLevel<
                        Identity: ILoggingSession_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        loggingchannel: *mut core::ffi::c_void,
                        maxlevel: LoggingLevel,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        ILoggingSession_Impl::AddLoggingChannelWithLevel(
                            this,
                            windows_core::from_raw_borrowed(&loggingchannel),
                            maxlevel,
                        )
                        .into()
                    }
                    unsafe extern "system" fn RemoveLoggingChannel<
                        Identity: ILoggingSession_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        loggingchannel: *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        ILoggingSession_Impl::RemoveLoggingChannel(
                            this,
                            windows_core::from_raw_borrowed(&loggingchannel),
                        )
                        .into()
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<
                            Identity,
                            ILoggingSession,
                            OFFSET,
                        >(),
                        Name: Name::<Identity, OFFSET>,
                        SaveToFileAsync: 0,
                        AddLoggingChannel: AddLoggingChannel::<Identity, OFFSET>,
                        AddLoggingChannelWithLevel: AddLoggingChannelWithLevel::<Identity, OFFSET>,
                        RemoveLoggingChannel: RemoveLoggingChannel::<Identity, OFFSET>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<ILoggingSession as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct ILoggingSession_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Name: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
                SaveToFileAsync: usize,
                pub AddLoggingChannel: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
                pub AddLoggingChannelWithLevel: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    LoggingLevel,
                )
                    -> windows_core::HRESULT,
                pub RemoveLoggingChannel: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                ILoggingSessionFactory,
                ILoggingSessionFactory_Vtbl,
                0x4e937ee5_58fd_45e0_8c2f_a132eff95c1e
            );
            impl windows_core::RuntimeType for ILoggingSessionFactory {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct ILoggingSessionFactory_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Create: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                ILoggingTarget,
                ILoggingTarget_Vtbl,
                0x65f16c35_e388_4e26_b17a_f51cd3a83916
            );
            impl windows_core::RuntimeType for ILoggingTarget {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            windows_core::imp::interface_hierarchy!(
                ILoggingTarget,
                windows_core::IUnknown,
                windows_core::IInspectable
            );
            impl ILoggingTarget {
                pub fn IsEnabled(&self) -> windows_core::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsEnabled)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn IsEnabledWithLevel(
                    &self,
                    level: LoggingLevel,
                ) -> windows_core::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsEnabledWithLevel)(
                            windows_core::Interface::as_raw(this),
                            level,
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn IsEnabledWithLevelAndKeywords(
                    &self,
                    level: LoggingLevel,
                    keywords: i64,
                ) -> windows_core::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsEnabledWithLevelAndKeywords)(
                            windows_core::Interface::as_raw(this),
                            level,
                            keywords,
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn LogEvent(
                    &self,
                    eventname: &windows_core::HSTRING,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogEvent)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(eventname),
                        )
                        .ok()
                    }
                }
                pub fn LogEventWithFields<P1>(
                    &self,
                    eventname: &windows_core::HSTRING,
                    fields: P1,
                ) -> windows_core::Result<()>
                where
                    P1: windows_core::Param<LoggingFields>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogEventWithFields)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(eventname),
                            fields.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn LogEventWithFieldsAndLevel<P1>(
                    &self,
                    eventname: &windows_core::HSTRING,
                    fields: P1,
                    level: LoggingLevel,
                ) -> windows_core::Result<()>
                where
                    P1: windows_core::Param<LoggingFields>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogEventWithFieldsAndLevel)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(eventname),
                            fields.param().abi(),
                            level,
                        )
                        .ok()
                    }
                }
                pub fn LogEventWithFieldsAndOptions<P1, P3>(
                    &self,
                    eventname: &windows_core::HSTRING,
                    fields: P1,
                    level: LoggingLevel,
                    options: P3,
                ) -> windows_core::Result<()>
                where
                    P1: windows_core::Param<LoggingFields>,
                    P3: windows_core::Param<LoggingOptions>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogEventWithFieldsAndOptions)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(eventname),
                            fields.param().abi(),
                            level,
                            options.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn StartActivity(
                    &self,
                    starteventname: &windows_core::HSTRING,
                ) -> windows_core::Result<LoggingActivity> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).StartActivity)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(starteventname),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn StartActivityWithFields<P1>(
                    &self,
                    starteventname: &windows_core::HSTRING,
                    fields: P1,
                ) -> windows_core::Result<LoggingActivity>
                where
                    P1: windows_core::Param<LoggingFields>,
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).StartActivityWithFields)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(starteventname),
                            fields.param().abi(),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn StartActivityWithFieldsAndLevel<P1>(
                    &self,
                    starteventname: &windows_core::HSTRING,
                    fields: P1,
                    level: LoggingLevel,
                ) -> windows_core::Result<LoggingActivity>
                where
                    P1: windows_core::Param<LoggingFields>,
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).StartActivityWithFieldsAndLevel)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(starteventname),
                            fields.param().abi(),
                            level,
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn StartActivityWithFieldsAndOptions<P1, P3>(
                    &self,
                    starteventname: &windows_core::HSTRING,
                    fields: P1,
                    level: LoggingLevel,
                    options: P3,
                ) -> windows_core::Result<LoggingActivity>
                where
                    P1: windows_core::Param<LoggingFields>,
                    P3: windows_core::Param<LoggingOptions>,
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).StartActivityWithFieldsAndOptions)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(starteventname),
                            fields.param().abi(),
                            level,
                            options.param().abi(),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
            }
            impl windows_core::RuntimeName for ILoggingTarget {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.ILoggingTarget";
            }
            pub trait ILoggingTarget_Impl: windows_core::IUnknownImpl {
                fn IsEnabled(&self) -> windows_core::Result<bool>;
                fn IsEnabledWithLevel(&self, level: LoggingLevel) -> windows_core::Result<bool>;
                fn IsEnabledWithLevelAndKeywords(
                    &self,
                    level: LoggingLevel,
                    keywords: i64,
                ) -> windows_core::Result<bool>;
                fn LogEvent(&self, eventName: &windows_core::HSTRING) -> windows_core::Result<()>;
                fn LogEventWithFields(
                    &self,
                    eventName: &windows_core::HSTRING,
                    fields: Option<&LoggingFields>,
                ) -> windows_core::Result<()>;
                fn LogEventWithFieldsAndLevel(
                    &self,
                    eventName: &windows_core::HSTRING,
                    fields: Option<&LoggingFields>,
                    level: LoggingLevel,
                ) -> windows_core::Result<()>;
                fn LogEventWithFieldsAndOptions(
                    &self,
                    eventName: &windows_core::HSTRING,
                    fields: Option<&LoggingFields>,
                    level: LoggingLevel,
                    options: Option<&LoggingOptions>,
                ) -> windows_core::Result<()>;
                fn StartActivity(
                    &self,
                    startEventName: &windows_core::HSTRING,
                ) -> windows_core::Result<LoggingActivity>;
                fn StartActivityWithFields(
                    &self,
                    startEventName: &windows_core::HSTRING,
                    fields: Option<&LoggingFields>,
                ) -> windows_core::Result<LoggingActivity>;
                fn StartActivityWithFieldsAndLevel(
                    &self,
                    startEventName: &windows_core::HSTRING,
                    fields: Option<&LoggingFields>,
                    level: LoggingLevel,
                ) -> windows_core::Result<LoggingActivity>;
                fn StartActivityWithFieldsAndOptions(
                    &self,
                    startEventName: &windows_core::HSTRING,
                    fields: Option<&LoggingFields>,
                    level: LoggingLevel,
                    options: Option<&LoggingOptions>,
                ) -> windows_core::Result<LoggingActivity>;
            }
            impl ILoggingTarget_Vtbl {
                pub const fn new<Identity: ILoggingTarget_Impl, const OFFSET: isize>() -> Self {
                    unsafe extern "system" fn IsEnabled<
                        Identity: ILoggingTarget_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        result__: *mut bool,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match ILoggingTarget_Impl::IsEnabled(this) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn IsEnabledWithLevel<
                        Identity: ILoggingTarget_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        level: LoggingLevel,
                        result__: *mut bool,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match ILoggingTarget_Impl::IsEnabledWithLevel(this, level) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn IsEnabledWithLevelAndKeywords<
                        Identity: ILoggingTarget_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        level: LoggingLevel,
                        keywords: i64,
                        result__: *mut bool,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match ILoggingTarget_Impl::IsEnabledWithLevelAndKeywords(
                            this, level, keywords,
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn LogEvent<
                        Identity: ILoggingTarget_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        eventname: *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        ILoggingTarget_Impl::LogEvent(this, core::mem::transmute(&eventname)).into()
                    }
                    unsafe extern "system" fn LogEventWithFields<
                        Identity: ILoggingTarget_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        eventname: *mut core::ffi::c_void,
                        fields: *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        ILoggingTarget_Impl::LogEventWithFields(
                            this,
                            core::mem::transmute(&eventname),
                            windows_core::from_raw_borrowed(&fields),
                        )
                        .into()
                    }
                    unsafe extern "system" fn LogEventWithFieldsAndLevel<
                        Identity: ILoggingTarget_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        eventname: *mut core::ffi::c_void,
                        fields: *mut core::ffi::c_void,
                        level: LoggingLevel,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        ILoggingTarget_Impl::LogEventWithFieldsAndLevel(
                            this,
                            core::mem::transmute(&eventname),
                            windows_core::from_raw_borrowed(&fields),
                            level,
                        )
                        .into()
                    }
                    unsafe extern "system" fn LogEventWithFieldsAndOptions<
                        Identity: ILoggingTarget_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        eventname: *mut core::ffi::c_void,
                        fields: *mut core::ffi::c_void,
                        level: LoggingLevel,
                        options: *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        ILoggingTarget_Impl::LogEventWithFieldsAndOptions(
                            this,
                            core::mem::transmute(&eventname),
                            windows_core::from_raw_borrowed(&fields),
                            level,
                            windows_core::from_raw_borrowed(&options),
                        )
                        .into()
                    }
                    unsafe extern "system" fn StartActivity<
                        Identity: ILoggingTarget_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        starteventname: *mut core::ffi::c_void,
                        result__: *mut *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match ILoggingTarget_Impl::StartActivity(
                            this,
                            core::mem::transmute(&starteventname),
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn StartActivityWithFields<
                        Identity: ILoggingTarget_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        starteventname: *mut core::ffi::c_void,
                        fields: *mut core::ffi::c_void,
                        result__: *mut *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match ILoggingTarget_Impl::StartActivityWithFields(
                            this,
                            core::mem::transmute(&starteventname),
                            windows_core::from_raw_borrowed(&fields),
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn StartActivityWithFieldsAndLevel<
                        Identity: ILoggingTarget_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        starteventname: *mut core::ffi::c_void,
                        fields: *mut core::ffi::c_void,
                        level: LoggingLevel,
                        result__: *mut *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match ILoggingTarget_Impl::StartActivityWithFieldsAndLevel(
                            this,
                            core::mem::transmute(&starteventname),
                            windows_core::from_raw_borrowed(&fields),
                            level,
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn StartActivityWithFieldsAndOptions<
                        Identity: ILoggingTarget_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        starteventname: *mut core::ffi::c_void,
                        fields: *mut core::ffi::c_void,
                        level: LoggingLevel,
                        options: *mut core::ffi::c_void,
                        result__: *mut *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match ILoggingTarget_Impl::StartActivityWithFieldsAndOptions(
                            this,
                            core::mem::transmute(&starteventname),
                            windows_core::from_raw_borrowed(&fields),
                            level,
                            windows_core::from_raw_borrowed(&options),
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                core::mem::forget(ok__);
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<
                            Identity,
                            ILoggingTarget,
                            OFFSET,
                        >(),
                        IsEnabled: IsEnabled::<Identity, OFFSET>,
                        IsEnabledWithLevel: IsEnabledWithLevel::<Identity, OFFSET>,
                        IsEnabledWithLevelAndKeywords: IsEnabledWithLevelAndKeywords::<
                            Identity,
                            OFFSET,
                        >,
                        LogEvent: LogEvent::<Identity, OFFSET>,
                        LogEventWithFields: LogEventWithFields::<Identity, OFFSET>,
                        LogEventWithFieldsAndLevel: LogEventWithFieldsAndLevel::<Identity, OFFSET>,
                        LogEventWithFieldsAndOptions: LogEventWithFieldsAndOptions::<
                            Identity,
                            OFFSET,
                        >,
                        StartActivity: StartActivity::<Identity, OFFSET>,
                        StartActivityWithFields: StartActivityWithFields::<Identity, OFFSET>,
                        StartActivityWithFieldsAndLevel: StartActivityWithFieldsAndLevel::<
                            Identity,
                            OFFSET,
                        >,
                        StartActivityWithFieldsAndOptions: StartActivityWithFieldsAndOptions::<
                            Identity,
                            OFFSET,
                        >,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<ILoggingTarget as windows_core::Interface>::IID
                }
            }
            #[repr(C)]
            pub struct ILoggingTarget_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub IsEnabled: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut bool,
                ) -> windows_core::HRESULT,
                pub IsEnabledWithLevel: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    LoggingLevel,
                    *mut bool,
                )
                    -> windows_core::HRESULT,
                pub IsEnabledWithLevelAndKeywords:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        LoggingLevel,
                        i64,
                        *mut bool,
                    ) -> windows_core::HRESULT,
                pub LogEvent: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                ) -> windows_core::HRESULT,
                pub LogEventWithFields: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
                pub LogEventWithFieldsAndLevel: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    LoggingLevel,
                )
                    -> windows_core::HRESULT,
                pub LogEventWithFieldsAndOptions:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        LoggingLevel,
                        *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT,
                pub StartActivity: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
                pub StartActivityWithFields: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut *mut core::ffi::c_void,
                )
                    -> windows_core::HRESULT,
                pub StartActivityWithFieldsAndLevel:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        LoggingLevel,
                        *mut *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT,
                pub StartActivityWithFieldsAndOptions:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        LoggingLevel,
                        *mut core::ffi::c_void,
                        *mut *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT,
            }
            windows_core::imp::define_interface!(
                ITracingStatusChangedEventArgs,
                ITracingStatusChangedEventArgs_Vtbl,
                0x410b7711_ff3b_477f_9c9a_d2efda302dc3
            );
            impl windows_core::RuntimeType for ITracingStatusChangedEventArgs {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct ITracingStatusChangedEventArgs_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub Enabled: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut bool,
                ) -> windows_core::HRESULT,
                pub TraceLevel: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut CausalityTraceLevel,
                ) -> windows_core::HRESULT,
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct LogFileGeneratedEventArgs(windows_core::IUnknown);
            windows_core::imp::interface_hierarchy!(
                LogFileGeneratedEventArgs,
                windows_core::IUnknown,
                windows_core::IInspectable
            );
            impl LogFileGeneratedEventArgs {}
            impl windows_core::RuntimeType for LogFileGeneratedEventArgs {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_class::<Self, ILogFileGeneratedEventArgs>();
            }
            unsafe impl windows_core::Interface for LogFileGeneratedEventArgs {
                type Vtable = <ILogFileGeneratedEventArgs as windows_core::Interface>::Vtable;
                const IID: windows_core::GUID =
                    <ILogFileGeneratedEventArgs as windows_core::Interface>::IID;
            }
            impl windows_core::RuntimeName for LogFileGeneratedEventArgs {
                const NAME: &'static str =
                    "Windows.Foundation.Diagnostics.LogFileGeneratedEventArgs";
            }
            unsafe impl Send for LogFileGeneratedEventArgs {}
            unsafe impl Sync for LogFileGeneratedEventArgs {}
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct LoggingActivity(windows_core::IUnknown);
            windows_core::imp::interface_hierarchy!(
                LoggingActivity,
                windows_core::IUnknown,
                windows_core::IInspectable
            );
            windows_core::imp::required_hierarchy!(
                LoggingActivity,
                super::IClosable,
                ILoggingTarget
            );
            impl LoggingActivity {
                pub fn Close(&self) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<super::IClosable>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Close)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
                pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Name)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn Id(&self) -> windows_core::Result<windows_core::GUID> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Id)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn Channel(&self) -> windows_core::Result<LoggingChannel> {
                    let this = &windows_core::Interface::cast::<ILoggingActivity2>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Channel)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn StopActivity(
                    &self,
                    stopeventname: &windows_core::HSTRING,
                ) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<ILoggingActivity2>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).StopActivity)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(stopeventname),
                        )
                        .ok()
                    }
                }
                pub fn StopActivityWithFields<P1>(
                    &self,
                    stopeventname: &windows_core::HSTRING,
                    fields: P1,
                ) -> windows_core::Result<()>
                where
                    P1: windows_core::Param<LoggingFields>,
                {
                    let this = &windows_core::Interface::cast::<ILoggingActivity2>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).StopActivityWithFields)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(stopeventname),
                            fields.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn StopActivityWithFieldsAndOptions<P1, P2>(
                    &self,
                    stopeventname: &windows_core::HSTRING,
                    fields: P1,
                    options: P2,
                ) -> windows_core::Result<()>
                where
                    P1: windows_core::Param<LoggingFields>,
                    P2: windows_core::Param<LoggingOptions>,
                {
                    let this = &windows_core::Interface::cast::<ILoggingActivity2>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).StopActivityWithFieldsAndOptions)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(stopeventname),
                            fields.param().abi(),
                            options.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn CreateLoggingActivity<P1>(
                    activityname: &windows_core::HSTRING,
                    loggingchannel: P1,
                ) -> windows_core::Result<LoggingActivity>
                where
                    P1: windows_core::Param<ILoggingChannel>,
                {
                    Self::ILoggingActivityFactory(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).CreateLoggingActivity)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(activityname),
                            loggingchannel.param().abi(),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    })
                }
                pub fn CreateLoggingActivityWithLevel<P1>(
                    activityname: &windows_core::HSTRING,
                    loggingchannel: P1,
                    level: LoggingLevel,
                ) -> windows_core::Result<LoggingActivity>
                where
                    P1: windows_core::Param<ILoggingChannel>,
                {
                    Self::ILoggingActivityFactory(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).CreateLoggingActivityWithLevel)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(activityname),
                            loggingchannel.param().abi(),
                            level,
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    })
                }
                pub fn IsEnabled(&self) -> windows_core::Result<bool> {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsEnabled)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn IsEnabledWithLevel(
                    &self,
                    level: LoggingLevel,
                ) -> windows_core::Result<bool> {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsEnabledWithLevel)(
                            windows_core::Interface::as_raw(this),
                            level,
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn IsEnabledWithLevelAndKeywords(
                    &self,
                    level: LoggingLevel,
                    keywords: i64,
                ) -> windows_core::Result<bool> {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsEnabledWithLevelAndKeywords)(
                            windows_core::Interface::as_raw(this),
                            level,
                            keywords,
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn LogEvent(
                    &self,
                    eventname: &windows_core::HSTRING,
                ) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogEvent)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(eventname),
                        )
                        .ok()
                    }
                }
                pub fn LogEventWithFields<P1>(
                    &self,
                    eventname: &windows_core::HSTRING,
                    fields: P1,
                ) -> windows_core::Result<()>
                where
                    P1: windows_core::Param<LoggingFields>,
                {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogEventWithFields)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(eventname),
                            fields.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn LogEventWithFieldsAndLevel<P1>(
                    &self,
                    eventname: &windows_core::HSTRING,
                    fields: P1,
                    level: LoggingLevel,
                ) -> windows_core::Result<()>
                where
                    P1: windows_core::Param<LoggingFields>,
                {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogEventWithFieldsAndLevel)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(eventname),
                            fields.param().abi(),
                            level,
                        )
                        .ok()
                    }
                }
                pub fn LogEventWithFieldsAndOptions<P1, P3>(
                    &self,
                    eventname: &windows_core::HSTRING,
                    fields: P1,
                    level: LoggingLevel,
                    options: P3,
                ) -> windows_core::Result<()>
                where
                    P1: windows_core::Param<LoggingFields>,
                    P3: windows_core::Param<LoggingOptions>,
                {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogEventWithFieldsAndOptions)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(eventname),
                            fields.param().abi(),
                            level,
                            options.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn StartActivity(
                    &self,
                    starteventname: &windows_core::HSTRING,
                ) -> windows_core::Result<LoggingActivity> {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).StartActivity)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(starteventname),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn StartActivityWithFields<P1>(
                    &self,
                    starteventname: &windows_core::HSTRING,
                    fields: P1,
                ) -> windows_core::Result<LoggingActivity>
                where
                    P1: windows_core::Param<LoggingFields>,
                {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).StartActivityWithFields)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(starteventname),
                            fields.param().abi(),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn StartActivityWithFieldsAndLevel<P1>(
                    &self,
                    starteventname: &windows_core::HSTRING,
                    fields: P1,
                    level: LoggingLevel,
                ) -> windows_core::Result<LoggingActivity>
                where
                    P1: windows_core::Param<LoggingFields>,
                {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).StartActivityWithFieldsAndLevel)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(starteventname),
                            fields.param().abi(),
                            level,
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn StartActivityWithFieldsAndOptions<P1, P3>(
                    &self,
                    starteventname: &windows_core::HSTRING,
                    fields: P1,
                    level: LoggingLevel,
                    options: P3,
                ) -> windows_core::Result<LoggingActivity>
                where
                    P1: windows_core::Param<LoggingFields>,
                    P3: windows_core::Param<LoggingOptions>,
                {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).StartActivityWithFieldsAndOptions)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(starteventname),
                            fields.param().abi(),
                            level,
                            options.param().abi(),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                fn ILoggingActivityFactory<
                    R,
                    F: FnOnce(&ILoggingActivityFactory) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        LoggingActivity,
                        ILoggingActivityFactory,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
            }
            impl windows_core::RuntimeType for LoggingActivity {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_class::<Self, ILoggingActivity>();
            }
            unsafe impl windows_core::Interface for LoggingActivity {
                type Vtable = <ILoggingActivity as windows_core::Interface>::Vtable;
                const IID: windows_core::GUID = <ILoggingActivity as windows_core::Interface>::IID;
            }
            impl windows_core::RuntimeName for LoggingActivity {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.LoggingActivity";
            }
            unsafe impl Send for LoggingActivity {}
            unsafe impl Sync for LoggingActivity {}
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct LoggingChannel(windows_core::IUnknown);
            windows_core::imp::interface_hierarchy!(
                LoggingChannel,
                windows_core::IUnknown,
                windows_core::IInspectable,
                ILoggingChannel
            );
            windows_core::imp::required_hierarchy!(
                LoggingChannel,
                super::IClosable,
                ILoggingTarget
            );
            impl LoggingChannel {
                pub fn Close(&self) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<super::IClosable>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Close)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
                pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Name)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn Enabled(&self) -> windows_core::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Enabled)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn Level(&self) -> windows_core::Result<LoggingLevel> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Level)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn LogMessage(
                    &self,
                    eventstring: &windows_core::HSTRING,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogMessage)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(eventstring),
                        )
                        .ok()
                    }
                }
                pub fn LogMessageWithLevel(
                    &self,
                    eventstring: &windows_core::HSTRING,
                    level: LoggingLevel,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogMessageWithLevel)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(eventstring),
                            level,
                        )
                        .ok()
                    }
                }
                pub fn LogValuePair(
                    &self,
                    value1: &windows_core::HSTRING,
                    value2: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogValuePair)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(value1),
                            value2,
                        )
                        .ok()
                    }
                }
                pub fn LogValuePairWithLevel(
                    &self,
                    value1: &windows_core::HSTRING,
                    value2: i32,
                    level: LoggingLevel,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogValuePairWithLevel)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(value1),
                            value2,
                            level,
                        )
                        .ok()
                    }
                }
                pub fn LoggingEnabled<P0>(
                    &self,
                    handler: P0,
                ) -> windows_core::Result<super::EventRegistrationToken>
                where
                    P0: windows_core::Param<
                        super::TypedEventHandler<ILoggingChannel, windows_core::IInspectable>,
                    >,
                {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).LoggingEnabled)(
                            windows_core::Interface::as_raw(this),
                            handler.param().abi(),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn RemoveLoggingEnabled(
                    &self,
                    token: super::EventRegistrationToken,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveLoggingEnabled)(
                            windows_core::Interface::as_raw(this),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn Id(&self) -> windows_core::Result<windows_core::GUID> {
                    let this = &windows_core::Interface::cast::<ILoggingChannel2>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Id)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn Create(
                    name: &windows_core::HSTRING,
                ) -> windows_core::Result<LoggingChannel> {
                    Self::ILoggingChannelFactory(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Create)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    })
                }
                pub fn CreateWithOptions<P1>(
                    name: &windows_core::HSTRING,
                    options: P1,
                ) -> windows_core::Result<LoggingChannel>
                where
                    P1: windows_core::Param<LoggingChannelOptions>,
                {
                    Self::ILoggingChannelFactory2(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).CreateWithOptions)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            options.param().abi(),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    })
                }
                pub fn CreateWithOptionsAndId<P1>(
                    name: &windows_core::HSTRING,
                    options: P1,
                    id: windows_core::GUID,
                ) -> windows_core::Result<LoggingChannel>
                where
                    P1: windows_core::Param<LoggingChannelOptions>,
                {
                    Self::ILoggingChannelFactory2(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).CreateWithOptionsAndId)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            options.param().abi(),
                            id,
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    })
                }
                pub fn IsEnabled(&self) -> windows_core::Result<bool> {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsEnabled)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn IsEnabledWithLevel(
                    &self,
                    level: LoggingLevel,
                ) -> windows_core::Result<bool> {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsEnabledWithLevel)(
                            windows_core::Interface::as_raw(this),
                            level,
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn IsEnabledWithLevelAndKeywords(
                    &self,
                    level: LoggingLevel,
                    keywords: i64,
                ) -> windows_core::Result<bool> {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsEnabledWithLevelAndKeywords)(
                            windows_core::Interface::as_raw(this),
                            level,
                            keywords,
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn LogEvent(
                    &self,
                    eventname: &windows_core::HSTRING,
                ) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogEvent)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(eventname),
                        )
                        .ok()
                    }
                }
                pub fn LogEventWithFields<P1>(
                    &self,
                    eventname: &windows_core::HSTRING,
                    fields: P1,
                ) -> windows_core::Result<()>
                where
                    P1: windows_core::Param<LoggingFields>,
                {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogEventWithFields)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(eventname),
                            fields.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn LogEventWithFieldsAndLevel<P1>(
                    &self,
                    eventname: &windows_core::HSTRING,
                    fields: P1,
                    level: LoggingLevel,
                ) -> windows_core::Result<()>
                where
                    P1: windows_core::Param<LoggingFields>,
                {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogEventWithFieldsAndLevel)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(eventname),
                            fields.param().abi(),
                            level,
                        )
                        .ok()
                    }
                }
                pub fn LogEventWithFieldsAndOptions<P1, P3>(
                    &self,
                    eventname: &windows_core::HSTRING,
                    fields: P1,
                    level: LoggingLevel,
                    options: P3,
                ) -> windows_core::Result<()>
                where
                    P1: windows_core::Param<LoggingFields>,
                    P3: windows_core::Param<LoggingOptions>,
                {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).LogEventWithFieldsAndOptions)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(eventname),
                            fields.param().abi(),
                            level,
                            options.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn StartActivity(
                    &self,
                    starteventname: &windows_core::HSTRING,
                ) -> windows_core::Result<LoggingActivity> {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).StartActivity)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(starteventname),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn StartActivityWithFields<P1>(
                    &self,
                    starteventname: &windows_core::HSTRING,
                    fields: P1,
                ) -> windows_core::Result<LoggingActivity>
                where
                    P1: windows_core::Param<LoggingFields>,
                {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).StartActivityWithFields)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(starteventname),
                            fields.param().abi(),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn StartActivityWithFieldsAndLevel<P1>(
                    &self,
                    starteventname: &windows_core::HSTRING,
                    fields: P1,
                    level: LoggingLevel,
                ) -> windows_core::Result<LoggingActivity>
                where
                    P1: windows_core::Param<LoggingFields>,
                {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).StartActivityWithFieldsAndLevel)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(starteventname),
                            fields.param().abi(),
                            level,
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                pub fn StartActivityWithFieldsAndOptions<P1, P3>(
                    &self,
                    starteventname: &windows_core::HSTRING,
                    fields: P1,
                    level: LoggingLevel,
                    options: P3,
                ) -> windows_core::Result<LoggingActivity>
                where
                    P1: windows_core::Param<LoggingFields>,
                    P3: windows_core::Param<LoggingOptions>,
                {
                    let this = &windows_core::Interface::cast::<ILoggingTarget>(self)?;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).StartActivityWithFieldsAndOptions)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(starteventname),
                            fields.param().abi(),
                            level,
                            options.param().abi(),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    }
                }
                fn ILoggingChannelFactory<
                    R,
                    F: FnOnce(&ILoggingChannelFactory) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        LoggingChannel,
                        ILoggingChannelFactory,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
                fn ILoggingChannelFactory2<
                    R,
                    F: FnOnce(&ILoggingChannelFactory2) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        LoggingChannel,
                        ILoggingChannelFactory2,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
            }
            impl windows_core::RuntimeType for LoggingChannel {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_class::<Self, ILoggingChannel>();
            }
            unsafe impl windows_core::Interface for LoggingChannel {
                type Vtable = <ILoggingChannel as windows_core::Interface>::Vtable;
                const IID: windows_core::GUID = <ILoggingChannel as windows_core::Interface>::IID;
            }
            impl windows_core::RuntimeName for LoggingChannel {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.LoggingChannel";
            }
            unsafe impl Send for LoggingChannel {}
            unsafe impl Sync for LoggingChannel {}
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct LoggingChannelOptions(windows_core::IUnknown);
            windows_core::imp::interface_hierarchy!(
                LoggingChannelOptions,
                windows_core::IUnknown,
                windows_core::IInspectable
            );
            impl LoggingChannelOptions {
                pub fn new() -> windows_core::Result<Self> {
                    Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        LoggingChannelOptions,
                        windows_core::imp::IGenericFactory,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
                pub fn Group(&self) -> windows_core::Result<windows_core::GUID> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Group)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn SetGroup(&self, value: windows_core::GUID) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).SetGroup)(
                            windows_core::Interface::as_raw(this),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn Create(
                    group: windows_core::GUID,
                ) -> windows_core::Result<LoggingChannelOptions> {
                    Self::ILoggingChannelOptionsFactory(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Create)(
                            windows_core::Interface::as_raw(this),
                            group,
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    })
                }
                fn ILoggingChannelOptionsFactory<
                    R,
                    F: FnOnce(&ILoggingChannelOptionsFactory) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        LoggingChannelOptions,
                        ILoggingChannelOptionsFactory,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
            }
            impl windows_core::RuntimeType for LoggingChannelOptions {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_class::<Self, ILoggingChannelOptions>();
            }
            unsafe impl windows_core::Interface for LoggingChannelOptions {
                type Vtable = <ILoggingChannelOptions as windows_core::Interface>::Vtable;
                const IID: windows_core::GUID =
                    <ILoggingChannelOptions as windows_core::Interface>::IID;
            }
            impl windows_core::RuntimeName for LoggingChannelOptions {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.LoggingChannelOptions";
            }
            unsafe impl Send for LoggingChannelOptions {}
            unsafe impl Sync for LoggingChannelOptions {}
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct LoggingFieldFormat(pub i32);
            impl LoggingFieldFormat {
                pub const Default: Self = Self(0i32);
                pub const Hidden: Self = Self(1i32);
                pub const String: Self = Self(2i32);
                pub const Boolean: Self = Self(3i32);
                pub const Hexadecimal: Self = Self(4i32);
                pub const ProcessId: Self = Self(5i32);
                pub const ThreadId: Self = Self(6i32);
                pub const Port: Self = Self(7i32);
                pub const Ipv4Address: Self = Self(8i32);
                pub const Ipv6Address: Self = Self(9i32);
                pub const SocketAddress: Self = Self(10i32);
                pub const Xml: Self = Self(11i32);
                pub const Json: Self = Self(12i32);
                pub const Win32Error: Self = Self(13i32);
                pub const NTStatus: Self = Self(14i32);
                pub const HResult: Self = Self(15i32);
                pub const FileTime: Self = Self(16i32);
                pub const Signed: Self = Self(17i32);
                pub const Unsigned: Self = Self(18i32);
            }
            impl windows_core::TypeKind for LoggingFieldFormat {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for LoggingFieldFormat {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Diagnostics.LoggingFieldFormat;i4)",
                    );
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct LoggingFields(windows_core::IUnknown);
            windows_core::imp::interface_hierarchy!(
                LoggingFields,
                windows_core::IUnknown,
                windows_core::IInspectable
            );
            impl LoggingFields {
                pub fn new() -> windows_core::Result<Self> {
                    Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        LoggingFields,
                        windows_core::imp::IGenericFactory,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
                pub fn Clear(&self) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).Clear)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
                pub fn BeginStruct(
                    &self,
                    name: &windows_core::HSTRING,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).BeginStruct)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                        )
                        .ok()
                    }
                }
                pub fn BeginStructWithTags(
                    &self,
                    name: &windows_core::HSTRING,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).BeginStructWithTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn EndStruct(&self) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).EndStruct)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
                pub fn AddEmpty(&self, name: &windows_core::HSTRING) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddEmpty)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                        )
                        .ok()
                    }
                }
                pub fn AddEmptyWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddEmptyWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddEmptyWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddEmptyWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt8(
                    &self,
                    name: &windows_core::HSTRING,
                    value: u8,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt8)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt8WithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: u8,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt8WithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt8WithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: u8,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt8WithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt8Array(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[u8],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt8Array)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddUInt8ArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[u8],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt8ArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt8ArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[u8],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt8ArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddInt16(
                    &self,
                    name: &windows_core::HSTRING,
                    value: i16,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt16)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddInt16WithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: i16,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt16WithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddInt16WithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: i16,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt16WithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddInt16Array(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[i16],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt16Array)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddInt16ArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[i16],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt16ArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddInt16ArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[i16],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt16ArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt16(
                    &self,
                    name: &windows_core::HSTRING,
                    value: u16,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt16)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt16WithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: u16,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt16WithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt16WithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: u16,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt16WithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt16Array(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[u16],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt16Array)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddUInt16ArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[u16],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt16ArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt16ArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[u16],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt16ArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddInt32(
                    &self,
                    name: &windows_core::HSTRING,
                    value: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt32)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddInt32WithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: i32,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt32WithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddInt32WithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: i32,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt32WithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddInt32Array(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[i32],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt32Array)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddInt32ArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[i32],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt32ArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddInt32ArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[i32],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt32ArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt32(
                    &self,
                    name: &windows_core::HSTRING,
                    value: u32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt32)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt32WithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: u32,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt32WithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt32WithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: u32,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt32WithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt32Array(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[u32],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt32Array)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddUInt32ArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[u32],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt32ArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt32ArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[u32],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt32ArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddInt64(
                    &self,
                    name: &windows_core::HSTRING,
                    value: i64,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt64)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddInt64WithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: i64,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt64WithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddInt64WithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: i64,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt64WithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddInt64Array(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[i64],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt64Array)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddInt64ArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[i64],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt64ArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddInt64ArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[i64],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddInt64ArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt64(
                    &self,
                    name: &windows_core::HSTRING,
                    value: u64,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt64)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt64WithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: u64,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt64WithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt64WithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: u64,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt64WithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt64Array(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[u64],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt64Array)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddUInt64ArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[u64],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt64ArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddUInt64ArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[u64],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddUInt64ArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddSingle(
                    &self,
                    name: &windows_core::HSTRING,
                    value: f32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddSingle)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddSingleWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: f32,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddSingleWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddSingleWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: f32,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddSingleWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddSingleArray(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[f32],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddSingleArray)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddSingleArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[f32],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddSingleArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddSingleArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[f32],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddSingleArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddDouble(
                    &self,
                    name: &windows_core::HSTRING,
                    value: f64,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddDouble)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddDoubleWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: f64,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddDoubleWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddDoubleWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: f64,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddDoubleWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddDoubleArray(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[f64],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddDoubleArray)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddDoubleArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[f64],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddDoubleArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddDoubleArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[f64],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddDoubleArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddChar16(
                    &self,
                    name: &windows_core::HSTRING,
                    value: u16,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddChar16)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddChar16WithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: u16,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddChar16WithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddChar16WithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: u16,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddChar16WithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddChar16Array(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[u16],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddChar16Array)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddChar16ArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[u16],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddChar16ArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddChar16ArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[u16],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddChar16ArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddBoolean(
                    &self,
                    name: &windows_core::HSTRING,
                    value: bool,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddBoolean)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddBooleanWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: bool,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddBooleanWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddBooleanWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: bool,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddBooleanWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddBooleanArray(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[bool],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddBooleanArray)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddBooleanArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[bool],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddBooleanArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddBooleanArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[bool],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddBooleanArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddString(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &windows_core::HSTRING,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddString)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            core::mem::transmute_copy(value),
                        )
                        .ok()
                    }
                }
                pub fn AddStringWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &windows_core::HSTRING,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddStringWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            core::mem::transmute_copy(value),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddStringWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &windows_core::HSTRING,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddStringWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            core::mem::transmute_copy(value),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddStringArray(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[windows_core::HSTRING],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddStringArray)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            core::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn AddStringArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[windows_core::HSTRING],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddStringArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            core::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddStringArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[windows_core::HSTRING],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddStringArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            core::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddGuid(
                    &self,
                    name: &windows_core::HSTRING,
                    value: windows_core::GUID,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddGuid)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddGuidWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: windows_core::GUID,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddGuidWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddGuidWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: windows_core::GUID,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddGuidWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddGuidArray(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[windows_core::GUID],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddGuidArray)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddGuidArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[windows_core::GUID],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddGuidArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddGuidArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[windows_core::GUID],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddGuidArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddDateTime(
                    &self,
                    name: &windows_core::HSTRING,
                    value: super::DateTime,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddDateTime)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddDateTimeWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: super::DateTime,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddDateTimeWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddDateTimeWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: super::DateTime,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddDateTimeWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddDateTimeArray(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[super::DateTime],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddDateTimeArray)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddDateTimeArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[super::DateTime],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddDateTimeArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddDateTimeArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[super::DateTime],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddDateTimeArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddTimeSpan(
                    &self,
                    name: &windows_core::HSTRING,
                    value: super::TimeSpan,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddTimeSpan)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddTimeSpanWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: super::TimeSpan,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddTimeSpanWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddTimeSpanWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: super::TimeSpan,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddTimeSpanWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddTimeSpanArray(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[super::TimeSpan],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddTimeSpanArray)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddTimeSpanArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[super::TimeSpan],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddTimeSpanArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddTimeSpanArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[super::TimeSpan],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddTimeSpanArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddPoint(
                    &self,
                    name: &windows_core::HSTRING,
                    value: super::Point,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddPoint)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddPointWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: super::Point,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddPointWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddPointWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: super::Point,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddPointWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddPointArray(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[super::Point],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddPointArray)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddPointArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[super::Point],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddPointArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddPointArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[super::Point],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddPointArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddSize(
                    &self,
                    name: &windows_core::HSTRING,
                    value: super::Size,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddSize)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddSizeWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: super::Size,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddSizeWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddSizeWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: super::Size,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddSizeWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddSizeArray(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[super::Size],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddSizeArray)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddSizeArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[super::Size],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddSizeArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddSizeArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[super::Size],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddSizeArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddRect(
                    &self,
                    name: &windows_core::HSTRING,
                    value: super::Rect,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddRect)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn AddRectWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: super::Rect,
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddRectWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddRectWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: super::Rect,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddRectWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn AddRectArray(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[super::Rect],
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddRectArray)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                        )
                        .ok()
                    }
                }
                pub fn AddRectArrayWithFormat(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[super::Rect],
                    format: LoggingFieldFormat,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddRectArrayWithFormat)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn AddRectArrayWithFormatAndTags(
                    &self,
                    name: &windows_core::HSTRING,
                    value: &[super::Rect],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddRectArrayWithFormatAndTags)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            value.len().try_into().unwrap(),
                            value.as_ptr(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
            }
            impl windows_core::RuntimeType for LoggingFields {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_class::<Self, ILoggingFields>();
            }
            unsafe impl windows_core::Interface for LoggingFields {
                type Vtable = <ILoggingFields as windows_core::Interface>::Vtable;
                const IID: windows_core::GUID = <ILoggingFields as windows_core::Interface>::IID;
            }
            impl windows_core::RuntimeName for LoggingFields {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.LoggingFields";
            }
            unsafe impl Send for LoggingFields {}
            unsafe impl Sync for LoggingFields {}
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct LoggingLevel(pub i32);
            impl LoggingLevel {
                pub const Verbose: Self = Self(0i32);
                pub const Information: Self = Self(1i32);
                pub const Warning: Self = Self(2i32);
                pub const Error: Self = Self(3i32);
                pub const Critical: Self = Self(4i32);
            }
            impl windows_core::TypeKind for LoggingLevel {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for LoggingLevel {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Diagnostics.LoggingLevel;i4)",
                    );
            }
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct LoggingOpcode(pub i32);
            impl LoggingOpcode {
                pub const Info: Self = Self(0i32);
                pub const Start: Self = Self(1i32);
                pub const Stop: Self = Self(2i32);
                pub const Reply: Self = Self(6i32);
                pub const Resume: Self = Self(7i32);
                pub const Suspend: Self = Self(8i32);
                pub const Send: Self = Self(9i32);
            }
            impl windows_core::TypeKind for LoggingOpcode {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for LoggingOpcode {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Diagnostics.LoggingOpcode;i4)",
                    );
            }
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct LoggingOptions(windows_core::IUnknown);
            windows_core::imp::interface_hierarchy!(
                LoggingOptions,
                windows_core::IUnknown,
                windows_core::IInspectable
            );
            impl LoggingOptions {
                pub fn new() -> windows_core::Result<Self> {
                    Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        LoggingOptions,
                        windows_core::imp::IGenericFactory,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
                pub fn Keywords(&self) -> windows_core::Result<i64> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Keywords)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn SetKeywords(&self, value: i64) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).SetKeywords)(
                            windows_core::Interface::as_raw(this),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn Tags(&self) -> windows_core::Result<i32> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Tags)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn SetTags(&self, value: i32) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).SetTags)(
                            windows_core::Interface::as_raw(this),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn Task(&self) -> windows_core::Result<i16> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Task)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn SetTask(&self, value: i16) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).SetTask)(
                            windows_core::Interface::as_raw(this),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn Opcode(&self) -> windows_core::Result<LoggingOpcode> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Opcode)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn SetOpcode(&self, value: LoggingOpcode) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).SetOpcode)(
                            windows_core::Interface::as_raw(this),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn ActivityId(&self) -> windows_core::Result<windows_core::GUID> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).ActivityId)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn SetActivityId(&self, value: windows_core::GUID) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).SetActivityId)(
                            windows_core::Interface::as_raw(this),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn RelatedActivityId(&self) -> windows_core::Result<windows_core::GUID> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).RelatedActivityId)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn SetRelatedActivityId(
                    &self,
                    value: windows_core::GUID,
                ) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).SetRelatedActivityId)(
                            windows_core::Interface::as_raw(this),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn CreateWithKeywords(keywords: i64) -> windows_core::Result<LoggingOptions> {
                    Self::ILoggingOptionsFactory(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).CreateWithKeywords)(
                            windows_core::Interface::as_raw(this),
                            keywords,
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    })
                }
                fn ILoggingOptionsFactory<
                    R,
                    F: FnOnce(&ILoggingOptionsFactory) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        LoggingOptions,
                        ILoggingOptionsFactory,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
            }
            impl windows_core::RuntimeType for LoggingOptions {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_class::<Self, ILoggingOptions>();
            }
            unsafe impl windows_core::Interface for LoggingOptions {
                type Vtable = <ILoggingOptions as windows_core::Interface>::Vtable;
                const IID: windows_core::GUID = <ILoggingOptions as windows_core::Interface>::IID;
            }
            impl windows_core::RuntimeName for LoggingOptions {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.LoggingOptions";
            }
            unsafe impl Send for LoggingOptions {}
            unsafe impl Sync for LoggingOptions {}
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct LoggingSession(windows_core::IUnknown);
            windows_core::imp::interface_hierarchy!(
                LoggingSession,
                windows_core::IUnknown,
                windows_core::IInspectable,
                ILoggingSession
            );
            windows_core::imp::required_hierarchy!(LoggingSession, super::IClosable);
            impl LoggingSession {
                pub fn Close(&self) -> windows_core::Result<()> {
                    let this = &windows_core::Interface::cast::<super::IClosable>(self)?;
                    unsafe {
                        (windows_core::Interface::vtable(this).Close)(
                            windows_core::Interface::as_raw(this),
                        )
                        .ok()
                    }
                }
                pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Name)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| core::mem::transmute(result__))
                    }
                }
                pub fn AddLoggingChannel<P0>(&self, loggingchannel: P0) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<ILoggingChannel>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddLoggingChannel)(
                            windows_core::Interface::as_raw(this),
                            loggingchannel.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn AddLoggingChannelWithLevel<P0>(
                    &self,
                    loggingchannel: P0,
                    maxlevel: LoggingLevel,
                ) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<ILoggingChannel>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).AddLoggingChannelWithLevel)(
                            windows_core::Interface::as_raw(this),
                            loggingchannel.param().abi(),
                            maxlevel,
                        )
                        .ok()
                    }
                }
                pub fn RemoveLoggingChannel<P0>(
                    &self,
                    loggingchannel: P0,
                ) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<ILoggingChannel>,
                {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).RemoveLoggingChannel)(
                            windows_core::Interface::as_raw(this),
                            loggingchannel.param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Create(
                    name: &windows_core::HSTRING,
                ) -> windows_core::Result<LoggingSession> {
                    Self::ILoggingSessionFactory(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Create)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(name),
                            &mut result__,
                        )
                        .and_then(|| windows_core::Type::from_abi(result__))
                    })
                }
                fn ILoggingSessionFactory<
                    R,
                    F: FnOnce(&ILoggingSessionFactory) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        LoggingSession,
                        ILoggingSessionFactory,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
            }
            impl windows_core::RuntimeType for LoggingSession {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_class::<Self, ILoggingSession>();
            }
            unsafe impl windows_core::Interface for LoggingSession {
                type Vtable = <ILoggingSession as windows_core::Interface>::Vtable;
                const IID: windows_core::GUID = <ILoggingSession as windows_core::Interface>::IID;
            }
            impl windows_core::RuntimeName for LoggingSession {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.LoggingSession";
            }
            unsafe impl Send for LoggingSession {}
            unsafe impl Sync for LoggingSession {}
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct RuntimeBrokerErrorSettings(windows_core::IUnknown);
            windows_core::imp::interface_hierarchy!(
                RuntimeBrokerErrorSettings,
                windows_core::IUnknown,
                windows_core::IInspectable,
                IErrorReportingSettings
            );
            impl RuntimeBrokerErrorSettings {
                pub fn new() -> windows_core::Result<Self> {
                    Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        RuntimeBrokerErrorSettings,
                        windows_core::imp::IGenericFactory,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
                pub fn SetErrorOptions(&self, value: ErrorOptions) -> windows_core::Result<()> {
                    let this = self;
                    unsafe {
                        (windows_core::Interface::vtable(this).SetErrorOptions)(
                            windows_core::Interface::as_raw(this),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn GetErrorOptions(&self) -> windows_core::Result<ErrorOptions> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).GetErrorOptions)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
            }
            impl windows_core::RuntimeType for RuntimeBrokerErrorSettings {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_class::<Self, IErrorReportingSettings>();
            }
            unsafe impl windows_core::Interface for RuntimeBrokerErrorSettings {
                type Vtable = <IErrorReportingSettings as windows_core::Interface>::Vtable;
                const IID: windows_core::GUID =
                    <IErrorReportingSettings as windows_core::Interface>::IID;
            }
            impl windows_core::RuntimeName for RuntimeBrokerErrorSettings {
                const NAME: &'static str =
                    "Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings";
            }
            unsafe impl Send for RuntimeBrokerErrorSettings {}
            unsafe impl Sync for RuntimeBrokerErrorSettings {}
            #[repr(transparent)]
            #[derive(Clone, Debug, Eq, PartialEq)]
            pub struct TracingStatusChangedEventArgs(windows_core::IUnknown);
            windows_core::imp::interface_hierarchy!(
                TracingStatusChangedEventArgs,
                windows_core::IUnknown,
                windows_core::IInspectable
            );
            impl TracingStatusChangedEventArgs {
                pub fn Enabled(&self) -> windows_core::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).Enabled)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
                pub fn TraceLevel(&self) -> windows_core::Result<CausalityTraceLevel> {
                    let this = self;
                    unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).TraceLevel)(
                            windows_core::Interface::as_raw(this),
                            &mut result__,
                        )
                        .map(|| result__)
                    }
                }
            }
            impl windows_core::RuntimeType for TracingStatusChangedEventArgs {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_class::<Self, ITracingStatusChangedEventArgs>(
                    );
            }
            unsafe impl windows_core::Interface for TracingStatusChangedEventArgs {
                type Vtable = <ITracingStatusChangedEventArgs as windows_core::Interface>::Vtable;
                const IID: windows_core::GUID =
                    <ITracingStatusChangedEventArgs as windows_core::Interface>::IID;
            }
            impl windows_core::RuntimeName for TracingStatusChangedEventArgs {
                const NAME: &'static str =
                    "Windows.Foundation.Diagnostics.TracingStatusChangedEventArgs";
            }
            unsafe impl Send for TracingStatusChangedEventArgs {}
            unsafe impl Sync for TracingStatusChangedEventArgs {}
        }
        pub mod Metadata {
            pub struct ApiInformation;
            impl ApiInformation {
                pub fn IsTypePresent(
                    typename: &windows_core::HSTRING,
                ) -> windows_core::Result<bool> {
                    Self::IApiInformationStatics(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsTypePresent)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(typename),
                            &mut result__,
                        )
                        .map(|| result__)
                    })
                }
                pub fn IsMethodPresent(
                    typename: &windows_core::HSTRING,
                    methodname: &windows_core::HSTRING,
                ) -> windows_core::Result<bool> {
                    Self::IApiInformationStatics(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsMethodPresent)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(typename),
                            core::mem::transmute_copy(methodname),
                            &mut result__,
                        )
                        .map(|| result__)
                    })
                }
                pub fn IsMethodPresentWithArity(
                    typename: &windows_core::HSTRING,
                    methodname: &windows_core::HSTRING,
                    inputparametercount: u32,
                ) -> windows_core::Result<bool> {
                    Self::IApiInformationStatics(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsMethodPresentWithArity)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(typename),
                            core::mem::transmute_copy(methodname),
                            inputparametercount,
                            &mut result__,
                        )
                        .map(|| result__)
                    })
                }
                pub fn IsEventPresent(
                    typename: &windows_core::HSTRING,
                    eventname: &windows_core::HSTRING,
                ) -> windows_core::Result<bool> {
                    Self::IApiInformationStatics(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsEventPresent)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(typename),
                            core::mem::transmute_copy(eventname),
                            &mut result__,
                        )
                        .map(|| result__)
                    })
                }
                pub fn IsPropertyPresent(
                    typename: &windows_core::HSTRING,
                    propertyname: &windows_core::HSTRING,
                ) -> windows_core::Result<bool> {
                    Self::IApiInformationStatics(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsPropertyPresent)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(typename),
                            core::mem::transmute_copy(propertyname),
                            &mut result__,
                        )
                        .map(|| result__)
                    })
                }
                pub fn IsReadOnlyPropertyPresent(
                    typename: &windows_core::HSTRING,
                    propertyname: &windows_core::HSTRING,
                ) -> windows_core::Result<bool> {
                    Self::IApiInformationStatics(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsReadOnlyPropertyPresent)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(typename),
                            core::mem::transmute_copy(propertyname),
                            &mut result__,
                        )
                        .map(|| result__)
                    })
                }
                pub fn IsWriteablePropertyPresent(
                    typename: &windows_core::HSTRING,
                    propertyname: &windows_core::HSTRING,
                ) -> windows_core::Result<bool> {
                    Self::IApiInformationStatics(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsWriteablePropertyPresent)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(typename),
                            core::mem::transmute_copy(propertyname),
                            &mut result__,
                        )
                        .map(|| result__)
                    })
                }
                pub fn IsEnumNamedValuePresent(
                    enumtypename: &windows_core::HSTRING,
                    valuename: &windows_core::HSTRING,
                ) -> windows_core::Result<bool> {
                    Self::IApiInformationStatics(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsEnumNamedValuePresent)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(enumtypename),
                            core::mem::transmute_copy(valuename),
                            &mut result__,
                        )
                        .map(|| result__)
                    })
                }
                pub fn IsApiContractPresentByMajor(
                    contractname: &windows_core::HSTRING,
                    majorversion: u16,
                ) -> windows_core::Result<bool> {
                    Self::IApiInformationStatics(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsApiContractPresentByMajor)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(contractname),
                            majorversion,
                            &mut result__,
                        )
                        .map(|| result__)
                    })
                }
                pub fn IsApiContractPresentByMajorAndMinor(
                    contractname: &windows_core::HSTRING,
                    majorversion: u16,
                    minorversion: u16,
                ) -> windows_core::Result<bool> {
                    Self::IApiInformationStatics(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).IsApiContractPresentByMajorAndMinor)(
                            windows_core::Interface::as_raw(this),
                            core::mem::transmute_copy(contractname),
                            majorversion,
                            minorversion,
                            &mut result__,
                        )
                        .map(|| result__)
                    })
                }
                fn IApiInformationStatics<
                    R,
                    F: FnOnce(&IApiInformationStatics) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        ApiInformation,
                        IApiInformationStatics,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
            }
            impl windows_core::RuntimeName for ApiInformation {
                const NAME: &'static str = "Windows.Foundation.Metadata.ApiInformation";
            }
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct AttributeTargets(pub u32);
            impl AttributeTargets {
                pub const All: Self = Self(4294967295u32);
                pub const Delegate: Self = Self(1u32);
                pub const Enum: Self = Self(2u32);
                pub const Event: Self = Self(4u32);
                pub const Field: Self = Self(8u32);
                pub const Interface: Self = Self(16u32);
                pub const Method: Self = Self(64u32);
                pub const Parameter: Self = Self(128u32);
                pub const Property: Self = Self(256u32);
                pub const RuntimeClass: Self = Self(512u32);
                pub const Struct: Self = Self(1024u32);
                pub const InterfaceImpl: Self = Self(2048u32);
                pub const ApiContract: Self = Self(8192u32);
            }
            impl windows_core::TypeKind for AttributeTargets {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for AttributeTargets {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Metadata.AttributeTargets;u4)",
                    );
            }
            impl AttributeTargets {
                pub const fn contains(&self, other: Self) -> bool {
                    self.0 & other.0 == other.0
                }
            }
            impl core::ops::BitOr for AttributeTargets {
                type Output = Self;
                fn bitor(self, other: Self) -> Self {
                    Self(self.0 | other.0)
                }
            }
            impl core::ops::BitAnd for AttributeTargets {
                type Output = Self;
                fn bitand(self, other: Self) -> Self {
                    Self(self.0 & other.0)
                }
            }
            impl core::ops::BitOrAssign for AttributeTargets {
                fn bitor_assign(&mut self, other: Self) {
                    self.0.bitor_assign(other.0)
                }
            }
            impl core::ops::BitAndAssign for AttributeTargets {
                fn bitand_assign(&mut self, other: Self) {
                    self.0.bitand_assign(other.0)
                }
            }
            impl core::ops::Not for AttributeTargets {
                type Output = Self;
                fn not(self) -> Self {
                    Self(self.0.not())
                }
            }
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct CompositionType(pub i32);
            impl CompositionType {
                pub const Protected: Self = Self(1i32);
                pub const Public: Self = Self(2i32);
            }
            impl windows_core::TypeKind for CompositionType {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for CompositionType {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Metadata.CompositionType;i4)",
                    );
            }
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct DeprecationType(pub i32);
            impl DeprecationType {
                pub const Deprecate: Self = Self(0i32);
                pub const Remove: Self = Self(1i32);
            }
            impl windows_core::TypeKind for DeprecationType {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for DeprecationType {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Metadata.DeprecationType;i4)",
                    );
            }
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct FeatureStage(pub i32);
            impl FeatureStage {
                pub const AlwaysDisabled: Self = Self(0i32);
                pub const DisabledByDefault: Self = Self(1i32);
                pub const EnabledByDefault: Self = Self(2i32);
                pub const AlwaysEnabled: Self = Self(3i32);
            }
            impl windows_core::TypeKind for FeatureStage {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for FeatureStage {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Metadata.FeatureStage;i4)",
                    );
            }
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct GCPressureAmount(pub i32);
            impl GCPressureAmount {
                pub const Low: Self = Self(0i32);
                pub const Medium: Self = Self(1i32);
                pub const High: Self = Self(2i32);
            }
            impl windows_core::TypeKind for GCPressureAmount {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for GCPressureAmount {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Metadata.GCPressureAmount;i4)",
                    );
            }
            windows_core::imp::define_interface!(
                IApiInformationStatics,
                IApiInformationStatics_Vtbl,
                0x997439fe_f681_4a11_b416_c13a47e8ba36
            );
            impl windows_core::RuntimeType for IApiInformationStatics {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct IApiInformationStatics_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub IsTypePresent: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut bool,
                )
                    -> windows_core::HRESULT,
                pub IsMethodPresent: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut bool,
                )
                    -> windows_core::HRESULT,
                pub IsMethodPresentWithArity: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u32,
                    *mut bool,
                )
                    -> windows_core::HRESULT,
                pub IsEventPresent: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut bool,
                )
                    -> windows_core::HRESULT,
                pub IsPropertyPresent: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut bool,
                )
                    -> windows_core::HRESULT,
                pub IsReadOnlyPropertyPresent: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut bool,
                )
                    -> windows_core::HRESULT,
                pub IsWriteablePropertyPresent: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut bool,
                )
                    -> windows_core::HRESULT,
                pub IsEnumNamedValuePresent: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    *mut bool,
                )
                    -> windows_core::HRESULT,
                pub IsApiContractPresentByMajor: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    *mut core::ffi::c_void,
                    u16,
                    *mut bool,
                )
                    -> windows_core::HRESULT,
                pub IsApiContractPresentByMajorAndMinor:
                    unsafe extern "system" fn(
                        *mut core::ffi::c_void,
                        *mut core::ffi::c_void,
                        u16,
                        u16,
                        *mut bool,
                    ) -> windows_core::HRESULT,
            }
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct MarshalingType(pub i32);
            impl MarshalingType {
                pub const None: Self = Self(1i32);
                pub const Agile: Self = Self(2i32);
                pub const Standard: Self = Self(3i32);
                pub const InvalidMarshaling: Self = Self(0i32);
            }
            impl windows_core::TypeKind for MarshalingType {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for MarshalingType {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Metadata.MarshalingType;i4)",
                    );
            }
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct Platform(pub i32);
            impl Platform {
                pub const Windows: Self = Self(0i32);
                pub const WindowsPhone: Self = Self(1i32);
            }
            impl windows_core::TypeKind for Platform {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for Platform {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Metadata.Platform;i4)",
                    );
            }
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
            pub struct ThreadingModel(pub i32);
            impl ThreadingModel {
                pub const STA: Self = Self(1i32);
                pub const MTA: Self = Self(2i32);
                pub const Both: Self = Self(3i32);
                pub const InvalidThreading: Self = Self(0i32);
            }
            impl windows_core::TypeKind for ThreadingModel {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for ThreadingModel {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Foundation.Metadata.ThreadingModel;i4)",
                    );
            }
        }
        pub mod Numerics {
            #[repr(C)]
            #[derive(Clone, Copy, Debug, Default, PartialEq)]
            pub struct Matrix3x2 {
                pub M11: f32,
                pub M12: f32,
                pub M21: f32,
                pub M22: f32,
                pub M31: f32,
                pub M32: f32,
            }
            impl windows_core::TypeKind for Matrix3x2 {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for Matrix3x2 {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"struct(Windows.Foundation.Numerics.Matrix3x2;f4;f4;f4;f4;f4;f4)",
                    );
            }
            #[repr(C)]
            #[derive(Clone, Copy, Debug, Default, PartialEq)]
            pub struct Matrix4x4 {
                pub M11: f32,
                pub M12: f32,
                pub M13: f32,
                pub M14: f32,
                pub M21: f32,
                pub M22: f32,
                pub M23: f32,
                pub M24: f32,
                pub M31: f32,
                pub M32: f32,
                pub M33: f32,
                pub M34: f32,
                pub M41: f32,
                pub M42: f32,
                pub M43: f32,
                pub M44: f32,
            }
            impl windows_core::TypeKind for Matrix4x4 {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for Matrix4x4 {
                const SIGNATURE :windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice ( b"struct(Windows.Foundation.Numerics.Matrix4x4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4)" ) ;
            }
            #[repr(C)]
            #[derive(Clone, Copy, Debug, Default, PartialEq)]
            pub struct Plane {
                pub Normal: Vector3,
                pub D: f32,
            }
            impl windows_core::TypeKind for Plane {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for Plane {
                const SIGNATURE :windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice ( b"struct(Windows.Foundation.Numerics.Plane;struct(Windows.Foundation.Numerics.Vector3;f4;f4;f4);f4)" ) ;
            }
            #[repr(C)]
            #[derive(Clone, Copy, Debug, Default, PartialEq)]
            pub struct Quaternion {
                pub X: f32,
                pub Y: f32,
                pub Z: f32,
                pub W: f32,
            }
            impl windows_core::TypeKind for Quaternion {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for Quaternion {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"struct(Windows.Foundation.Numerics.Quaternion;f4;f4;f4;f4)",
                    );
            }
            #[repr(C)]
            #[derive(Clone, Copy, Debug, Default, PartialEq)]
            pub struct Rational {
                pub Numerator: u32,
                pub Denominator: u32,
            }
            impl windows_core::TypeKind for Rational {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for Rational {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"struct(Windows.Foundation.Numerics.Rational;u4;u4)",
                    );
            }
            #[repr(C)]
            #[derive(Clone, Copy, Debug, Default, PartialEq)]
            pub struct Vector2 {
                pub X: f32,
                pub Y: f32,
            }
            impl windows_core::TypeKind for Vector2 {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for Vector2 {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"struct(Windows.Foundation.Numerics.Vector2;f4;f4)",
                    );
            }
            #[repr(C)]
            #[derive(Clone, Copy, Debug, Default, PartialEq)]
            pub struct Vector3 {
                pub X: f32,
                pub Y: f32,
                pub Z: f32,
            }
            impl windows_core::TypeKind for Vector3 {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for Vector3 {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"struct(Windows.Foundation.Numerics.Vector3;f4;f4;f4)",
                    );
            }
            #[repr(C)]
            #[derive(Clone, Copy, Debug, Default, PartialEq)]
            pub struct Vector4 {
                pub X: f32,
                pub Y: f32,
                pub Z: f32,
                pub W: f32,
            }
            impl windows_core::TypeKind for Vector4 {
                type TypeKind = windows_core::CopyType;
            }
            impl windows_core::RuntimeType for Vector4 {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"struct(Windows.Foundation.Numerics.Vector4;f4;f4;f4;f4)",
                    );
            }
        }
    }
}
