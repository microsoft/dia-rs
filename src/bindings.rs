// Bindings generated by `windows-bindgen` 0.58.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
pub mod Dia {
    windows_core::imp::define_interface!(
        IDiaAddressMap,
        IDiaAddressMap_Vtbl,
        0xb62a2e7a_067a_4ea3_b598_04c09717502c
    );
    impl core::ops::Deref for IDiaAddressMap {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaAddressMap, windows_core::IUnknown);
    impl IDiaAddressMap {
        pub unsafe fn addressMapEnabled(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).addressMapEnabled)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn SetaddressMapEnabled<P0>(&self, newval: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows::Win32::Foundation::BOOL>,
        {
            (windows_core::Interface::vtable(self).SetaddressMapEnabled)(
                windows_core::Interface::as_raw(self),
                newval.param().abi(),
            )
            .ok()
        }
        pub unsafe fn relativeVirtualAddressEnabled(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).relativeVirtualAddressEnabled)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn SetrelativeVirtualAddressEnabled<P0>(
            &self,
            newval: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows::Win32::Foundation::BOOL>,
        {
            (windows_core::Interface::vtable(self).SetrelativeVirtualAddressEnabled)(
                windows_core::Interface::as_raw(self),
                newval.param().abi(),
            )
            .ok()
        }
        pub unsafe fn imageAlign(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).imageAlign)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn SetimageAlign(&self, newval: u32) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).SetimageAlign)(
                windows_core::Interface::as_raw(self),
                newval,
            )
            .ok()
        }
        pub unsafe fn set_imageHeaders<P0>(
            &self,
            pbdata: &[u8],
            originalheaders: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows::Win32::Foundation::BOOL>,
        {
            (windows_core::Interface::vtable(self).set_imageHeaders)(
                windows_core::Interface::as_raw(self),
                pbdata.len().try_into().unwrap(),
                core::mem::transmute(pbdata.as_ptr()),
                originalheaders.param().abi(),
            )
            .ok()
        }
        pub unsafe fn set_addressMap<P0>(
            &self,
            pdata: &[DiaAddressMapEntry],
            imagetosymbols: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows::Win32::Foundation::BOOL>,
        {
            (windows_core::Interface::vtable(self).set_addressMap)(
                windows_core::Interface::as_raw(self),
                pdata.len().try_into().unwrap(),
                core::mem::transmute(pdata.as_ptr()),
                imagetosymbols.param().abi(),
            )
            .ok()
        }
    }
    #[repr(C)]
    pub struct IDiaAddressMap_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub addressMapEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub SetaddressMapEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub relativeVirtualAddressEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        )
            -> windows_core::HRESULT,
        pub SetrelativeVirtualAddressEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows::Win32::Foundation::BOOL,
        )
            -> windows_core::HRESULT,
        pub imageAlign:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub SetimageAlign:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub set_imageHeaders: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *const u8,
            windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub set_addressMap: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *const DiaAddressMapEntry,
            windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaDataSource,
        IDiaDataSource_Vtbl,
        0x79f1bb5f_b66e_48e5_b6a9_1545c323ca3d
    );
    impl core::ops::Deref for IDiaDataSource {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaDataSource, windows_core::IUnknown);
    impl IDiaDataSource {
        pub unsafe fn lastError(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).lastError)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn loadDataFromPdb<P0>(&self, pdbpath: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            (windows_core::Interface::vtable(self).loadDataFromPdb)(
                windows_core::Interface::as_raw(self),
                pdbpath.param().abi(),
            )
            .ok()
        }
        pub unsafe fn loadAndValidateDataFromPdb<P0>(
            &self,
            pdbpath: P0,
            pcsig70: *const windows_core::GUID,
            sig: u32,
            age: u32,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            (windows_core::Interface::vtable(self).loadAndValidateDataFromPdb)(
                windows_core::Interface::as_raw(self),
                pdbpath.param().abi(),
                pcsig70,
                sig,
                age,
            )
            .ok()
        }
        pub unsafe fn loadDataForExe<P0, P1, P2>(
            &self,
            executable: P0,
            searchpath: P1,
            pcallback: P2,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
            P2: windows_core::Param<windows_core::IUnknown>,
        {
            (windows_core::Interface::vtable(self).loadDataForExe)(
                windows_core::Interface::as_raw(self),
                executable.param().abi(),
                searchpath.param().abi(),
                pcallback.param().abi(),
            )
            .ok()
        }
        pub unsafe fn loadDataFromIStream<P0>(&self, pistream: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows::Win32::System::Com::IStream>,
        {
            (windows_core::Interface::vtable(self).loadDataFromIStream)(
                windows_core::Interface::as_raw(self),
                pistream.param().abi(),
            )
            .ok()
        }
        pub unsafe fn openSession(&self) -> windows_core::Result<IDiaSession> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).openSession)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn loadDataFromCodeViewInfo<P0, P1, P2>(
            &self,
            executable: P0,
            searchpath: P1,
            pbcvinfo: &[u8],
            pcallback: P2,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
            P2: windows_core::Param<windows_core::IUnknown>,
        {
            (windows_core::Interface::vtable(self).loadDataFromCodeViewInfo)(
                windows_core::Interface::as_raw(self),
                executable.param().abi(),
                searchpath.param().abi(),
                pbcvinfo.len().try_into().unwrap(),
                core::mem::transmute(pbcvinfo.as_ptr()),
                pcallback.param().abi(),
            )
            .ok()
        }
        pub unsafe fn loadDataFromMiscInfo<P0, P1, P2>(
            &self,
            executable: P0,
            searchpath: P1,
            timestampexe: u32,
            timestampdbg: u32,
            sizeofexe: u32,
            pbmiscinfo: &[u8],
            pcallback: P2,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
            P2: windows_core::Param<windows_core::IUnknown>,
        {
            (windows_core::Interface::vtable(self).loadDataFromMiscInfo)(
                windows_core::Interface::as_raw(self),
                executable.param().abi(),
                searchpath.param().abi(),
                timestampexe,
                timestampdbg,
                sizeofexe,
                pbmiscinfo.len().try_into().unwrap(),
                core::mem::transmute(pbmiscinfo.as_ptr()),
                pcallback.param().abi(),
            )
            .ok()
        }
    }
    #[repr(C)]
    pub struct IDiaDataSource_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub lastError: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub loadDataFromPdb: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
        ) -> windows_core::HRESULT,
        pub loadAndValidateDataFromPdb: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            *const windows_core::GUID,
            u32,
            u32,
        ) -> windows_core::HRESULT,
        pub loadDataForExe: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::PCWSTR,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub loadDataFromIStream: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub openSession: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub loadDataFromCodeViewInfo: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::PCWSTR,
            u32,
            *const u8,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub loadDataFromMiscInfo: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::PCWSTR,
            u32,
            u32,
            u32,
            u32,
            *const u8,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaEnumDebugStreamData,
        IDiaEnumDebugStreamData_Vtbl,
        0x486943e8_d187_4a6b_a3c4_291259fff60d
    );
    impl core::ops::Deref for IDiaEnumDebugStreamData {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaEnumDebugStreamData, windows_core::IUnknown);
    impl IDiaEnumDebugStreamData {
        pub unsafe fn _NewEnum(&self) -> windows_core::Result<windows_core::IUnknown> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self)._NewEnum)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Count(&self) -> windows_core::Result<i32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Count)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn name(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).name)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Item(
            &self,
            index: u32,
            pcbdata: *mut u32,
            pbdata: &mut [u8],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Item)(
                windows_core::Interface::as_raw(self),
                index,
                pbdata.len().try_into().unwrap(),
                pcbdata,
                core::mem::transmute(pbdata.as_ptr()),
            )
            .ok()
        }
        pub unsafe fn Next(
            &self,
            celt: u32,
            pcbdata: *mut u32,
            pbdata: &mut [u8],
            pceltfetched: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Next)(
                windows_core::Interface::as_raw(self),
                celt,
                pbdata.len().try_into().unwrap(),
                pcbdata,
                core::mem::transmute(pbdata.as_ptr()),
                pceltfetched,
            )
            .ok()
        }
        pub unsafe fn Skip(&self, celt: u32) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Skip)(
                windows_core::Interface::as_raw(self),
                celt,
            )
            .ok()
        }
        pub unsafe fn Reset(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Reset)(windows_core::Interface::as_raw(self))
                .ok()
        }
        pub unsafe fn Clone(&self) -> windows_core::Result<IDiaEnumDebugStreamData> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Clone)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IDiaEnumDebugStreamData_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub _NewEnum: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Count:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
        pub name: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub Item: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            u32,
            *mut u32,
            *mut u8,
        ) -> windows_core::HRESULT,
        pub Next: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            u32,
            *mut u32,
            *mut u8,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub Skip: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Reset: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub Clone: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaEnumDebugStreams,
        IDiaEnumDebugStreams_Vtbl,
        0x08cbb41e_47a6_4f87_92f1_1c9c87ced044
    );
    impl core::ops::Deref for IDiaEnumDebugStreams {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaEnumDebugStreams, windows_core::IUnknown);
    impl IDiaEnumDebugStreams {
        pub unsafe fn _NewEnum(&self) -> windows_core::Result<windows_core::IUnknown> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self)._NewEnum)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Count(&self) -> windows_core::Result<i32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Count)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn Item<P0>(&self, index: P0) -> windows_core::Result<IDiaEnumDebugStreamData>
        where
            P0: windows_core::Param<windows_core::VARIANT>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Item)(
                windows_core::Interface::as_raw(self),
                index.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Next(
            &self,
            celt: u32,
            rgelt: *mut Option<IDiaEnumDebugStreamData>,
            pceltfetched: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Next)(
                windows_core::Interface::as_raw(self),
                celt,
                core::mem::transmute(rgelt),
                pceltfetched,
            )
            .ok()
        }
        pub unsafe fn Skip(&self, celt: u32) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Skip)(
                windows_core::Interface::as_raw(self),
                celt,
            )
            .ok()
        }
        pub unsafe fn Reset(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Reset)(windows_core::Interface::as_raw(self))
                .ok()
        }
        pub unsafe fn Clone(&self) -> windows_core::Result<IDiaEnumDebugStreams> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Clone)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IDiaEnumDebugStreams_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub _NewEnum: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Count:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
        pub Item: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            core::mem::MaybeUninit<windows_core::VARIANT>,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Next: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub Skip: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Reset: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub Clone: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaEnumFrameData,
        IDiaEnumFrameData_Vtbl,
        0x9fc77a4b_3c1c_44ed_a798_6c1deea53e1f
    );
    impl core::ops::Deref for IDiaEnumFrameData {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaEnumFrameData, windows_core::IUnknown);
    impl IDiaEnumFrameData {
        pub unsafe fn _NewEnum(&self) -> windows_core::Result<windows_core::IUnknown> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self)._NewEnum)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Count(&self) -> windows_core::Result<i32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Count)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn Item(&self, index: u32) -> windows_core::Result<IDiaFrameData> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Item)(
                windows_core::Interface::as_raw(self),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Next(
            &self,
            celt: u32,
            rgelt: *mut Option<IDiaFrameData>,
            pceltfetched: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Next)(
                windows_core::Interface::as_raw(self),
                celt,
                core::mem::transmute(rgelt),
                pceltfetched,
            )
            .ok()
        }
        pub unsafe fn Skip(&self, celt: u32) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Skip)(
                windows_core::Interface::as_raw(self),
                celt,
            )
            .ok()
        }
        pub unsafe fn Reset(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Reset)(windows_core::Interface::as_raw(self))
                .ok()
        }
        pub unsafe fn Clone(&self) -> windows_core::Result<IDiaEnumFrameData> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Clone)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn frameByRVA(
            &self,
            relativevirtualaddress: u32,
        ) -> windows_core::Result<IDiaFrameData> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).frameByRVA)(
                windows_core::Interface::as_raw(self),
                relativevirtualaddress,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn frameByVA(&self, virtualaddress: u64) -> windows_core::Result<IDiaFrameData> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).frameByVA)(
                windows_core::Interface::as_raw(self),
                virtualaddress,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IDiaEnumFrameData_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub _NewEnum: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Count:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
        pub Item: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Next: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub Skip: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Reset: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub Clone: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub frameByRVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub frameByVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaEnumInjectedSources,
        IDiaEnumInjectedSources_Vtbl,
        0xd5612573_6925_4468_8883_98cdec8c384a
    );
    impl core::ops::Deref for IDiaEnumInjectedSources {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaEnumInjectedSources, windows_core::IUnknown);
    impl IDiaEnumInjectedSources {
        pub unsafe fn _NewEnum(&self) -> windows_core::Result<windows_core::IUnknown> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self)._NewEnum)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Count(&self) -> windows_core::Result<i32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Count)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn Item(&self, index: u32) -> windows_core::Result<IDiaInjectedSource> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Item)(
                windows_core::Interface::as_raw(self),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Next(
            &self,
            celt: u32,
            rgelt: *mut Option<IDiaInjectedSource>,
            pceltfetched: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Next)(
                windows_core::Interface::as_raw(self),
                celt,
                core::mem::transmute(rgelt),
                pceltfetched,
            )
            .ok()
        }
        pub unsafe fn Skip(&self, celt: u32) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Skip)(
                windows_core::Interface::as_raw(self),
                celt,
            )
            .ok()
        }
        pub unsafe fn Reset(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Reset)(windows_core::Interface::as_raw(self))
                .ok()
        }
        pub unsafe fn Clone(&self) -> windows_core::Result<IDiaEnumInjectedSources> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Clone)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IDiaEnumInjectedSources_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub _NewEnum: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Count:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
        pub Item: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Next: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub Skip: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Reset: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub Clone: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaEnumInputAssemblyFiles,
        IDiaEnumInputAssemblyFiles_Vtbl,
        0x1c7ff653_51f7_457e_8419_b20f57ef7e4d
    );
    impl core::ops::Deref for IDiaEnumInputAssemblyFiles {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaEnumInputAssemblyFiles, windows_core::IUnknown);
    impl IDiaEnumInputAssemblyFiles {
        pub unsafe fn _NewEnum(&self) -> windows_core::Result<windows_core::IUnknown> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self)._NewEnum)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Count(&self) -> windows_core::Result<i32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Count)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn Item(&self, index: u32) -> windows_core::Result<IDiaInputAssemblyFile> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Item)(
                windows_core::Interface::as_raw(self),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Next(
            &self,
            celt: u32,
            rgelt: *mut Option<IDiaInputAssemblyFile>,
            pceltfetched: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Next)(
                windows_core::Interface::as_raw(self),
                celt,
                core::mem::transmute(rgelt),
                pceltfetched,
            )
            .ok()
        }
        pub unsafe fn Skip(&self, celt: u32) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Skip)(
                windows_core::Interface::as_raw(self),
                celt,
            )
            .ok()
        }
        pub unsafe fn Reset(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Reset)(windows_core::Interface::as_raw(self))
                .ok()
        }
        pub unsafe fn Clone(&self) -> windows_core::Result<IDiaEnumInputAssemblyFiles> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Clone)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IDiaEnumInputAssemblyFiles_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub _NewEnum: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Count:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
        pub Item: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Next: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub Skip: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Reset: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub Clone: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaEnumLineNumbers,
        IDiaEnumLineNumbers_Vtbl,
        0xfe30e878_54ac_44f1_81ba_39de940f6052
    );
    impl core::ops::Deref for IDiaEnumLineNumbers {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaEnumLineNumbers, windows_core::IUnknown);
    impl IDiaEnumLineNumbers {
        pub unsafe fn _NewEnum(&self) -> windows_core::Result<windows_core::IUnknown> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self)._NewEnum)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Count(&self) -> windows_core::Result<i32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Count)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn Item(&self, index: u32) -> windows_core::Result<IDiaLineNumber> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Item)(
                windows_core::Interface::as_raw(self),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Next(
            &self,
            celt: u32,
            rgelt: *mut Option<IDiaLineNumber>,
            pceltfetched: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Next)(
                windows_core::Interface::as_raw(self),
                celt,
                core::mem::transmute(rgelt),
                pceltfetched,
            )
            .ok()
        }
        pub unsafe fn Skip(&self, celt: u32) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Skip)(
                windows_core::Interface::as_raw(self),
                celt,
            )
            .ok()
        }
        pub unsafe fn Reset(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Reset)(windows_core::Interface::as_raw(self))
                .ok()
        }
        pub unsafe fn Clone(&self) -> windows_core::Result<IDiaEnumLineNumbers> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Clone)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IDiaEnumLineNumbers_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub _NewEnum: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Count:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
        pub Item: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Next: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub Skip: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Reset: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub Clone: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaEnumSectionContribs,
        IDiaEnumSectionContribs_Vtbl,
        0x1994deb2_2c82_4b1d_a57f_aff424d54a68
    );
    impl core::ops::Deref for IDiaEnumSectionContribs {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaEnumSectionContribs, windows_core::IUnknown);
    impl IDiaEnumSectionContribs {
        pub unsafe fn _NewEnum(&self) -> windows_core::Result<windows_core::IUnknown> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self)._NewEnum)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Count(&self) -> windows_core::Result<i32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Count)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn Item(&self, index: u32) -> windows_core::Result<IDiaSectionContrib> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Item)(
                windows_core::Interface::as_raw(self),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Next(
            &self,
            celt: u32,
            rgelt: *mut Option<IDiaSectionContrib>,
            pceltfetched: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Next)(
                windows_core::Interface::as_raw(self),
                celt,
                core::mem::transmute(rgelt),
                pceltfetched,
            )
            .ok()
        }
        pub unsafe fn Skip(&self, celt: u32) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Skip)(
                windows_core::Interface::as_raw(self),
                celt,
            )
            .ok()
        }
        pub unsafe fn Reset(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Reset)(windows_core::Interface::as_raw(self))
                .ok()
        }
        pub unsafe fn Clone(&self) -> windows_core::Result<IDiaEnumSectionContribs> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Clone)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IDiaEnumSectionContribs_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub _NewEnum: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Count:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
        pub Item: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Next: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub Skip: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Reset: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub Clone: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaEnumSegments,
        IDiaEnumSegments_Vtbl,
        0xe8368ca9_01d1_419d_ac0c_e31235dbda9f
    );
    impl core::ops::Deref for IDiaEnumSegments {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaEnumSegments, windows_core::IUnknown);
    impl IDiaEnumSegments {
        pub unsafe fn _NewEnum(&self) -> windows_core::Result<windows_core::IUnknown> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self)._NewEnum)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Count(&self) -> windows_core::Result<i32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Count)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn Item(&self, index: u32) -> windows_core::Result<IDiaSegment> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Item)(
                windows_core::Interface::as_raw(self),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Next(
            &self,
            celt: u32,
            rgelt: *mut Option<IDiaSegment>,
            pceltfetched: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Next)(
                windows_core::Interface::as_raw(self),
                celt,
                core::mem::transmute(rgelt),
                pceltfetched,
            )
            .ok()
        }
        pub unsafe fn Skip(&self, celt: u32) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Skip)(
                windows_core::Interface::as_raw(self),
                celt,
            )
            .ok()
        }
        pub unsafe fn Reset(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Reset)(windows_core::Interface::as_raw(self))
                .ok()
        }
        pub unsafe fn Clone(&self) -> windows_core::Result<IDiaEnumSegments> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Clone)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IDiaEnumSegments_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub _NewEnum: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Count:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
        pub Item: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Next: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub Skip: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Reset: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub Clone: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaEnumSourceFiles,
        IDiaEnumSourceFiles_Vtbl,
        0x10f3dbd9_664f_4469_b808_9471c7a50538
    );
    impl core::ops::Deref for IDiaEnumSourceFiles {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaEnumSourceFiles, windows_core::IUnknown);
    impl IDiaEnumSourceFiles {
        pub unsafe fn _NewEnum(&self) -> windows_core::Result<windows_core::IUnknown> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self)._NewEnum)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Count(&self) -> windows_core::Result<i32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Count)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn Item(&self, index: u32) -> windows_core::Result<IDiaSourceFile> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Item)(
                windows_core::Interface::as_raw(self),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Next(
            &self,
            celt: u32,
            rgelt: *mut Option<IDiaSourceFile>,
            pceltfetched: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Next)(
                windows_core::Interface::as_raw(self),
                celt,
                core::mem::transmute(rgelt),
                pceltfetched,
            )
            .ok()
        }
        pub unsafe fn Skip(&self, celt: u32) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Skip)(
                windows_core::Interface::as_raw(self),
                celt,
            )
            .ok()
        }
        pub unsafe fn Reset(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Reset)(windows_core::Interface::as_raw(self))
                .ok()
        }
        pub unsafe fn Clone(&self) -> windows_core::Result<IDiaEnumSourceFiles> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Clone)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IDiaEnumSourceFiles_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub _NewEnum: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Count:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
        pub Item: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Next: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub Skip: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Reset: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub Clone: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaEnumStackFrames,
        IDiaEnumStackFrames_Vtbl,
        0xec9d461d_ce74_4711_a020_7d8f9a1dd255
    );
    impl core::ops::Deref for IDiaEnumStackFrames {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaEnumStackFrames, windows_core::IUnknown);
    impl IDiaEnumStackFrames {
        pub unsafe fn Next(
            &self,
            celt: u32,
            rgelt: *mut Option<IDiaStackFrame>,
            pceltfetched: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Next)(
                windows_core::Interface::as_raw(self),
                celt,
                core::mem::transmute(rgelt),
                pceltfetched,
            )
            .ok()
        }
        pub unsafe fn Reset(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Reset)(windows_core::Interface::as_raw(self))
                .ok()
        }
    }
    #[repr(C)]
    pub struct IDiaEnumStackFrames_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub Next: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub Reset: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaEnumSymbols,
        IDiaEnumSymbols_Vtbl,
        0xcab72c48_443b_48f5_9b0b_42f0820ab29a
    );
    impl core::ops::Deref for IDiaEnumSymbols {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaEnumSymbols, windows_core::IUnknown);
    impl IDiaEnumSymbols {
        pub unsafe fn _NewEnum(&self) -> windows_core::Result<windows_core::IUnknown> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self)._NewEnum)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Count(&self) -> windows_core::Result<i32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Count)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn Item(&self, index: u32) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Item)(
                windows_core::Interface::as_raw(self),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Next(
            &self,
            celt: u32,
            rgelt: *mut Option<IDiaSymbol>,
            pceltfetched: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Next)(
                windows_core::Interface::as_raw(self),
                celt,
                core::mem::transmute(rgelt),
                pceltfetched,
            )
            .ok()
        }
        pub unsafe fn Skip(&self, celt: u32) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Skip)(
                windows_core::Interface::as_raw(self),
                celt,
            )
            .ok()
        }
        pub unsafe fn Reset(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Reset)(windows_core::Interface::as_raw(self))
                .ok()
        }
        pub unsafe fn Clone(&self) -> windows_core::Result<IDiaEnumSymbols> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Clone)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IDiaEnumSymbols_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub _NewEnum: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Count:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
        pub Item: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Next: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub Skip: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Reset: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub Clone: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaEnumSymbolsByAddr,
        IDiaEnumSymbolsByAddr_Vtbl,
        0x624b7d9c_24ea_4421_9d06_3b577471c1fa
    );
    impl core::ops::Deref for IDiaEnumSymbolsByAddr {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaEnumSymbolsByAddr, windows_core::IUnknown);
    impl IDiaEnumSymbolsByAddr {
        pub unsafe fn symbolByAddr(
            &self,
            isect: u32,
            offset: u32,
        ) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).symbolByAddr)(
                windows_core::Interface::as_raw(self),
                isect,
                offset,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn symbolByRVA(
            &self,
            relativevirtualaddress: u32,
        ) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).symbolByRVA)(
                windows_core::Interface::as_raw(self),
                relativevirtualaddress,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn symbolByVA(&self, virtualaddress: u64) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).symbolByVA)(
                windows_core::Interface::as_raw(self),
                virtualaddress,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Next(
            &self,
            celt: u32,
            rgelt: *mut Option<IDiaSymbol>,
            pceltfetched: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Next)(
                windows_core::Interface::as_raw(self),
                celt,
                core::mem::transmute(rgelt),
                pceltfetched,
            )
            .ok()
        }
        pub unsafe fn Prev(
            &self,
            celt: u32,
            rgelt: *mut Option<IDiaSymbol>,
            pceltfetched: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Prev)(
                windows_core::Interface::as_raw(self),
                celt,
                core::mem::transmute(rgelt),
                pceltfetched,
            )
            .ok()
        }
        pub unsafe fn Clone(&self) -> windows_core::Result<IDiaEnumSymbolsByAddr> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Clone)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IDiaEnumSymbolsByAddr_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub symbolByAddr: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub symbolByRVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub symbolByVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Next: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub Prev: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub Clone: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaEnumSymbolsByAddr2,
        IDiaEnumSymbolsByAddr2_Vtbl,
        0x1e45bd02_be45_4d71_ba32_0e576cfcd59f
    );
    impl core::ops::Deref for IDiaEnumSymbolsByAddr2 {
        type Target = IDiaEnumSymbolsByAddr;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(
        IDiaEnumSymbolsByAddr2,
        windows_core::IUnknown,
        IDiaEnumSymbolsByAddr
    );
    impl IDiaEnumSymbolsByAddr2 {
        pub unsafe fn symbolByAddrEx<P0>(
            &self,
            fpromoteblocksym: P0,
            isect: u32,
            offset: u32,
        ) -> windows_core::Result<IDiaSymbol>
        where
            P0: windows_core::Param<windows::Win32::Foundation::BOOL>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).symbolByAddrEx)(
                windows_core::Interface::as_raw(self),
                fpromoteblocksym.param().abi(),
                isect,
                offset,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn symbolByRVAEx<P0>(
            &self,
            fpromoteblocksym: P0,
            relativevirtualaddress: u32,
        ) -> windows_core::Result<IDiaSymbol>
        where
            P0: windows_core::Param<windows::Win32::Foundation::BOOL>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).symbolByRVAEx)(
                windows_core::Interface::as_raw(self),
                fpromoteblocksym.param().abi(),
                relativevirtualaddress,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn symbolByVAEx<P0>(
            &self,
            fpromoteblocksym: P0,
            virtualaddress: u64,
        ) -> windows_core::Result<IDiaSymbol>
        where
            P0: windows_core::Param<windows::Win32::Foundation::BOOL>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).symbolByVAEx)(
                windows_core::Interface::as_raw(self),
                fpromoteblocksym.param().abi(),
                virtualaddress,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn NextEx<P0>(
            &self,
            fpromoteblocksym: P0,
            celt: u32,
            rgelt: *mut Option<IDiaSymbol>,
            pceltfetched: *mut u32,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows::Win32::Foundation::BOOL>,
        {
            (windows_core::Interface::vtable(self).NextEx)(
                windows_core::Interface::as_raw(self),
                fpromoteblocksym.param().abi(),
                celt,
                core::mem::transmute(rgelt),
                pceltfetched,
            )
            .ok()
        }
        pub unsafe fn PrevEx<P0>(
            &self,
            fpromoteblocksym: P0,
            celt: u32,
            rgelt: *mut Option<IDiaSymbol>,
            pceltfetched: *mut u32,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows::Win32::Foundation::BOOL>,
        {
            (windows_core::Interface::vtable(self).PrevEx)(
                windows_core::Interface::as_raw(self),
                fpromoteblocksym.param().abi(),
                celt,
                core::mem::transmute(rgelt),
                pceltfetched,
            )
            .ok()
        }
    }
    #[repr(C)]
    pub struct IDiaEnumSymbolsByAddr2_Vtbl {
        pub base__: IDiaEnumSymbolsByAddr_Vtbl,
        pub symbolByAddrEx: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows::Win32::Foundation::BOOL,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub symbolByRVAEx: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows::Win32::Foundation::BOOL,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub symbolByVAEx: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows::Win32::Foundation::BOOL,
            u64,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub NextEx: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows::Win32::Foundation::BOOL,
            u32,
            *mut *mut core::ffi::c_void,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub PrevEx: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows::Win32::Foundation::BOOL,
            u32,
            *mut *mut core::ffi::c_void,
            *mut u32,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaEnumTables,
        IDiaEnumTables_Vtbl,
        0xc65c2b0a_1150_4d7a_afcc_e05bf3dee81e
    );
    impl core::ops::Deref for IDiaEnumTables {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaEnumTables, windows_core::IUnknown);
    impl IDiaEnumTables {
        pub unsafe fn _NewEnum(&self) -> windows_core::Result<windows_core::IUnknown> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self)._NewEnum)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Count(&self) -> windows_core::Result<i32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Count)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn Item<P0>(&self, index: P0) -> windows_core::Result<IDiaTable>
        where
            P0: windows_core::Param<windows_core::VARIANT>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Item)(
                windows_core::Interface::as_raw(self),
                index.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Next(
            &self,
            celt: u32,
            rgelt: *mut Option<IDiaTable>,
            pceltfetched: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Next)(
                windows_core::Interface::as_raw(self),
                celt,
                core::mem::transmute(rgelt),
                pceltfetched,
            )
            .ok()
        }
        pub unsafe fn Skip(&self, celt: u32) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Skip)(
                windows_core::Interface::as_raw(self),
                celt,
            )
            .ok()
        }
        pub unsafe fn Reset(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).Reset)(windows_core::Interface::as_raw(self))
                .ok()
        }
        pub unsafe fn Clone(&self) -> windows_core::Result<IDiaEnumTables> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Clone)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IDiaEnumTables_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub _NewEnum: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Count:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
        pub Item: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            core::mem::MaybeUninit<windows_core::VARIANT>,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub Next: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub Skip: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Reset: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub Clone: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaFrameData,
        IDiaFrameData_Vtbl,
        0xa39184b7_6a36_42de_8eec_7df9f3f59f33
    );
    impl core::ops::Deref for IDiaFrameData {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaFrameData, windows_core::IUnknown);
    impl IDiaFrameData {
        pub unsafe fn addressSection(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).addressSection)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn addressOffset(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).addressOffset)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn relativeVirtualAddress(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).relativeVirtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn virtualAddress(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).virtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn lengthBlock(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).lengthBlock)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn lengthLocals(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).lengthLocals)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn lengthParams(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).lengthParams)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn maxStack(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).maxStack)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn lengthProlog(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).lengthProlog)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn lengthSavedRegisters(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).lengthSavedRegisters)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn program(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).program)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn systemExceptionHandling(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).systemExceptionHandling)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn cplusplusExceptionHandling(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).cplusplusExceptionHandling)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn functionStart(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).functionStart)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn allocatesBasePointer(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).allocatesBasePointer)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn r#type(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).r#type)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn functionParent(&self) -> windows_core::Result<IDiaFrameData> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).functionParent)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn execute<P0>(&self, frame: P0) -> windows_core::Result<()>
        where
            P0: windows_core::Param<IDiaStackWalkFrame>,
        {
            (windows_core::Interface::vtable(self).execute)(
                windows_core::Interface::as_raw(self),
                frame.param().abi(),
            )
            .ok()
        }
    }
    #[repr(C)]
    pub struct IDiaFrameData_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub addressSection:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub addressOffset:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub relativeVirtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub virtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
        pub lengthBlock:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub lengthLocals:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub lengthParams:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub maxStack:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub lengthProlog:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub lengthSavedRegisters:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub program: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub systemExceptionHandling: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub cplusplusExceptionHandling: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub functionStart: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub allocatesBasePointer: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub r#type:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub functionParent: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub execute: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaImageData,
        IDiaImageData_Vtbl,
        0xc8e40ed2_a1d9_4221_8692_3ce661184b44
    );
    impl core::ops::Deref for IDiaImageData {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaImageData, windows_core::IUnknown);
    impl IDiaImageData {
        pub unsafe fn relativeVirtualAddress(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).relativeVirtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn virtualAddress(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).virtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn imageBase(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).imageBase)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[repr(C)]
    pub struct IDiaImageData_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub relativeVirtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub virtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
        pub imageBase:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaInjectedSource,
        IDiaInjectedSource_Vtbl,
        0xae605cdc_8105_4a23_b710_3259f1e26112
    );
    impl core::ops::Deref for IDiaInjectedSource {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaInjectedSource, windows_core::IUnknown);
    impl IDiaInjectedSource {
        pub unsafe fn crc(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).crc)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn length(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).length)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn filename(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).filename)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn objectFilename(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).objectFilename)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn virtualFilename(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).virtualFilename)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn sourceCompression(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).sourceCompression)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn get_source(
            &self,
            pcbdata: *mut u32,
            pbdata: &mut [u8],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).get_source)(
                windows_core::Interface::as_raw(self),
                pbdata.len().try_into().unwrap(),
                pcbdata,
                core::mem::transmute(pbdata.as_ptr()),
            )
            .ok()
        }
    }
    #[repr(C)]
    pub struct IDiaInjectedSource_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub crc:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub length:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
        pub filename: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub objectFilename: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub virtualFilename: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub sourceCompression:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub get_source: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u32,
            *mut u8,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaInputAssemblyFile,
        IDiaInputAssemblyFile_Vtbl,
        0x3bfe56b0_390c_4863_9430_1f3d083b7684
    );
    impl core::ops::Deref for IDiaInputAssemblyFile {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaInputAssemblyFile, windows_core::IUnknown);
    impl IDiaInputAssemblyFile {
        pub unsafe fn uniqueId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).uniqueId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn index(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).index)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn timestamp(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).timestamp)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn pdbAvailableAtILMerge(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).pdbAvailableAtILMerge)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn fileName(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).fileName)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn get_version(
            &self,
            pcbdata: *mut u32,
            pbdata: &mut [u8],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).get_version)(
                windows_core::Interface::as_raw(self),
                pbdata.len().try_into().unwrap(),
                pcbdata,
                core::mem::transmute(pbdata.as_ptr()),
            )
            .ok()
        }
    }
    #[repr(C)]
    pub struct IDiaInputAssemblyFile_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub uniqueId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub index:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub timestamp:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub pdbAvailableAtILMerge: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub fileName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub get_version: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u32,
            *mut u8,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaLineNumber,
        IDiaLineNumber_Vtbl,
        0xb388eb14_be4d_421d_a8a1_6cf7ab057086
    );
    impl core::ops::Deref for IDiaLineNumber {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaLineNumber, windows_core::IUnknown);
    impl IDiaLineNumber {
        pub unsafe fn compiland(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).compiland)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn sourceFile(&self) -> windows_core::Result<IDiaSourceFile> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).sourceFile)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn lineNumber(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).lineNumber)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn lineNumberEnd(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).lineNumberEnd)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn columnNumber(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).columnNumber)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn columnNumberEnd(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).columnNumberEnd)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn addressSection(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).addressSection)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn addressOffset(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).addressOffset)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn relativeVirtualAddress(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).relativeVirtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn virtualAddress(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).virtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn length(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).length)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn sourceFileId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).sourceFileId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn statement(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).statement)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn compilandId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).compilandId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[repr(C)]
    pub struct IDiaLineNumber_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub compiland: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub sourceFile: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub lineNumber:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub lineNumberEnd:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub columnNumber:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub columnNumberEnd:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub addressSection:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub addressOffset:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub relativeVirtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub virtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
        pub length:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub sourceFileId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub statement: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub compilandId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaLoadCallback,
        IDiaLoadCallback_Vtbl,
        0xc32adb82_73f4_421b_95d5_a4706edf5dbe
    );
    impl core::ops::Deref for IDiaLoadCallback {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaLoadCallback, windows_core::IUnknown);
    impl IDiaLoadCallback {
        pub unsafe fn NotifyDebugDir<P0>(
            &self,
            fexecutable: P0,
            pbdata: &[u8],
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows::Win32::Foundation::BOOL>,
        {
            (windows_core::Interface::vtable(self).NotifyDebugDir)(
                windows_core::Interface::as_raw(self),
                fexecutable.param().abi(),
                pbdata.len().try_into().unwrap(),
                core::mem::transmute(pbdata.as_ptr()),
            )
            .ok()
        }
        pub unsafe fn NotifyOpenDBG<P0>(
            &self,
            dbgpath: P0,
            resultcode: windows_core::HRESULT,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            (windows_core::Interface::vtable(self).NotifyOpenDBG)(
                windows_core::Interface::as_raw(self),
                dbgpath.param().abi(),
                resultcode,
            )
            .ok()
        }
        pub unsafe fn NotifyOpenPDB<P0>(
            &self,
            pdbpath: P0,
            resultcode: windows_core::HRESULT,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            (windows_core::Interface::vtable(self).NotifyOpenPDB)(
                windows_core::Interface::as_raw(self),
                pdbpath.param().abi(),
                resultcode,
            )
            .ok()
        }
        pub unsafe fn RestrictRegistryAccess(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).RestrictRegistryAccess)(
                windows_core::Interface::as_raw(self),
            )
            .ok()
        }
        pub unsafe fn RestrictSymbolServerAccess(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).RestrictSymbolServerAccess)(
                windows_core::Interface::as_raw(self),
            )
            .ok()
        }
    }
    #[repr(C)]
    pub struct IDiaLoadCallback_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub NotifyDebugDir: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows::Win32::Foundation::BOOL,
            u32,
            *const u8,
        ) -> windows_core::HRESULT,
        pub NotifyOpenDBG: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::HRESULT,
        ) -> windows_core::HRESULT,
        pub NotifyOpenPDB: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            windows_core::HRESULT,
        ) -> windows_core::HRESULT,
        pub RestrictRegistryAccess:
            unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub RestrictSymbolServerAccess:
            unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaLoadCallback2,
        IDiaLoadCallback2_Vtbl,
        0x4688a074_5a4d_4486_aea8_7b90711d9f7c
    );
    impl core::ops::Deref for IDiaLoadCallback2 {
        type Target = IDiaLoadCallback;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(
        IDiaLoadCallback2,
        windows_core::IUnknown,
        IDiaLoadCallback
    );
    impl IDiaLoadCallback2 {
        pub unsafe fn RestrictOriginalPathAccess(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).RestrictOriginalPathAccess)(
                windows_core::Interface::as_raw(self),
            )
            .ok()
        }
        pub unsafe fn RestrictReferencePathAccess(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).RestrictReferencePathAccess)(
                windows_core::Interface::as_raw(self),
            )
            .ok()
        }
        pub unsafe fn RestrictDBGAccess(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).RestrictDBGAccess)(
                windows_core::Interface::as_raw(self),
            )
            .ok()
        }
        pub unsafe fn RestrictSystemRootAccess(&self) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).RestrictSystemRootAccess)(
                windows_core::Interface::as_raw(self),
            )
            .ok()
        }
    }
    #[repr(C)]
    pub struct IDiaLoadCallback2_Vtbl {
        pub base__: IDiaLoadCallback_Vtbl,
        pub RestrictOriginalPathAccess:
            unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub RestrictReferencePathAccess:
            unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub RestrictDBGAccess:
            unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub RestrictSystemRootAccess:
            unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaPropertyStorage,
        IDiaPropertyStorage_Vtbl,
        0x9d416f9c_e184_45b2_a4f0_ce517f719e9b
    );
    impl core::ops::Deref for IDiaPropertyStorage {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaPropertyStorage, windows_core::IUnknown);
    impl IDiaPropertyStorage {
        pub unsafe fn ReadMultiple(
            &self,
            cpspec: u32,
            rgpspec: *const windows::Win32::System::Com::StructuredStorage::PROPSPEC,
            rgvar: *mut windows_core::PROPVARIANT,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).ReadMultiple)(
                windows_core::Interface::as_raw(self),
                cpspec,
                rgpspec,
                core::mem::transmute(rgvar),
            )
            .ok()
        }
        pub unsafe fn ReadPropertyNames(
            &self,
            cpropid: u32,
            rgpropid: *const u32,
            rglpwstrname: *mut windows_core::BSTR,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).ReadPropertyNames)(
                windows_core::Interface::as_raw(self),
                cpropid,
                rgpropid,
                core::mem::transmute(rglpwstrname),
            )
            .ok()
        }
        pub unsafe fn Enum(
            &self,
        ) -> windows_core::Result<windows::Win32::System::Com::StructuredStorage::IEnumSTATPROPSTG>
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Enum)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn ReadDWORD(&self, id: u32) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).ReadDWORD)(
                windows_core::Interface::as_raw(self),
                id,
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn ReadLONG(&self, id: u32) -> windows_core::Result<i32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).ReadLONG)(
                windows_core::Interface::as_raw(self),
                id,
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn ReadBOOL(
            &self,
            id: u32,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).ReadBOOL)(
                windows_core::Interface::as_raw(self),
                id,
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn ReadULONGLONG(&self, id: u32) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).ReadULONGLONG)(
                windows_core::Interface::as_raw(self),
                id,
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn ReadBSTR(&self, id: u32) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).ReadBSTR)(
                windows_core::Interface::as_raw(self),
                id,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IDiaPropertyStorage_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub ReadMultiple: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *const windows::Win32::System::Com::StructuredStorage::PROPSPEC,
            *mut core::mem::MaybeUninit<windows_core::PROPVARIANT>,
        ) -> windows_core::HRESULT,
        pub ReadPropertyNames: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *const u32,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub Enum: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub ReadDWORD: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub ReadLONG: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut i32,
        ) -> windows_core::HRESULT,
        pub ReadBOOL: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub ReadULONGLONG: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u64,
        ) -> windows_core::HRESULT,
        pub ReadBSTR: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaReadExeAtOffsetCallback,
        IDiaReadExeAtOffsetCallback_Vtbl,
        0x587a461c_b80b_4f54_9194_5032589a6319
    );
    impl core::ops::Deref for IDiaReadExeAtOffsetCallback {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaReadExeAtOffsetCallback, windows_core::IUnknown);
    impl IDiaReadExeAtOffsetCallback {
        pub unsafe fn ReadExecutableAt(
            &self,
            fileoffset: u64,
            pcbdata: *mut u32,
            pbdata: &mut [u8],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).ReadExecutableAt)(
                windows_core::Interface::as_raw(self),
                fileoffset,
                pbdata.len().try_into().unwrap(),
                pcbdata,
                core::mem::transmute(pbdata.as_ptr()),
            )
            .ok()
        }
    }
    #[repr(C)]
    pub struct IDiaReadExeAtOffsetCallback_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub ReadExecutableAt: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            u32,
            *mut u32,
            *mut u8,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaReadExeAtRVACallback,
        IDiaReadExeAtRVACallback_Vtbl,
        0x8e3f80ca_7517_432a_ba07_285134aaea8e
    );
    impl core::ops::Deref for IDiaReadExeAtRVACallback {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaReadExeAtRVACallback, windows_core::IUnknown);
    impl IDiaReadExeAtRVACallback {
        pub unsafe fn ReadExecutableAtRVA(
            &self,
            relativevirtualaddress: u32,
            pcbdata: *mut u32,
            pbdata: &mut [u8],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).ReadExecutableAtRVA)(
                windows_core::Interface::as_raw(self),
                relativevirtualaddress,
                pbdata.len().try_into().unwrap(),
                pcbdata,
                core::mem::transmute(pbdata.as_ptr()),
            )
            .ok()
        }
    }
    #[repr(C)]
    pub struct IDiaReadExeAtRVACallback_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub ReadExecutableAtRVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            u32,
            *mut u32,
            *mut u8,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaSectionContrib,
        IDiaSectionContrib_Vtbl,
        0x0cf4b60e_35b1_4c6c_bdd8_854b9c8e3857
    );
    impl core::ops::Deref for IDiaSectionContrib {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaSectionContrib, windows_core::IUnknown);
    impl IDiaSectionContrib {
        pub unsafe fn compiland(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).compiland)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn addressSection(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).addressSection)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn addressOffset(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).addressOffset)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn relativeVirtualAddress(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).relativeVirtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn virtualAddress(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).virtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn length(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).length)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn notPaged(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).notPaged)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn code(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).code)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn initializedData(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).initializedData)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn uninitializedData(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).uninitializedData)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn remove(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).remove)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn comdat(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).comdat)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn discardable(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).discardable)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn notCached(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).notCached)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn share(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).share)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn execute(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).execute)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn read(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).read)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn write(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).write)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn dataCrc(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).dataCrc)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn relocationsCrc(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).relocationsCrc)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn compilandId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).compilandId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn code16bit(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).code16bit)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[repr(C)]
    pub struct IDiaSectionContrib_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub compiland: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub addressSection:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub addressOffset:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub relativeVirtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub virtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
        pub length:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub notPaged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub code: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub initializedData: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub uninitializedData: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub remove: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub comdat: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub discardable: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub notCached: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub share: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub execute: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub read: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub write: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub dataCrc:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub relocationsCrc:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub compilandId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub code16bit: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaSegment,
        IDiaSegment_Vtbl,
        0x0775b784_c75b_4449_848b_b7bd3159545b
    );
    impl core::ops::Deref for IDiaSegment {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaSegment, windows_core::IUnknown);
    impl IDiaSegment {
        pub unsafe fn frame(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).frame)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn offset(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).offset)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn length(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).length)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn read(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).read)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn write(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).write)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn execute(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).execute)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn addressSection(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).addressSection)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn relativeVirtualAddress(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).relativeVirtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn virtualAddress(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).virtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[repr(C)]
    pub struct IDiaSegment_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub frame:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub offset:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub length:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub read: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub write: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub execute: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub addressSection:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub relativeVirtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub virtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaSession,
        IDiaSession_Vtbl,
        0x2f609ee1_d1c8_4e24_8288_3326badcd211
    );
    impl core::ops::Deref for IDiaSession {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaSession, windows_core::IUnknown);
    impl IDiaSession {
        pub unsafe fn loadAddress(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).loadAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn SetloadAddress(&self, newval: u64) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).SetloadAddress)(
                windows_core::Interface::as_raw(self),
                newval,
            )
            .ok()
        }
        pub unsafe fn globalScope(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).globalScope)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn getEnumTables(&self) -> windows_core::Result<IDiaEnumTables> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).getEnumTables)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn getSymbolsByAddr(&self) -> windows_core::Result<IDiaEnumSymbolsByAddr> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).getSymbolsByAddr)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findChildren<P0, P1>(
            &self,
            parent: P0,
            symtag: SymTag,
            name: P1,
            compareflags: u32,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<IDiaSymbol>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findChildren)(
                windows_core::Interface::as_raw(self),
                parent.param().abi(),
                symtag,
                name.param().abi(),
                compareflags,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findChildrenEx<P0, P1>(
            &self,
            parent: P0,
            symtag: SymTag,
            name: P1,
            compareflags: u32,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<IDiaSymbol>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findChildrenEx)(
                windows_core::Interface::as_raw(self),
                parent.param().abi(),
                symtag,
                name.param().abi(),
                compareflags,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findChildrenExByAddr<P0, P1>(
            &self,
            parent: P0,
            symtag: SymTag,
            name: P1,
            compareflags: u32,
            isect: u32,
            offset: u32,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<IDiaSymbol>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findChildrenExByAddr)(
                windows_core::Interface::as_raw(self),
                parent.param().abi(),
                symtag,
                name.param().abi(),
                compareflags,
                isect,
                offset,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findChildrenExByVA<P0, P1>(
            &self,
            parent: P0,
            symtag: SymTag,
            name: P1,
            compareflags: u32,
            va: u64,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<IDiaSymbol>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findChildrenExByVA)(
                windows_core::Interface::as_raw(self),
                parent.param().abi(),
                symtag,
                name.param().abi(),
                compareflags,
                va,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findChildrenExByRVA<P0, P1>(
            &self,
            parent: P0,
            symtag: SymTag,
            name: P1,
            compareflags: u32,
            rva: u32,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<IDiaSymbol>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findChildrenExByRVA)(
                windows_core::Interface::as_raw(self),
                parent.param().abi(),
                symtag,
                name.param().abi(),
                compareflags,
                rva,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findSymbolByAddr(
            &self,
            isect: u32,
            offset: u32,
            symtag: SymTag,
        ) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findSymbolByAddr)(
                windows_core::Interface::as_raw(self),
                isect,
                offset,
                symtag,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findSymbolByRVA(
            &self,
            rva: u32,
            symtag: SymTag,
        ) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findSymbolByRVA)(
                windows_core::Interface::as_raw(self),
                rva,
                symtag,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findSymbolByVA(
            &self,
            va: u64,
            symtag: SymTag,
        ) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findSymbolByVA)(
                windows_core::Interface::as_raw(self),
                va,
                symtag,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findSymbolByToken(
            &self,
            token: u32,
            symtag: SymTag,
        ) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findSymbolByToken)(
                windows_core::Interface::as_raw(self),
                token,
                symtag,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn symsAreEquiv<P0, P1>(
            &self,
            symbola: P0,
            symbolb: P1,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<IDiaSymbol>,
            P1: windows_core::Param<IDiaSymbol>,
        {
            (windows_core::Interface::vtable(self).symsAreEquiv)(
                windows_core::Interface::as_raw(self),
                symbola.param().abi(),
                symbolb.param().abi(),
            )
            .ok()
        }
        pub unsafe fn symbolById(&self, id: u32) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).symbolById)(
                windows_core::Interface::as_raw(self),
                id,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findSymbolByRVAEx(
            &self,
            rva: u32,
            symtag: SymTag,
            ppsymbol: *mut Option<IDiaSymbol>,
            displacement: *mut i32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).findSymbolByRVAEx)(
                windows_core::Interface::as_raw(self),
                rva,
                symtag,
                core::mem::transmute(ppsymbol),
                displacement,
            )
            .ok()
        }
        pub unsafe fn findSymbolByVAEx(
            &self,
            va: u64,
            symtag: SymTag,
            ppsymbol: *mut Option<IDiaSymbol>,
            displacement: *mut i32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).findSymbolByVAEx)(
                windows_core::Interface::as_raw(self),
                va,
                symtag,
                core::mem::transmute(ppsymbol),
                displacement,
            )
            .ok()
        }
        pub unsafe fn findFile<P0, P1>(
            &self,
            pcompiland: P0,
            name: P1,
            compareflags: u32,
        ) -> windows_core::Result<IDiaEnumSourceFiles>
        where
            P0: windows_core::Param<IDiaSymbol>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findFile)(
                windows_core::Interface::as_raw(self),
                pcompiland.param().abi(),
                name.param().abi(),
                compareflags,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findFileById(&self, uniqueid: u32) -> windows_core::Result<IDiaSourceFile> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findFileById)(
                windows_core::Interface::as_raw(self),
                uniqueid,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findLines<P0, P1>(
            &self,
            compiland: P0,
            file: P1,
        ) -> windows_core::Result<IDiaEnumLineNumbers>
        where
            P0: windows_core::Param<IDiaSymbol>,
            P1: windows_core::Param<IDiaSourceFile>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findLines)(
                windows_core::Interface::as_raw(self),
                compiland.param().abi(),
                file.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findLinesByAddr(
            &self,
            seg: u32,
            offset: u32,
            length: u32,
        ) -> windows_core::Result<IDiaEnumLineNumbers> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findLinesByAddr)(
                windows_core::Interface::as_raw(self),
                seg,
                offset,
                length,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findLinesByRVA(
            &self,
            rva: u32,
            length: u32,
        ) -> windows_core::Result<IDiaEnumLineNumbers> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findLinesByRVA)(
                windows_core::Interface::as_raw(self),
                rva,
                length,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findLinesByVA(
            &self,
            va: u64,
            length: u32,
        ) -> windows_core::Result<IDiaEnumLineNumbers> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findLinesByVA)(
                windows_core::Interface::as_raw(self),
                va,
                length,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findLinesByLinenum<P0, P1>(
            &self,
            compiland: P0,
            file: P1,
            linenum: u32,
            column: u32,
        ) -> windows_core::Result<IDiaEnumLineNumbers>
        where
            P0: windows_core::Param<IDiaSymbol>,
            P1: windows_core::Param<IDiaSourceFile>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findLinesByLinenum)(
                windows_core::Interface::as_raw(self),
                compiland.param().abi(),
                file.param().abi(),
                linenum,
                column,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInjectedSource<P0>(
            &self,
            srcfile: P0,
        ) -> windows_core::Result<IDiaEnumInjectedSources>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInjectedSource)(
                windows_core::Interface::as_raw(self),
                srcfile.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn getEnumDebugStreams(&self) -> windows_core::Result<IDiaEnumDebugStreams> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).getEnumDebugStreams)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInlineFramesByAddr<P0>(
            &self,
            parent: P0,
            isect: u32,
            offset: u32,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<IDiaSymbol>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInlineFramesByAddr)(
                windows_core::Interface::as_raw(self),
                parent.param().abi(),
                isect,
                offset,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInlineFramesByRVA<P0>(
            &self,
            parent: P0,
            rva: u32,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<IDiaSymbol>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInlineFramesByRVA)(
                windows_core::Interface::as_raw(self),
                parent.param().abi(),
                rva,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInlineFramesByVA<P0>(
            &self,
            parent: P0,
            va: u64,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<IDiaSymbol>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInlineFramesByVA)(
                windows_core::Interface::as_raw(self),
                parent.param().abi(),
                va,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInlineeLines<P0>(
            &self,
            parent: P0,
        ) -> windows_core::Result<IDiaEnumLineNumbers>
        where
            P0: windows_core::Param<IDiaSymbol>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInlineeLines)(
                windows_core::Interface::as_raw(self),
                parent.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInlineeLinesByAddr<P0>(
            &self,
            parent: P0,
            isect: u32,
            offset: u32,
            length: u32,
        ) -> windows_core::Result<IDiaEnumLineNumbers>
        where
            P0: windows_core::Param<IDiaSymbol>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInlineeLinesByAddr)(
                windows_core::Interface::as_raw(self),
                parent.param().abi(),
                isect,
                offset,
                length,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInlineeLinesByRVA<P0>(
            &self,
            parent: P0,
            rva: u32,
            length: u32,
        ) -> windows_core::Result<IDiaEnumLineNumbers>
        where
            P0: windows_core::Param<IDiaSymbol>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInlineeLinesByRVA)(
                windows_core::Interface::as_raw(self),
                parent.param().abi(),
                rva,
                length,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInlineeLinesByVA<P0>(
            &self,
            parent: P0,
            va: u64,
            length: u32,
        ) -> windows_core::Result<IDiaEnumLineNumbers>
        where
            P0: windows_core::Param<IDiaSymbol>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInlineeLinesByVA)(
                windows_core::Interface::as_raw(self),
                parent.param().abi(),
                va,
                length,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInlineeLinesByLinenum<P0, P1>(
            &self,
            compiland: P0,
            file: P1,
            linenum: u32,
            column: u32,
        ) -> windows_core::Result<IDiaEnumLineNumbers>
        where
            P0: windows_core::Param<IDiaSymbol>,
            P1: windows_core::Param<IDiaSourceFile>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInlineeLinesByLinenum)(
                windows_core::Interface::as_raw(self),
                compiland.param().abi(),
                file.param().abi(),
                linenum,
                column,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInlineesByName<P0>(
            &self,
            name: P0,
            option: u32,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInlineesByName)(
                windows_core::Interface::as_raw(self),
                name.param().abi(),
                option,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findAcceleratorInlineeLinesByLinenum<P0, P1>(
            &self,
            parent: P0,
            file: P1,
            linenum: u32,
            column: u32,
        ) -> windows_core::Result<IDiaEnumLineNumbers>
        where
            P0: windows_core::Param<IDiaSymbol>,
            P1: windows_core::Param<IDiaSourceFile>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findAcceleratorInlineeLinesByLinenum)(
                windows_core::Interface::as_raw(self),
                parent.param().abi(),
                file.param().abi(),
                linenum,
                column,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findSymbolsForAcceleratorPointerTag<P0>(
            &self,
            parent: P0,
            tagvalue: u32,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<IDiaSymbol>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findSymbolsForAcceleratorPointerTag)(
                windows_core::Interface::as_raw(self),
                parent.param().abi(),
                tagvalue,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findSymbolsByRVAForAcceleratorPointerTag<P0>(
            &self,
            parent: P0,
            tagvalue: u32,
            rva: u32,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<IDiaSymbol>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findSymbolsByRVAForAcceleratorPointerTag)(
                windows_core::Interface::as_raw(self),
                parent.param().abi(),
                tagvalue,
                rva,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findAcceleratorInlineesByName<P0>(
            &self,
            name: P0,
            option: u32,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findAcceleratorInlineesByName)(
                windows_core::Interface::as_raw(self),
                name.param().abi(),
                option,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn addressForVA(
            &self,
            va: u64,
            pisect: *mut u32,
            poffset: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).addressForVA)(
                windows_core::Interface::as_raw(self),
                va,
                pisect,
                poffset,
            )
            .ok()
        }
        pub unsafe fn addressForRVA(
            &self,
            rva: u32,
            pisect: *mut u32,
            poffset: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).addressForRVA)(
                windows_core::Interface::as_raw(self),
                rva,
                pisect,
                poffset,
            )
            .ok()
        }
        pub unsafe fn findILOffsetsByAddr(
            &self,
            isect: u32,
            offset: u32,
            length: u32,
        ) -> windows_core::Result<IDiaEnumLineNumbers> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findILOffsetsByAddr)(
                windows_core::Interface::as_raw(self),
                isect,
                offset,
                length,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findILOffsetsByRVA(
            &self,
            rva: u32,
            length: u32,
        ) -> windows_core::Result<IDiaEnumLineNumbers> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findILOffsetsByRVA)(
                windows_core::Interface::as_raw(self),
                rva,
                length,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findILOffsetsByVA(
            &self,
            va: u64,
            length: u32,
        ) -> windows_core::Result<IDiaEnumLineNumbers> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findILOffsetsByVA)(
                windows_core::Interface::as_raw(self),
                va,
                length,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInputAssemblyFiles(
            &self,
        ) -> windows_core::Result<IDiaEnumInputAssemblyFiles> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInputAssemblyFiles)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInputAssembly(
            &self,
            index: u32,
        ) -> windows_core::Result<IDiaInputAssemblyFile> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInputAssembly)(
                windows_core::Interface::as_raw(self),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInputAssemblyById(
            &self,
            uniqueid: u32,
        ) -> windows_core::Result<IDiaInputAssemblyFile> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInputAssemblyById)(
                windows_core::Interface::as_raw(self),
                uniqueid,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn getFuncMDTokenMapSize(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).getFuncMDTokenMapSize)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn getFuncMDTokenMap(
            &self,
            pcb: *mut u32,
            pb: &mut [u8],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).getFuncMDTokenMap)(
                windows_core::Interface::as_raw(self),
                pb.len().try_into().unwrap(),
                pcb,
                core::mem::transmute(pb.as_ptr()),
            )
            .ok()
        }
        pub unsafe fn getTypeMDTokenMapSize(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).getTypeMDTokenMapSize)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn getTypeMDTokenMap(
            &self,
            pcb: *mut u32,
            pb: &mut [u8],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).getTypeMDTokenMap)(
                windows_core::Interface::as_raw(self),
                pb.len().try_into().unwrap(),
                pcb,
                core::mem::transmute(pb.as_ptr()),
            )
            .ok()
        }
        pub unsafe fn getNumberOfFunctionFragments_VA(
            &self,
            vafunc: u64,
            cbfunc: u32,
        ) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).getNumberOfFunctionFragments_VA)(
                windows_core::Interface::as_raw(self),
                vafunc,
                cbfunc,
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn getNumberOfFunctionFragments_RVA(
            &self,
            rvafunc: u32,
            cbfunc: u32,
        ) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).getNumberOfFunctionFragments_RVA)(
                windows_core::Interface::as_raw(self),
                rvafunc,
                cbfunc,
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn getFunctionFragments_VA(
            &self,
            vafunc: u64,
            cbfunc: u32,
            cfragments: u32,
            pvafragment: *mut u64,
            plenfragment: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).getFunctionFragments_VA)(
                windows_core::Interface::as_raw(self),
                vafunc,
                cbfunc,
                cfragments,
                pvafragment,
                plenfragment,
            )
            .ok()
        }
        pub unsafe fn getFunctionFragments_RVA(
            &self,
            rvafunc: u32,
            cbfunc: u32,
            cfragments: u32,
            prvafragment: *mut u32,
            plenfragment: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).getFunctionFragments_RVA)(
                windows_core::Interface::as_raw(self),
                rvafunc,
                cbfunc,
                cfragments,
                prvafragment,
                plenfragment,
            )
            .ok()
        }
        pub unsafe fn getExports(&self) -> windows_core::Result<IDiaEnumSymbols> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).getExports)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn getHeapAllocationSites(&self) -> windows_core::Result<IDiaEnumSymbols> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).getHeapAllocationSites)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInputAssemblyFile<P0>(
            &self,
            psymbol: P0,
        ) -> windows_core::Result<IDiaInputAssemblyFile>
        where
            P0: windows_core::Param<IDiaSymbol>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInputAssemblyFile)(
                windows_core::Interface::as_raw(self),
                psymbol.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IDiaSession_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub loadAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
        pub SetloadAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, u64) -> windows_core::HRESULT,
        pub globalScope: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub getEnumTables: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub getSymbolsByAddr: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findChildren: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            SymTag,
            windows_core::PCWSTR,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findChildrenEx: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            SymTag,
            windows_core::PCWSTR,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findChildrenExByAddr: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            SymTag,
            windows_core::PCWSTR,
            u32,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findChildrenExByVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            SymTag,
            windows_core::PCWSTR,
            u32,
            u64,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findChildrenExByRVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            SymTag,
            windows_core::PCWSTR,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findSymbolByAddr: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            u32,
            SymTag,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findSymbolByRVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            SymTag,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findSymbolByVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            SymTag,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findSymbolByToken: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            SymTag,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub symsAreEquiv: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub symbolById: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findSymbolByRVAEx: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            SymTag,
            *mut *mut core::ffi::c_void,
            *mut i32,
        ) -> windows_core::HRESULT,
        pub findSymbolByVAEx: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            SymTag,
            *mut *mut core::ffi::c_void,
            *mut i32,
        ) -> windows_core::HRESULT,
        pub findFile: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findFileById: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findLines: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findLinesByAddr: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findLinesByRVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findLinesByVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findLinesByLinenum: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInjectedSource: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub getEnumDebugStreams: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInlineFramesByAddr: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInlineFramesByRVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInlineFramesByVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            u64,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInlineeLines: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInlineeLinesByAddr: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            u32,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInlineeLinesByRVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInlineeLinesByVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            u64,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInlineeLinesByLinenum: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInlineesByName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findAcceleratorInlineeLinesByLinenum:
            unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                u32,
                u32,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
        pub findSymbolsForAcceleratorPointerTag: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
        pub findSymbolsByRVAForAcceleratorPointerTag:
            unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                u32,
                u32,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
        pub findAcceleratorInlineesByName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            u32,
            *mut *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
        pub addressForVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            *mut u32,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub addressForRVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u32,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub findILOffsetsByAddr: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findILOffsetsByRVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findILOffsetsByVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInputAssemblyFiles: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInputAssembly: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInputAssemblyById: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub getFuncMDTokenMapSize:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub getFuncMDTokenMap: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u32,
            *mut u8,
        ) -> windows_core::HRESULT,
        pub getTypeMDTokenMapSize:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub getTypeMDTokenMap: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u32,
            *mut u8,
        ) -> windows_core::HRESULT,
        pub getNumberOfFunctionFragments_VA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            u32,
            *mut u32,
        )
            -> windows_core::HRESULT,
        pub getNumberOfFunctionFragments_RVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            u32,
            *mut u32,
        )
            -> windows_core::HRESULT,
        pub getFunctionFragments_VA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            u32,
            u32,
            *mut u64,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub getFunctionFragments_RVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            u32,
            u32,
            *mut u32,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub getExports: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub getHeapAllocationSites: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInputAssemblyFile: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaSourceFile,
        IDiaSourceFile_Vtbl,
        0xa2ef5353_f5a8_4eb3_90d2_cb526acb3cdd
    );
    impl core::ops::Deref for IDiaSourceFile {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaSourceFile, windows_core::IUnknown);
    impl IDiaSourceFile {
        pub unsafe fn uniqueId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).uniqueId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn fileName(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).fileName)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn checksumType(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).checksumType)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn compilands(&self) -> windows_core::Result<IDiaEnumSymbols> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).compilands)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn get_checksum(
            &self,
            pcbdata: *mut u32,
            pbdata: Option<&mut [u8]>,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).get_checksum)(
                windows_core::Interface::as_raw(self),
                pbdata
                    .as_deref()
                    .map_or(0, |slice| slice.len().try_into().unwrap()),
                pcbdata,
                core::mem::transmute(
                    pbdata
                        .as_deref()
                        .map_or(core::ptr::null(), |slice| slice.as_ptr()),
                ),
            )
            .ok()
        }
    }
    #[repr(C)]
    pub struct IDiaSourceFile_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub uniqueId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub fileName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub checksumType:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub compilands: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub get_checksum: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u32,
            *mut u8,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaStackFrame,
        IDiaStackFrame_Vtbl,
        0x5edbc96d_cdd6_4792_afbe_cc89007d9610
    );
    impl core::ops::Deref for IDiaStackFrame {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaStackFrame, windows_core::IUnknown);
    impl IDiaStackFrame {
        pub unsafe fn r#type(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).r#type)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn base(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).base)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn size(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).size)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn returnAddress(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).returnAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn localsBase(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).localsBase)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn lengthLocals(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).lengthLocals)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn lengthParams(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).lengthParams)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn lengthProlog(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).lengthProlog)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn lengthSavedRegisters(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).lengthSavedRegisters)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn systemExceptionHandling(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).systemExceptionHandling)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn cplusplusExceptionHandling(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).cplusplusExceptionHandling)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn functionStart(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).functionStart)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn allocatesBasePointer(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).allocatesBasePointer)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn maxStack(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).maxStack)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn get_registerValue(&self, index: u32) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).get_registerValue)(
                windows_core::Interface::as_raw(self),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[repr(C)]
    pub struct IDiaStackFrame_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub r#type:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub base:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
        pub size:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub returnAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
        pub localsBase:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
        pub lengthLocals:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub lengthParams:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub lengthProlog:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub lengthSavedRegisters:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub systemExceptionHandling: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub cplusplusExceptionHandling: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub functionStart: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub allocatesBasePointer: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub maxStack:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub get_registerValue: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u64,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaStackWalkFrame,
        IDiaStackWalkFrame_Vtbl,
        0x07c590c1_438d_4f47_bdcd_4397bc81ad75
    );
    impl core::ops::Deref for IDiaStackWalkFrame {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaStackWalkFrame, windows_core::IUnknown);
    impl IDiaStackWalkFrame {
        pub unsafe fn get_registerValue(&self, index: u32) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).get_registerValue)(
                windows_core::Interface::as_raw(self),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn put_registerValue(
            &self,
            index: u32,
            newval: u64,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).put_registerValue)(
                windows_core::Interface::as_raw(self),
                index,
                newval,
            )
            .ok()
        }
        pub unsafe fn readMemory(
            &self,
            r#type: MemoryTypeEnum,
            va: u64,
            pcbdata: *mut u32,
            pbdata: &mut [u8],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).readMemory)(
                windows_core::Interface::as_raw(self),
                r#type,
                va,
                pbdata.len().try_into().unwrap(),
                pcbdata,
                core::mem::transmute(pbdata.as_ptr()),
            )
            .ok()
        }
        pub unsafe fn searchForReturnAddress<P0>(&self, frame: P0) -> windows_core::Result<u64>
        where
            P0: windows_core::Param<IDiaFrameData>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).searchForReturnAddress)(
                windows_core::Interface::as_raw(self),
                frame.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn searchForReturnAddressStart<P0>(
            &self,
            frame: P0,
            startaddress: u64,
        ) -> windows_core::Result<u64>
        where
            P0: windows_core::Param<IDiaFrameData>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).searchForReturnAddressStart)(
                windows_core::Interface::as_raw(self),
                frame.param().abi(),
                startaddress,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[repr(C)]
    pub struct IDiaStackWalkFrame_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub get_registerValue: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u64,
        ) -> windows_core::HRESULT,
        pub put_registerValue:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32, u64) -> windows_core::HRESULT,
        pub readMemory: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            MemoryTypeEnum,
            u64,
            u32,
            *mut u32,
            *mut u8,
        ) -> windows_core::HRESULT,
        pub searchForReturnAddress: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut u64,
        ) -> windows_core::HRESULT,
        pub searchForReturnAddressStart: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            u64,
            *mut u64,
        )
            -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaStackWalkHelper,
        IDiaStackWalkHelper_Vtbl,
        0x21f81b1b_c5bb_42a3_bc4f_ccbaa75b9f19
    );
    impl core::ops::Deref for IDiaStackWalkHelper {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaStackWalkHelper, windows_core::IUnknown);
    impl IDiaStackWalkHelper {
        pub unsafe fn get_registerValue(&self, index: u32) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).get_registerValue)(
                windows_core::Interface::as_raw(self),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn put_registerValue(
            &self,
            index: u32,
            newval: u64,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).put_registerValue)(
                windows_core::Interface::as_raw(self),
                index,
                newval,
            )
            .ok()
        }
        pub unsafe fn readMemory(
            &self,
            r#type: MemoryTypeEnum,
            va: u64,
            pcbdata: *mut u32,
            pbdata: &mut [u8],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).readMemory)(
                windows_core::Interface::as_raw(self),
                r#type,
                va,
                pbdata.len().try_into().unwrap(),
                pcbdata,
                core::mem::transmute(pbdata.as_ptr()),
            )
            .ok()
        }
        pub unsafe fn searchForReturnAddress<P0>(&self, frame: P0) -> windows_core::Result<u64>
        where
            P0: windows_core::Param<IDiaFrameData>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).searchForReturnAddress)(
                windows_core::Interface::as_raw(self),
                frame.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn searchForReturnAddressStart<P0>(
            &self,
            frame: P0,
            startaddress: u64,
        ) -> windows_core::Result<u64>
        where
            P0: windows_core::Param<IDiaFrameData>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).searchForReturnAddressStart)(
                windows_core::Interface::as_raw(self),
                frame.param().abi(),
                startaddress,
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn frameForVA(&self, va: u64) -> windows_core::Result<IDiaFrameData> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).frameForVA)(
                windows_core::Interface::as_raw(self),
                va,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn symbolForVA(&self, va: u64) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).symbolForVA)(
                windows_core::Interface::as_raw(self),
                va,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn pdataForVA(
            &self,
            va: u64,
            pcbdata: *mut u32,
            pbdata: &mut [u8],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).pdataForVA)(
                windows_core::Interface::as_raw(self),
                va,
                pbdata.len().try_into().unwrap(),
                pcbdata,
                core::mem::transmute(pbdata.as_ptr()),
            )
            .ok()
        }
        pub unsafe fn imageForVA(&self, vacontext: u64) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).imageForVA)(
                windows_core::Interface::as_raw(self),
                vacontext,
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn addressForVA(
            &self,
            va: u64,
            pisect: *mut u32,
            poffset: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).addressForVA)(
                windows_core::Interface::as_raw(self),
                va,
                pisect,
                poffset,
            )
            .ok()
        }
        pub unsafe fn numberOfFunctionFragmentsForVA(
            &self,
            vafunc: u64,
            cbfunc: u32,
        ) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).numberOfFunctionFragmentsForVA)(
                windows_core::Interface::as_raw(self),
                vafunc,
                cbfunc,
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn functionFragmentsForVA(
            &self,
            vafunc: u64,
            cbfunc: u32,
            cfragments: u32,
            pvafragment: *mut u64,
            plenfragment: *mut u32,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).functionFragmentsForVA)(
                windows_core::Interface::as_raw(self),
                vafunc,
                cbfunc,
                cfragments,
                pvafragment,
                plenfragment,
            )
            .ok()
        }
    }
    #[repr(C)]
    pub struct IDiaStackWalkHelper_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub get_registerValue: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u64,
        ) -> windows_core::HRESULT,
        pub put_registerValue:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32, u64) -> windows_core::HRESULT,
        pub readMemory: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            MemoryTypeEnum,
            u64,
            u32,
            *mut u32,
            *mut u8,
        ) -> windows_core::HRESULT,
        pub searchForReturnAddress: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut u64,
        ) -> windows_core::HRESULT,
        pub searchForReturnAddressStart: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            u64,
            *mut u64,
        )
            -> windows_core::HRESULT,
        pub frameForVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub symbolForVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub pdataForVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            u32,
            *mut u32,
            *mut u8,
        ) -> windows_core::HRESULT,
        pub imageForVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            *mut u64,
        ) -> windows_core::HRESULT,
        pub addressForVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            *mut u32,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub numberOfFunctionFragmentsForVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            u32,
            *mut u32,
        )
            -> windows_core::HRESULT,
        pub functionFragmentsForVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            u32,
            u32,
            *mut u64,
            *mut u32,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaStackWalkHelper2,
        IDiaStackWalkHelper2_Vtbl,
        0x8222c490_507b_4bef_b3bd_41dca7b5934c
    );
    impl core::ops::Deref for IDiaStackWalkHelper2 {
        type Target = IDiaStackWalkHelper;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(
        IDiaStackWalkHelper2,
        windows_core::IUnknown,
        IDiaStackWalkHelper
    );
    impl IDiaStackWalkHelper2 {
        pub unsafe fn GetPointerAuthenticationMask(
            &self,
            ptrval: u64,
        ) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).GetPointerAuthenticationMask)(
                windows_core::Interface::as_raw(self),
                ptrval,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[repr(C)]
    pub struct IDiaStackWalkHelper2_Vtbl {
        pub base__: IDiaStackWalkHelper_Vtbl,
        pub GetPointerAuthenticationMask: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            *mut u64,
        )
            -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaStackWalker,
        IDiaStackWalker_Vtbl,
        0x5485216b_a54c_469f_9670_52b24d5229bb
    );
    impl core::ops::Deref for IDiaStackWalker {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaStackWalker, windows_core::IUnknown);
    impl IDiaStackWalker {
        pub unsafe fn getEnumFrames<P0>(
            &self,
            phelper: P0,
        ) -> windows_core::Result<IDiaEnumStackFrames>
        where
            P0: windows_core::Param<IDiaStackWalkHelper>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).getEnumFrames)(
                windows_core::Interface::as_raw(self),
                phelper.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn getEnumFrames2<P0>(
            &self,
            cpuid: CV_CPU_TYPE_e,
            phelper: P0,
        ) -> windows_core::Result<IDiaEnumStackFrames>
        where
            P0: windows_core::Param<IDiaStackWalkHelper>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).getEnumFrames2)(
                windows_core::Interface::as_raw(self),
                cpuid,
                phelper.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IDiaStackWalker_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub getEnumFrames: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub getEnumFrames2: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            CV_CPU_TYPE_e,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaStackWalker2,
        IDiaStackWalker2_Vtbl,
        0x7c185885_a015_4cac_9411_0f4fb39b1f3a
    );
    impl core::ops::Deref for IDiaStackWalker2 {
        type Target = IDiaStackWalker;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(
        IDiaStackWalker2,
        windows_core::IUnknown,
        IDiaStackWalker
    );
    impl IDiaStackWalker2 {}
    #[repr(C)]
    pub struct IDiaStackWalker2_Vtbl {
        pub base__: IDiaStackWalker_Vtbl,
    }
    windows_core::imp::define_interface!(
        IDiaSymbol,
        IDiaSymbol_Vtbl,
        0xcb787b2f_bd6c_4635_ba52_933126bd2dcd
    );
    impl core::ops::Deref for IDiaSymbol {
        type Target = windows_core::IUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaSymbol, windows_core::IUnknown);
    impl IDiaSymbol {
        pub unsafe fn symIndexId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).symIndexId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn symTag(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).symTag)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn name(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).name)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn lexicalParent(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).lexicalParent)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn classParent(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).classParent)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn r#type(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).r#type)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn dataKind(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).dataKind)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn locationType(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).locationType)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn addressSection(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).addressSection)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn addressOffset(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).addressOffset)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn relativeVirtualAddress(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).relativeVirtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn virtualAddress(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).virtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn registerId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).registerId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn offset(&self) -> windows_core::Result<i32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).offset)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn length(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).length)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn slot(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).slot)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn volatileType(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).volatileType)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn constType(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).constType)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn unalignedType(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).unalignedType)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn access(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).access)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn libraryName(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).libraryName)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn platform(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).platform)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn language(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).language)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn editAndContinueEnabled(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).editAndContinueEnabled)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn frontEndMajor(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).frontEndMajor)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn frontEndMinor(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).frontEndMinor)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn frontEndBuild(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).frontEndBuild)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn backEndMajor(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).backEndMajor)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn backEndMinor(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).backEndMinor)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn backEndBuild(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).backEndBuild)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn sourceFileName(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).sourceFileName)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn unused(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).unused)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn thunkOrdinal(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).thunkOrdinal)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn thisAdjust(&self) -> windows_core::Result<i32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).thisAdjust)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn virtualBaseOffset(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).virtualBaseOffset)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn r#virtual(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).r#virtual)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn intro(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).intro)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn pure(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).pure)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn callingConvention(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).callingConvention)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn value(&self) -> windows_core::Result<windows_core::VARIANT> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).value)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn baseType(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).baseType)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn token(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).token)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn timeStamp(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).timeStamp)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn guid(&self) -> windows_core::Result<windows_core::GUID> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).guid)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn symbolsFileName(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).symbolsFileName)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn reference(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).reference)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn count(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).count)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn bitPosition(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).bitPosition)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn arrayIndexType(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).arrayIndexType)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn packed(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).packed)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn constructor(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).constructor)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn overloadedOperator(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).overloadedOperator)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn nested(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).nested)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn hasNestedTypes(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hasNestedTypes)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn hasAssignmentOperator(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hasAssignmentOperator)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn hasCastOperator(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hasCastOperator)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn scoped(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).scoped)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn virtualBaseClass(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).virtualBaseClass)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn indirectVirtualBaseClass(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).indirectVirtualBaseClass)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn virtualBasePointerOffset(&self) -> windows_core::Result<i32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).virtualBasePointerOffset)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn virtualTableShape(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).virtualTableShape)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn lexicalParentId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).lexicalParentId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn classParentId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).classParentId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn typeId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).typeId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn arrayIndexTypeId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).arrayIndexTypeId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn virtualTableShapeId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).virtualTableShapeId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn code(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).code)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn function(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).function)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn managed(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).managed)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn msil(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).msil)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn virtualBaseDispIndex(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).virtualBaseDispIndex)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn undecoratedName(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).undecoratedName)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn age(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).age)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn signature(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).signature)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn compilerGenerated(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).compilerGenerated)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn addressTaken(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).addressTaken)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn rank(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).rank)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn lowerBound(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).lowerBound)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn upperBound(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).upperBound)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn lowerBoundId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).lowerBoundId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn upperBoundId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).upperBoundId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn get_dataBytes(
            &self,
            pcbdata: *mut u32,
            pbdata: &mut [u8],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).get_dataBytes)(
                windows_core::Interface::as_raw(self),
                pbdata.len().try_into().unwrap(),
                pcbdata,
                core::mem::transmute(pbdata.as_ptr()),
            )
            .ok()
        }
        pub unsafe fn findChildren<P0>(
            &self,
            symtag: SymTag,
            name: P0,
            compareflags: u32,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findChildren)(
                windows_core::Interface::as_raw(self),
                symtag,
                name.param().abi(),
                compareflags,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findChildrenEx<P0>(
            &self,
            symtag: SymTag,
            name: P0,
            compareflags: u32,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findChildrenEx)(
                windows_core::Interface::as_raw(self),
                symtag,
                name.param().abi(),
                compareflags,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findChildrenExByAddr<P0>(
            &self,
            symtag: SymTag,
            name: P0,
            compareflags: u32,
            isect: u32,
            offset: u32,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findChildrenExByAddr)(
                windows_core::Interface::as_raw(self),
                symtag,
                name.param().abi(),
                compareflags,
                isect,
                offset,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findChildrenExByVA<P0>(
            &self,
            symtag: SymTag,
            name: P0,
            compareflags: u32,
            va: u64,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findChildrenExByVA)(
                windows_core::Interface::as_raw(self),
                symtag,
                name.param().abi(),
                compareflags,
                va,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findChildrenExByRVA<P0>(
            &self,
            symtag: SymTag,
            name: P0,
            compareflags: u32,
            rva: u32,
        ) -> windows_core::Result<IDiaEnumSymbols>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findChildrenExByRVA)(
                windows_core::Interface::as_raw(self),
                symtag,
                name.param().abi(),
                compareflags,
                rva,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn targetSection(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).targetSection)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn targetOffset(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).targetOffset)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn targetRelativeVirtualAddress(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).targetRelativeVirtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn targetVirtualAddress(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).targetVirtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn machineType(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).machineType)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn oemId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).oemId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn oemSymbolId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).oemSymbolId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn get_types(
            &self,
            pctypes: *mut u32,
            ptypes: &mut [Option<IDiaSymbol>],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).get_types)(
                windows_core::Interface::as_raw(self),
                ptypes.len().try_into().unwrap(),
                pctypes,
                core::mem::transmute(ptypes.as_ptr()),
            )
            .ok()
        }
        pub unsafe fn get_typeIds(
            &self,
            pctypeids: *mut u32,
            pdwtypeids: &mut [u32],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).get_typeIds)(
                windows_core::Interface::as_raw(self),
                pdwtypeids.len().try_into().unwrap(),
                pctypeids,
                core::mem::transmute(pdwtypeids.as_ptr()),
            )
            .ok()
        }
        pub unsafe fn objectPointerType(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).objectPointerType)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn udtKind(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).udtKind)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn get_undecoratedNameEx(
            &self,
            undecorateoptions: u32,
        ) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).get_undecoratedNameEx)(
                windows_core::Interface::as_raw(self),
                undecorateoptions,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn noReturn(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).noReturn)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn customCallingConvention(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).customCallingConvention)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn noInline(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).noInline)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn optimizedCodeDebugInfo(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).optimizedCodeDebugInfo)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn notReached(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).notReached)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn interruptReturn(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).interruptReturn)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn farReturn(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).farReturn)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isStatic(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isStatic)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn hasDebugInfo(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hasDebugInfo)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isLTCG(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isLTCG)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isDataAligned(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isDataAligned)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn hasSecurityChecks(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hasSecurityChecks)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn compilerName(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).compilerName)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn hasAlloca(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hasAlloca)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn hasSetJump(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hasSetJump)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn hasLongJump(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hasLongJump)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn hasInlAsm(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hasInlAsm)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn hasEH(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hasEH)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn hasSEH(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hasSEH)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn hasEHa(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hasEHa)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isNaked(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isNaked)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isAggregated(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isAggregated)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isSplitted(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isSplitted)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn container(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).container)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn inlSpec(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).inlSpec)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn noStackOrdering(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).noStackOrdering)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn virtualBaseTableType(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).virtualBaseTableType)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn hasManagedCode(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hasManagedCode)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isHotpatchable(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isHotpatchable)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isCVTCIL(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isCVTCIL)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isMSILNetmodule(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isMSILNetmodule)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isCTypes(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isCTypes)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isStripped(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isStripped)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn frontEndQFE(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).frontEndQFE)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn backEndQFE(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).backEndQFE)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn wasInlined(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).wasInlined)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn strictGSCheck(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).strictGSCheck)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isCxxReturnUdt(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isCxxReturnUdt)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isConstructorVirtualBase(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isConstructorVirtualBase)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn RValueReference(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).RValueReference)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn unmodifiedType(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).unmodifiedType)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn framePointerPresent(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).framePointerPresent)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isSafeBuffers(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isSafeBuffers)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn intrinsic(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).intrinsic)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn sealed(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).sealed)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn hfaFloat(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hfaFloat)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn hfaDouble(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hfaDouble)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn liveRangeStartAddressSection(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).liveRangeStartAddressSection)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn liveRangeStartAddressOffset(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).liveRangeStartAddressOffset)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn liveRangeStartRelativeVirtualAddress(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).liveRangeStartRelativeVirtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn countLiveRanges(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).countLiveRanges)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn liveRangeLength(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).liveRangeLength)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn offsetInUdt(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).offsetInUdt)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn paramBasePointerRegisterId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).paramBasePointerRegisterId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn localBasePointerRegisterId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).localBasePointerRegisterId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isLocationControlFlowDependent(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isLocationControlFlowDependent)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn stride(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).stride)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn numberOfRows(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).numberOfRows)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn numberOfColumns(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).numberOfColumns)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isMatrixRowMajor(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isMatrixRowMajor)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn get_numericProperties(
            &self,
            pcnt: *mut u32,
            pproperties: &mut [u32],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).get_numericProperties)(
                windows_core::Interface::as_raw(self),
                pproperties.len().try_into().unwrap(),
                pcnt,
                core::mem::transmute(pproperties.as_ptr()),
            )
            .ok()
        }
        pub unsafe fn get_modifierValues(
            &self,
            pcnt: *mut u32,
            pmodifiers: &mut [u16],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).get_modifierValues)(
                windows_core::Interface::as_raw(self),
                pmodifiers.len().try_into().unwrap(),
                pcnt,
                core::mem::transmute(pmodifiers.as_ptr()),
            )
            .ok()
        }
        pub unsafe fn isReturnValue(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isReturnValue)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isOptimizedAway(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isOptimizedAway)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn builtInKind(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).builtInKind)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn registerType(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).registerType)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn baseDataSlot(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).baseDataSlot)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn baseDataOffset(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).baseDataOffset)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn textureSlot(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).textureSlot)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn samplerSlot(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).samplerSlot)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn uavSlot(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).uavSlot)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn sizeInUdt(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).sizeInUdt)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn memorySpaceKind(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).memorySpaceKind)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn unmodifiedTypeId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).unmodifiedTypeId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn subTypeId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).subTypeId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn subType(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).subType)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn numberOfModifiers(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).numberOfModifiers)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn numberOfRegisterIndices(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).numberOfRegisterIndices)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isHLSLData(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isHLSLData)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isPointerToDataMember(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isPointerToDataMember)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isPointerToMemberFunction(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isPointerToMemberFunction)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isSingleInheritance(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isSingleInheritance)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isMultipleInheritance(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isMultipleInheritance)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isVirtualInheritance(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isVirtualInheritance)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn restrictedType(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).restrictedType)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isPointerBasedOnSymbolValue(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isPointerBasedOnSymbolValue)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn baseSymbol(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).baseSymbol)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn baseSymbolId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).baseSymbolId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn objectFileName(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).objectFileName)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn isAcceleratorGroupSharedLocal(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isAcceleratorGroupSharedLocal)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isAcceleratorPointerTagLiveRange(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isAcceleratorPointerTagLiveRange)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isAcceleratorStubFunction(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isAcceleratorStubFunction)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn numberOfAcceleratorPointerTags(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).numberOfAcceleratorPointerTags)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isSdl(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isSdl)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isWinRTPointer(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isWinRTPointer)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isRefUdt(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isRefUdt)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isValueUdt(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isValueUdt)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isInterfaceUdt(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isInterfaceUdt)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn findInlineFramesByAddr(
            &self,
            isect: u32,
            offset: u32,
        ) -> windows_core::Result<IDiaEnumSymbols> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInlineFramesByAddr)(
                windows_core::Interface::as_raw(self),
                isect,
                offset,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInlineFramesByRVA(
            &self,
            rva: u32,
        ) -> windows_core::Result<IDiaEnumSymbols> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInlineFramesByRVA)(
                windows_core::Interface::as_raw(self),
                rva,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInlineFramesByVA(
            &self,
            va: u64,
        ) -> windows_core::Result<IDiaEnumSymbols> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInlineFramesByVA)(
                windows_core::Interface::as_raw(self),
                va,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInlineeLines(&self) -> windows_core::Result<IDiaEnumLineNumbers> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInlineeLines)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInlineeLinesByAddr(
            &self,
            isect: u32,
            offset: u32,
            length: u32,
        ) -> windows_core::Result<IDiaEnumLineNumbers> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInlineeLinesByAddr)(
                windows_core::Interface::as_raw(self),
                isect,
                offset,
                length,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInlineeLinesByRVA(
            &self,
            rva: u32,
            length: u32,
        ) -> windows_core::Result<IDiaEnumLineNumbers> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInlineeLinesByRVA)(
                windows_core::Interface::as_raw(self),
                rva,
                length,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findInlineeLinesByVA(
            &self,
            va: u64,
            length: u32,
        ) -> windows_core::Result<IDiaEnumLineNumbers> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInlineeLinesByVA)(
                windows_core::Interface::as_raw(self),
                va,
                length,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findSymbolsForAcceleratorPointerTag(
            &self,
            tagvalue: u32,
        ) -> windows_core::Result<IDiaEnumSymbols> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findSymbolsForAcceleratorPointerTag)(
                windows_core::Interface::as_raw(self),
                tagvalue,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn findSymbolsByRVAForAcceleratorPointerTag(
            &self,
            tagvalue: u32,
            rva: u32,
        ) -> windows_core::Result<IDiaEnumSymbols> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findSymbolsByRVAForAcceleratorPointerTag)(
                windows_core::Interface::as_raw(self),
                tagvalue,
                rva,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn get_acceleratorPointerTags(
            &self,
            pcnt: *mut u32,
            ppointertags: &mut [u32],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).get_acceleratorPointerTags)(
                windows_core::Interface::as_raw(self),
                ppointertags.len().try_into().unwrap(),
                pcnt,
                core::mem::transmute(ppointertags.as_ptr()),
            )
            .ok()
        }
        pub unsafe fn getSrcLineOnTypeDefn(&self) -> windows_core::Result<IDiaLineNumber> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).getSrcLineOnTypeDefn)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn isPGO(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isPGO)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn hasValidPGOCounts(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hasValidPGOCounts)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isOptimizedForSpeed(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isOptimizedForSpeed)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn PGOEntryCount(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).PGOEntryCount)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn PGOEdgeCount(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).PGOEdgeCount)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn PGODynamicInstructionCount(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).PGODynamicInstructionCount)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn staticSize(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).staticSize)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn finalLiveStaticSize(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).finalLiveStaticSize)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn phaseName(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).phaseName)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn hasControlFlowCheck(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hasControlFlowCheck)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn constantExport(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).constantExport)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn dataExport(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).dataExport)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn privateExport(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).privateExport)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn noNameExport(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).noNameExport)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn exportHasExplicitlyAssignedOrdinal(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).exportHasExplicitlyAssignedOrdinal)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn exportIsForwarder(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).exportIsForwarder)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn ordinal(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).ordinal)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn frameSize(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).frameSize)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn exceptionHandlerAddressSection(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).exceptionHandlerAddressSection)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn exceptionHandlerAddressOffset(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).exceptionHandlerAddressOffset)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn exceptionHandlerRelativeVirtualAddress(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).exceptionHandlerRelativeVirtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn exceptionHandlerVirtualAddress(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).exceptionHandlerVirtualAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn findInputAssemblyFile(&self) -> windows_core::Result<IDiaInputAssemblyFile> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).findInputAssemblyFile)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn characteristics(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).characteristics)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn coffGroup(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).coffGroup)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn bindID(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).bindID)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn bindSpace(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).bindSpace)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn bindSlot(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).bindSlot)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[repr(C)]
    pub struct IDiaSymbol_Vtbl {
        pub base__: windows_core::IUnknown_Vtbl,
        pub symIndexId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub symTag:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub name: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub lexicalParent: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub classParent: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub r#type: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub dataKind:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub locationType:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub addressSection:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub addressOffset:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub relativeVirtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub virtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
        pub registerId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub offset:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
        pub length:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
        pub slot:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub volatileType: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub constType: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub unalignedType: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub access:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub libraryName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub platform:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub language:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub editAndContinueEnabled: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub frontEndMajor:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub frontEndMinor:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub frontEndBuild:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub backEndMajor:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub backEndMinor:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub backEndBuild:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub sourceFileName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub unused: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub thunkOrdinal:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub thisAdjust:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
        pub virtualBaseOffset:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub r#virtual: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub intro: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub pure: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub callingConvention:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub value: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::VARIANT>,
        ) -> windows_core::HRESULT,
        pub baseType:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub token:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub timeStamp:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub guid: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows_core::GUID,
        ) -> windows_core::HRESULT,
        pub symbolsFileName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub reference: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub count:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub bitPosition:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub arrayIndexType: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub packed: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub constructor: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub overloadedOperator: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub nested: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub hasNestedTypes: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub hasAssignmentOperator: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub hasCastOperator: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub scoped: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub virtualBaseClass: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub indirectVirtualBaseClass: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub virtualBasePointerOffset:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
        pub virtualTableShape: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub lexicalParentId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub classParentId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub typeId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub arrayIndexTypeId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub virtualTableShapeId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub code: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub function: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub managed: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub msil: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub virtualBaseDispIndex:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub undecoratedName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub age:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub signature:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub compilerGenerated: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub addressTaken: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub rank:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub lowerBound: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub upperBound: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub lowerBoundId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub upperBoundId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub get_dataBytes: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u32,
            *mut u8,
        ) -> windows_core::HRESULT,
        pub findChildren: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            SymTag,
            windows_core::PCWSTR,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findChildrenEx: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            SymTag,
            windows_core::PCWSTR,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findChildrenExByAddr: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            SymTag,
            windows_core::PCWSTR,
            u32,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findChildrenExByVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            SymTag,
            windows_core::PCWSTR,
            u32,
            u64,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findChildrenExByRVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            SymTag,
            windows_core::PCWSTR,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub targetSection:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub targetOffset:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub targetRelativeVirtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub targetVirtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
        pub machineType:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub oemId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub oemSymbolId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub get_types: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub get_typeIds: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u32,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub objectPointerType: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub udtKind:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub get_undecoratedNameEx: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub noReturn: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub customCallingConvention: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub noInline: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub optimizedCodeDebugInfo: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub notReached: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub interruptReturn: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub farReturn: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isStatic: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub hasDebugInfo: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isLTCG: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isDataAligned: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub hasSecurityChecks: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub compilerName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub hasAlloca: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub hasSetJump: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub hasLongJump: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub hasInlAsm: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub hasEH: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub hasSEH: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub hasEHa: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isNaked: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isAggregated: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isSplitted: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub container: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub inlSpec: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub noStackOrdering: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub virtualBaseTableType: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub hasManagedCode: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isHotpatchable: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isCVTCIL: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isMSILNetmodule: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isCTypes: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isStripped: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub frontEndQFE:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub backEndQFE:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub wasInlined: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub strictGSCheck: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isCxxReturnUdt: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isConstructorVirtualBase: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub RValueReference: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub unmodifiedType: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub framePointerPresent: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isSafeBuffers: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub intrinsic: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub sealed: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub hfaFloat: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub hfaDouble: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub liveRangeStartAddressSection:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub liveRangeStartAddressOffset:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub liveRangeStartRelativeVirtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub countLiveRanges:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub liveRangeLength:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
        pub offsetInUdt:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub paramBasePointerRegisterId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub localBasePointerRegisterId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub isLocationControlFlowDependent: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        )
            -> windows_core::HRESULT,
        pub stride:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub numberOfRows:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub numberOfColumns:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub isMatrixRowMajor: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub get_numericProperties: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u32,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub get_modifierValues: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u32,
            *mut u16,
        ) -> windows_core::HRESULT,
        pub isReturnValue: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isOptimizedAway: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub builtInKind:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub registerType:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub baseDataSlot:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub baseDataOffset:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub textureSlot:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub samplerSlot:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub uavSlot:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub sizeInUdt:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub memorySpaceKind:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub unmodifiedTypeId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub subTypeId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub subType: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub numberOfModifiers:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub numberOfRegisterIndices:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub isHLSLData: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isPointerToDataMember: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isPointerToMemberFunction: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isSingleInheritance: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isMultipleInheritance: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isVirtualInheritance: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub restrictedType: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isPointerBasedOnSymbolValue: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        )
            -> windows_core::HRESULT,
        pub baseSymbol: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub baseSymbolId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub objectFileName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub isAcceleratorGroupSharedLocal: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        )
            -> windows_core::HRESULT,
        pub isAcceleratorPointerTagLiveRange: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        )
            -> windows_core::HRESULT,
        pub isAcceleratorStubFunction: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub numberOfAcceleratorPointerTags:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub isSdl: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isWinRTPointer: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isRefUdt: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isValueUdt: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isInterfaceUdt: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub findInlineFramesByAddr: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInlineFramesByRVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInlineFramesByVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInlineeLines: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInlineeLinesByAddr: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInlineeLinesByRVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findInlineeLinesByVA: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u64,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub findSymbolsForAcceleratorPointerTag: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        )
            -> windows_core::HRESULT,
        pub findSymbolsByRVAForAcceleratorPointerTag:
            unsafe extern "system" fn(
                *mut core::ffi::c_void,
                u32,
                u32,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
        pub get_acceleratorPointerTags: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u32,
            *mut u32,
        ) -> windows_core::HRESULT,
        pub getSrcLineOnTypeDefn: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub isPGO: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub hasValidPGOCounts: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isOptimizedForSpeed: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub PGOEntryCount:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub PGOEdgeCount:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub PGODynamicInstructionCount:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
        pub staticSize:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub finalLiveStaticSize:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub phaseName: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub hasControlFlowCheck: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub constantExport: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub dataExport: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub privateExport: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub noNameExport: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub exportHasExplicitlyAssignedOrdinal: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        )
            -> windows_core::HRESULT,
        pub exportIsForwarder: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub ordinal:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub frameSize:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub exceptionHandlerAddressSection:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub exceptionHandlerAddressOffset:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub exceptionHandlerRelativeVirtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub exceptionHandlerVirtualAddress:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
        pub findInputAssemblyFile: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub characteristics:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub coffGroup: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub bindID:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub bindSpace:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub bindSlot:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaSymbol10,
        IDiaSymbol10_Vtbl,
        0x9034a70b_b0b7_4605_8a97_33772f3a7b8c
    );
    impl core::ops::Deref for IDiaSymbol10 {
        type Target = IDiaSymbol9;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(
        IDiaSymbol10,
        windows_core::IUnknown,
        IDiaSymbol,
        IDiaSymbol2,
        IDiaSymbol3,
        IDiaSymbol4,
        IDiaSymbol5,
        IDiaSymbol6,
        IDiaSymbol7,
        IDiaSymbol8,
        IDiaSymbol9
    );
    impl IDiaSymbol10 {
        pub unsafe fn get_sourceLink(
            &self,
            pcb: *mut u32,
            pb: Option<&mut [u8]>,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).get_sourceLink)(
                windows_core::Interface::as_raw(self),
                pb.as_deref()
                    .map_or(0, |slice| slice.len().try_into().unwrap()),
                pcb,
                core::mem::transmute(
                    pb.as_deref()
                        .map_or(core::ptr::null(), |slice| slice.as_ptr()),
                ),
            )
            .ok()
        }
    }
    #[repr(C)]
    pub struct IDiaSymbol10_Vtbl {
        pub base__: IDiaSymbol9_Vtbl,
        pub get_sourceLink: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u32,
            *mut u8,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaSymbol11,
        IDiaSymbol11_Vtbl,
        0xb6f54fcd_05e3_433d_b305_b0c1437d2d16
    );
    impl core::ops::Deref for IDiaSymbol11 {
        type Target = IDiaSymbol10;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(
        IDiaSymbol11,
        windows_core::IUnknown,
        IDiaSymbol,
        IDiaSymbol2,
        IDiaSymbol3,
        IDiaSymbol4,
        IDiaSymbol5,
        IDiaSymbol6,
        IDiaSymbol7,
        IDiaSymbol8,
        IDiaSymbol9,
        IDiaSymbol10
    );
    impl IDiaSymbol11 {
        pub unsafe fn get_discriminatedUnionTag(
            &self,
            pptagtype: *mut Option<IDiaSymbol>,
            ptagoffset: *mut u32,
            ptagmask: *mut DiaTagValue,
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).get_discriminatedUnionTag)(
                windows_core::Interface::as_raw(self),
                core::mem::transmute(pptagtype),
                ptagoffset,
                ptagmask,
            )
            .ok()
        }
        pub unsafe fn get_tagRanges(
            &self,
            pcrangevalues: *mut u32,
            rangevalues: &mut [DiaTagValue],
        ) -> windows_core::Result<()> {
            (windows_core::Interface::vtable(self).get_tagRanges)(
                windows_core::Interface::as_raw(self),
                rangevalues.len().try_into().unwrap(),
                pcrangevalues,
                core::mem::transmute(rangevalues.as_ptr()),
            )
            .ok()
        }
    }
    #[repr(C)]
    pub struct IDiaSymbol11_Vtbl {
        pub base__: IDiaSymbol10_Vtbl,
        pub get_discriminatedUnionTag: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
            *mut u32,
            *mut DiaTagValue,
        ) -> windows_core::HRESULT,
        pub get_tagRanges: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut u32,
            *mut DiaTagValue,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaSymbol2,
        IDiaSymbol2_Vtbl,
        0x611e86cd_b7d1_4546_8a15_070e2b07a427
    );
    impl core::ops::Deref for IDiaSymbol2 {
        type Target = IDiaSymbol;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(IDiaSymbol2, windows_core::IUnknown, IDiaSymbol);
    impl IDiaSymbol2 {
        pub unsafe fn isObjCClass(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isObjCClass)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isObjCCategory(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isObjCCategory)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isObjCProtocol(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isObjCProtocol)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[repr(C)]
    pub struct IDiaSymbol2_Vtbl {
        pub base__: IDiaSymbol_Vtbl,
        pub isObjCClass: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isObjCCategory: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
        pub isObjCProtocol: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaSymbol3,
        IDiaSymbol3_Vtbl,
        0x99b665f7_c1b2_49d3_89b2_a384361acab5
    );
    impl core::ops::Deref for IDiaSymbol3 {
        type Target = IDiaSymbol2;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(
        IDiaSymbol3,
        windows_core::IUnknown,
        IDiaSymbol,
        IDiaSymbol2
    );
    impl IDiaSymbol3 {
        pub unsafe fn inlinee(&self) -> windows_core::Result<IDiaSymbol> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).inlinee)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn inlineeId(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).inlineeId)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[repr(C)]
    pub struct IDiaSymbol3_Vtbl {
        pub base__: IDiaSymbol2_Vtbl,
        pub inlinee: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub inlineeId:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaSymbol4,
        IDiaSymbol4_Vtbl,
        0xbf6c88a7_e9d6_4346_99a1_d053de5a7808
    );
    impl core::ops::Deref for IDiaSymbol4 {
        type Target = IDiaSymbol3;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(
        IDiaSymbol4,
        windows_core::IUnknown,
        IDiaSymbol,
        IDiaSymbol2,
        IDiaSymbol3
    );
    impl IDiaSymbol4 {
        pub unsafe fn noexcept(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).noexcept)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[repr(C)]
    pub struct IDiaSymbol4_Vtbl {
        pub base__: IDiaSymbol3_Vtbl,
        pub noexcept: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaSymbol5,
        IDiaSymbol5_Vtbl,
        0xabe2de00_dc2d_4793_af9a_ef1d90832644
    );
    impl core::ops::Deref for IDiaSymbol5 {
        type Target = IDiaSymbol4;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(
        IDiaSymbol5,
        windows_core::IUnknown,
        IDiaSymbol,
        IDiaSymbol2,
        IDiaSymbol3,
        IDiaSymbol4
    );
    impl IDiaSymbol5 {
        pub unsafe fn hasAbsoluteAddress(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).hasAbsoluteAddress)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[repr(C)]
    pub struct IDiaSymbol5_Vtbl {
        pub base__: IDiaSymbol4_Vtbl,
        pub hasAbsoluteAddress: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaSymbol6,
        IDiaSymbol6_Vtbl,
        0x8133dad3_75fe_4234_ac7e_f8e7a1d3cbb3
    );
    impl core::ops::Deref for IDiaSymbol6 {
        type Target = IDiaSymbol5;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(
        IDiaSymbol6,
        windows_core::IUnknown,
        IDiaSymbol,
        IDiaSymbol2,
        IDiaSymbol3,
        IDiaSymbol4,
        IDiaSymbol5
    );
    impl IDiaSymbol6 {
        pub unsafe fn isStaticMemberFunc(
            &self,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isStaticMemberFunc)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[repr(C)]
    pub struct IDiaSymbol6_Vtbl {
        pub base__: IDiaSymbol5_Vtbl,
        pub isStaticMemberFunc: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaSymbol7,
        IDiaSymbol7_Vtbl,
        0x64ce6cd5_7315_4328_86d6_10e303e010b4
    );
    impl core::ops::Deref for IDiaSymbol7 {
        type Target = IDiaSymbol6;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(
        IDiaSymbol7,
        windows_core::IUnknown,
        IDiaSymbol,
        IDiaSymbol2,
        IDiaSymbol3,
        IDiaSymbol4,
        IDiaSymbol5,
        IDiaSymbol6
    );
    impl IDiaSymbol7 {
        pub unsafe fn isSignRet(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isSignRet)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[repr(C)]
    pub struct IDiaSymbol7_Vtbl {
        pub base__: IDiaSymbol6_Vtbl,
        pub isSignRet: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaSymbol8,
        IDiaSymbol8_Vtbl,
        0x7f2e041f_1294_41bd_b83a_e715972d2ce3
    );
    impl core::ops::Deref for IDiaSymbol8 {
        type Target = IDiaSymbol7;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(
        IDiaSymbol8,
        windows_core::IUnknown,
        IDiaSymbol,
        IDiaSymbol2,
        IDiaSymbol3,
        IDiaSymbol4,
        IDiaSymbol5,
        IDiaSymbol6,
        IDiaSymbol7
    );
    impl IDiaSymbol8 {
        pub unsafe fn coroutineKind(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).coroutineKind)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn associatedSymbolKind(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).associatedSymbolKind)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn associatedSymbolSection(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).associatedSymbolSection)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn associatedSymbolOffset(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).associatedSymbolOffset)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn associatedSymbolRva(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).associatedSymbolRva)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn associatedSymbolAddr(&self) -> windows_core::Result<u64> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).associatedSymbolAddr)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[repr(C)]
    pub struct IDiaSymbol8_Vtbl {
        pub base__: IDiaSymbol7_Vtbl,
        pub coroutineKind:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub associatedSymbolKind:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub associatedSymbolSection:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub associatedSymbolOffset:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub associatedSymbolRva:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub associatedSymbolAddr:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaSymbol9,
        IDiaSymbol9_Vtbl,
        0xa89e5969_92a1_4f8a_b704_00121c37abbb
    );
    impl core::ops::Deref for IDiaSymbol9 {
        type Target = IDiaSymbol8;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(
        IDiaSymbol9,
        windows_core::IUnknown,
        IDiaSymbol,
        IDiaSymbol2,
        IDiaSymbol3,
        IDiaSymbol4,
        IDiaSymbol5,
        IDiaSymbol6,
        IDiaSymbol7,
        IDiaSymbol8
    );
    impl IDiaSymbol9 {
        pub unsafe fn framePadSize(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).framePadSize)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn framePadOffset(&self) -> windows_core::Result<u32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).framePadOffset)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn isRTCs(&self) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).isRTCs)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[repr(C)]
    pub struct IDiaSymbol9_Vtbl {
        pub base__: IDiaSymbol8_Vtbl,
        pub framePadSize:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub framePadOffset:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub isRTCs: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::HRESULT,
    }
    windows_core::imp::define_interface!(
        IDiaTable,
        IDiaTable_Vtbl,
        0x4a59fb77_abac_469b_a30b_9ecc85bfef14
    );
    impl core::ops::Deref for IDiaTable {
        type Target = windows::Win32::System::Com::IEnumUnknown;
        fn deref(&self) -> &Self::Target {
            unsafe { core::mem::transmute(self) }
        }
    }
    windows_core::imp::interface_hierarchy!(
        IDiaTable,
        windows_core::IUnknown,
        windows::Win32::System::Com::IEnumUnknown
    );
    impl IDiaTable {
        pub unsafe fn _NewEnum(&self) -> windows_core::Result<windows_core::IUnknown> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self)._NewEnum)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn name(&self) -> windows_core::Result<windows_core::BSTR> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).name)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
        pub unsafe fn Count(&self) -> windows_core::Result<i32> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Count)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
        pub unsafe fn Item(&self, index: u32) -> windows_core::Result<windows_core::IUnknown> {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).Item)(
                windows_core::Interface::as_raw(self),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IDiaTable_Vtbl {
        pub base__: windows::Win32::System::Com::IEnumUnknown_Vtbl,
        pub _NewEnum: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub name: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::mem::MaybeUninit<windows_core::BSTR>,
        ) -> windows_core::HRESULT,
        pub Count:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
        pub Item: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
    pub const CHKSUM_TYPE_MD5: CV_SourceChksum_t = CV_SourceChksum_t(1i32);
    pub const CHKSUM_TYPE_NONE: CV_SourceChksum_t = CV_SourceChksum_t(0i32);
    pub const CHKSUM_TYPE_SHA1: CV_SourceChksum_t = CV_SourceChksum_t(2i32);
    pub const CHKSUM_TYPE_SHA_256: CV_SourceChksum_t = CV_SourceChksum_t(3i32);
    pub const CV_ALLREG_CMDLN: CV_HREG_e = CV_HREG_e(30012i32);
    pub const CV_ALLREG_EFAD1: CV_HREG_e = CV_HREG_e(30003i32);
    pub const CV_ALLREG_EFAD2: CV_HREG_e = CV_HREG_e(30004i32);
    pub const CV_ALLREG_EFAD3: CV_HREG_e = CV_HREG_e(30005i32);
    pub const CV_ALLREG_ENV: CV_HREG_e = CV_HREG_e(30011i32);
    pub const CV_ALLREG_ERR: CV_HREG_e = CV_HREG_e(30000i32);
    pub const CV_ALLREG_HANDLE: CV_HREG_e = CV_HREG_e(30007i32);
    pub const CV_ALLREG_LOCALS: CV_HREG_e = CV_HREG_e(30009i32);
    pub const CV_ALLREG_PARAMS: CV_HREG_e = CV_HREG_e(30008i32);
    pub const CV_ALLREG_TEB: CV_HREG_e = CV_HREG_e(30001i32);
    pub const CV_ALLREG_TID: CV_HREG_e = CV_HREG_e(30010i32);
    pub const CV_ALLREG_TIMER: CV_HREG_e = CV_HREG_e(30002i32);
    pub const CV_ALLREG_VFRAME: CV_HREG_e = CV_HREG_e(30006i32);
    pub const CV_ALPHA_Fir: CV_HREG_e = CV_HREG_e(75i32);
    pub const CV_ALPHA_FltF0: CV_HREG_e = CV_HREG_e(10i32);
    pub const CV_ALPHA_FltF1: CV_HREG_e = CV_HREG_e(11i32);
    pub const CV_ALPHA_FltF10: CV_HREG_e = CV_HREG_e(20i32);
    pub const CV_ALPHA_FltF11: CV_HREG_e = CV_HREG_e(21i32);
    pub const CV_ALPHA_FltF12: CV_HREG_e = CV_HREG_e(22i32);
    pub const CV_ALPHA_FltF13: CV_HREG_e = CV_HREG_e(23i32);
    pub const CV_ALPHA_FltF14: CV_HREG_e = CV_HREG_e(24i32);
    pub const CV_ALPHA_FltF15: CV_HREG_e = CV_HREG_e(25i32);
    pub const CV_ALPHA_FltF16: CV_HREG_e = CV_HREG_e(26i32);
    pub const CV_ALPHA_FltF17: CV_HREG_e = CV_HREG_e(27i32);
    pub const CV_ALPHA_FltF18: CV_HREG_e = CV_HREG_e(28i32);
    pub const CV_ALPHA_FltF19: CV_HREG_e = CV_HREG_e(29i32);
    pub const CV_ALPHA_FltF2: CV_HREG_e = CV_HREG_e(12i32);
    pub const CV_ALPHA_FltF20: CV_HREG_e = CV_HREG_e(30i32);
    pub const CV_ALPHA_FltF21: CV_HREG_e = CV_HREG_e(31i32);
    pub const CV_ALPHA_FltF22: CV_HREG_e = CV_HREG_e(32i32);
    pub const CV_ALPHA_FltF23: CV_HREG_e = CV_HREG_e(33i32);
    pub const CV_ALPHA_FltF24: CV_HREG_e = CV_HREG_e(34i32);
    pub const CV_ALPHA_FltF25: CV_HREG_e = CV_HREG_e(35i32);
    pub const CV_ALPHA_FltF26: CV_HREG_e = CV_HREG_e(36i32);
    pub const CV_ALPHA_FltF27: CV_HREG_e = CV_HREG_e(37i32);
    pub const CV_ALPHA_FltF28: CV_HREG_e = CV_HREG_e(38i32);
    pub const CV_ALPHA_FltF29: CV_HREG_e = CV_HREG_e(39i32);
    pub const CV_ALPHA_FltF3: CV_HREG_e = CV_HREG_e(13i32);
    pub const CV_ALPHA_FltF30: CV_HREG_e = CV_HREG_e(40i32);
    pub const CV_ALPHA_FltF31: CV_HREG_e = CV_HREG_e(41i32);
    pub const CV_ALPHA_FltF4: CV_HREG_e = CV_HREG_e(14i32);
    pub const CV_ALPHA_FltF5: CV_HREG_e = CV_HREG_e(15i32);
    pub const CV_ALPHA_FltF6: CV_HREG_e = CV_HREG_e(16i32);
    pub const CV_ALPHA_FltF7: CV_HREG_e = CV_HREG_e(17i32);
    pub const CV_ALPHA_FltF8: CV_HREG_e = CV_HREG_e(18i32);
    pub const CV_ALPHA_FltF9: CV_HREG_e = CV_HREG_e(19i32);
    pub const CV_ALPHA_FltFsr: CV_HREG_e = CV_HREG_e(77i32);
    pub const CV_ALPHA_Fpcr: CV_HREG_e = CV_HREG_e(74i32);
    pub const CV_ALPHA_IntA0: CV_HREG_e = CV_HREG_e(58i32);
    pub const CV_ALPHA_IntA1: CV_HREG_e = CV_HREG_e(59i32);
    pub const CV_ALPHA_IntA2: CV_HREG_e = CV_HREG_e(60i32);
    pub const CV_ALPHA_IntA3: CV_HREG_e = CV_HREG_e(61i32);
    pub const CV_ALPHA_IntA4: CV_HREG_e = CV_HREG_e(62i32);
    pub const CV_ALPHA_IntA5: CV_HREG_e = CV_HREG_e(63i32);
    pub const CV_ALPHA_IntAT: CV_HREG_e = CV_HREG_e(70i32);
    pub const CV_ALPHA_IntFP: CV_HREG_e = CV_HREG_e(57i32);
    pub const CV_ALPHA_IntGP: CV_HREG_e = CV_HREG_e(71i32);
    pub const CV_ALPHA_IntRA: CV_HREG_e = CV_HREG_e(68i32);
    pub const CV_ALPHA_IntS0: CV_HREG_e = CV_HREG_e(51i32);
    pub const CV_ALPHA_IntS1: CV_HREG_e = CV_HREG_e(52i32);
    pub const CV_ALPHA_IntS2: CV_HREG_e = CV_HREG_e(53i32);
    pub const CV_ALPHA_IntS3: CV_HREG_e = CV_HREG_e(54i32);
    pub const CV_ALPHA_IntS4: CV_HREG_e = CV_HREG_e(55i32);
    pub const CV_ALPHA_IntS5: CV_HREG_e = CV_HREG_e(56i32);
    pub const CV_ALPHA_IntSP: CV_HREG_e = CV_HREG_e(72i32);
    pub const CV_ALPHA_IntT0: CV_HREG_e = CV_HREG_e(43i32);
    pub const CV_ALPHA_IntT1: CV_HREG_e = CV_HREG_e(44i32);
    pub const CV_ALPHA_IntT10: CV_HREG_e = CV_HREG_e(66i32);
    pub const CV_ALPHA_IntT11: CV_HREG_e = CV_HREG_e(67i32);
    pub const CV_ALPHA_IntT12: CV_HREG_e = CV_HREG_e(69i32);
    pub const CV_ALPHA_IntT2: CV_HREG_e = CV_HREG_e(45i32);
    pub const CV_ALPHA_IntT3: CV_HREG_e = CV_HREG_e(46i32);
    pub const CV_ALPHA_IntT4: CV_HREG_e = CV_HREG_e(47i32);
    pub const CV_ALPHA_IntT5: CV_HREG_e = CV_HREG_e(48i32);
    pub const CV_ALPHA_IntT6: CV_HREG_e = CV_HREG_e(49i32);
    pub const CV_ALPHA_IntT7: CV_HREG_e = CV_HREG_e(50i32);
    pub const CV_ALPHA_IntT8: CV_HREG_e = CV_HREG_e(64i32);
    pub const CV_ALPHA_IntT9: CV_HREG_e = CV_HREG_e(65i32);
    pub const CV_ALPHA_IntV0: CV_HREG_e = CV_HREG_e(42i32);
    pub const CV_ALPHA_IntZERO: CV_HREG_e = CV_HREG_e(73i32);
    pub const CV_ALPHA_NOREG: CV_HREG_e = CV_HREG_e(0i32);
    pub const CV_ALPHA_Psr: CV_HREG_e = CV_HREG_e(76i32);
    pub const CV_ALPHA_SoftFpcr: CV_HREG_e = CV_HREG_e(78i32);
    pub const CV_AM33_A0: CV_HREG_e = CV_HREG_e(20i32);
    pub const CV_AM33_A1: CV_HREG_e = CV_HREG_e(21i32);
    pub const CV_AM33_A2: CV_HREG_e = CV_HREG_e(22i32);
    pub const CV_AM33_A3: CV_HREG_e = CV_HREG_e(23i32);
    pub const CV_AM33_D0: CV_HREG_e = CV_HREG_e(30i32);
    pub const CV_AM33_D1: CV_HREG_e = CV_HREG_e(31i32);
    pub const CV_AM33_D2: CV_HREG_e = CV_HREG_e(32i32);
    pub const CV_AM33_D3: CV_HREG_e = CV_HREG_e(33i32);
    pub const CV_AM33_E0: CV_HREG_e = CV_HREG_e(10i32);
    pub const CV_AM33_E1: CV_HREG_e = CV_HREG_e(11i32);
    pub const CV_AM33_E2: CV_HREG_e = CV_HREG_e(12i32);
    pub const CV_AM33_E3: CV_HREG_e = CV_HREG_e(13i32);
    pub const CV_AM33_E4: CV_HREG_e = CV_HREG_e(14i32);
    pub const CV_AM33_E5: CV_HREG_e = CV_HREG_e(15i32);
    pub const CV_AM33_E6: CV_HREG_e = CV_HREG_e(16i32);
    pub const CV_AM33_E7: CV_HREG_e = CV_HREG_e(17i32);
    pub const CV_AM33_EPSW: CV_HREG_e = CV_HREG_e(87i32);
    pub const CV_AM33_FPCR: CV_HREG_e = CV_HREG_e(88i32);
    pub const CV_AM33_FS0: CV_HREG_e = CV_HREG_e(40i32);
    pub const CV_AM33_FS1: CV_HREG_e = CV_HREG_e(41i32);
    pub const CV_AM33_FS10: CV_HREG_e = CV_HREG_e(50i32);
    pub const CV_AM33_FS11: CV_HREG_e = CV_HREG_e(51i32);
    pub const CV_AM33_FS12: CV_HREG_e = CV_HREG_e(52i32);
    pub const CV_AM33_FS13: CV_HREG_e = CV_HREG_e(53i32);
    pub const CV_AM33_FS14: CV_HREG_e = CV_HREG_e(54i32);
    pub const CV_AM33_FS15: CV_HREG_e = CV_HREG_e(55i32);
    pub const CV_AM33_FS16: CV_HREG_e = CV_HREG_e(56i32);
    pub const CV_AM33_FS17: CV_HREG_e = CV_HREG_e(57i32);
    pub const CV_AM33_FS18: CV_HREG_e = CV_HREG_e(58i32);
    pub const CV_AM33_FS19: CV_HREG_e = CV_HREG_e(59i32);
    pub const CV_AM33_FS2: CV_HREG_e = CV_HREG_e(42i32);
    pub const CV_AM33_FS20: CV_HREG_e = CV_HREG_e(60i32);
    pub const CV_AM33_FS21: CV_HREG_e = CV_HREG_e(61i32);
    pub const CV_AM33_FS22: CV_HREG_e = CV_HREG_e(62i32);
    pub const CV_AM33_FS23: CV_HREG_e = CV_HREG_e(63i32);
    pub const CV_AM33_FS24: CV_HREG_e = CV_HREG_e(64i32);
    pub const CV_AM33_FS25: CV_HREG_e = CV_HREG_e(65i32);
    pub const CV_AM33_FS26: CV_HREG_e = CV_HREG_e(66i32);
    pub const CV_AM33_FS27: CV_HREG_e = CV_HREG_e(67i32);
    pub const CV_AM33_FS28: CV_HREG_e = CV_HREG_e(68i32);
    pub const CV_AM33_FS29: CV_HREG_e = CV_HREG_e(69i32);
    pub const CV_AM33_FS3: CV_HREG_e = CV_HREG_e(43i32);
    pub const CV_AM33_FS30: CV_HREG_e = CV_HREG_e(70i32);
    pub const CV_AM33_FS31: CV_HREG_e = CV_HREG_e(71i32);
    pub const CV_AM33_FS4: CV_HREG_e = CV_HREG_e(44i32);
    pub const CV_AM33_FS5: CV_HREG_e = CV_HREG_e(45i32);
    pub const CV_AM33_FS6: CV_HREG_e = CV_HREG_e(46i32);
    pub const CV_AM33_FS7: CV_HREG_e = CV_HREG_e(47i32);
    pub const CV_AM33_FS8: CV_HREG_e = CV_HREG_e(48i32);
    pub const CV_AM33_FS9: CV_HREG_e = CV_HREG_e(49i32);
    pub const CV_AM33_LAR: CV_HREG_e = CV_HREG_e(90i32);
    pub const CV_AM33_LIR: CV_HREG_e = CV_HREG_e(89i32);
    pub const CV_AM33_MCRH: CV_HREG_e = CV_HREG_e(84i32);
    pub const CV_AM33_MCRL: CV_HREG_e = CV_HREG_e(85i32);
    pub const CV_AM33_MCVF: CV_HREG_e = CV_HREG_e(86i32);
    pub const CV_AM33_MDR: CV_HREG_e = CV_HREG_e(82i32);
    pub const CV_AM33_MDRQ: CV_HREG_e = CV_HREG_e(83i32);
    pub const CV_AM33_NOREG: CV_HREG_e = CV_HREG_e(0i32);
    pub const CV_AM33_PC: CV_HREG_e = CV_HREG_e(81i32);
    pub const CV_AM33_SP: CV_HREG_e = CV_HREG_e(80i32);
    pub const CV_AMD64_AH: CV_HREG_e = CV_HREG_e(5i32);
    pub const CV_AMD64_AL: CV_HREG_e = CV_HREG_e(1i32);
    pub const CV_AMD64_AX: CV_HREG_e = CV_HREG_e(9i32);
    pub const CV_AMD64_BH: CV_HREG_e = CV_HREG_e(8i32);
    pub const CV_AMD64_BL: CV_HREG_e = CV_HREG_e(4i32);
    pub const CV_AMD64_BND0: CV_HREG_e = CV_HREG_e(688i32);
    pub const CV_AMD64_BND1: CV_HREG_e = CV_HREG_e(689i32);
    pub const CV_AMD64_BND2: CV_HREG_e = CV_HREG_e(690i32);
    pub const CV_AMD64_BND3: CV_HREG_e = CV_HREG_e(691i32);
    pub const CV_AMD64_BNDCFGU: CV_HREG_e = CV_HREG_e(692i32);
    pub const CV_AMD64_BNDSTATUS: CV_HREG_e = CV_HREG_e(693i32);
    pub const CV_AMD64_BP: CV_HREG_e = CV_HREG_e(14i32);
    pub const CV_AMD64_BPL: CV_HREG_e = CV_HREG_e(326i32);
    pub const CV_AMD64_BX: CV_HREG_e = CV_HREG_e(12i32);
    pub const CV_AMD64_CH: CV_HREG_e = CV_HREG_e(6i32);
    pub const CV_AMD64_CL: CV_HREG_e = CV_HREG_e(2i32);
    pub const CV_AMD64_CR0: CV_HREG_e = CV_HREG_e(80i32);
    pub const CV_AMD64_CR1: CV_HREG_e = CV_HREG_e(81i32);
    pub const CV_AMD64_CR2: CV_HREG_e = CV_HREG_e(82i32);
    pub const CV_AMD64_CR3: CV_HREG_e = CV_HREG_e(83i32);
    pub const CV_AMD64_CR4: CV_HREG_e = CV_HREG_e(84i32);
    pub const CV_AMD64_CR8: CV_HREG_e = CV_HREG_e(88i32);
    pub const CV_AMD64_CS: CV_HREG_e = CV_HREG_e(26i32);
    pub const CV_AMD64_CTRL: CV_HREG_e = CV_HREG_e(136i32);
    pub const CV_AMD64_CX: CV_HREG_e = CV_HREG_e(10i32);
    pub const CV_AMD64_DH: CV_HREG_e = CV_HREG_e(7i32);
    pub const CV_AMD64_DI: CV_HREG_e = CV_HREG_e(16i32);
    pub const CV_AMD64_DIL: CV_HREG_e = CV_HREG_e(325i32);
    pub const CV_AMD64_DL: CV_HREG_e = CV_HREG_e(3i32);
    pub const CV_AMD64_DR0: CV_HREG_e = CV_HREG_e(90i32);
    pub const CV_AMD64_DR1: CV_HREG_e = CV_HREG_e(91i32);
    pub const CV_AMD64_DR10: CV_HREG_e = CV_HREG_e(100i32);
    pub const CV_AMD64_DR11: CV_HREG_e = CV_HREG_e(101i32);
    pub const CV_AMD64_DR12: CV_HREG_e = CV_HREG_e(102i32);
    pub const CV_AMD64_DR13: CV_HREG_e = CV_HREG_e(103i32);
    pub const CV_AMD64_DR14: CV_HREG_e = CV_HREG_e(104i32);
    pub const CV_AMD64_DR15: CV_HREG_e = CV_HREG_e(105i32);
    pub const CV_AMD64_DR2: CV_HREG_e = CV_HREG_e(92i32);
    pub const CV_AMD64_DR3: CV_HREG_e = CV_HREG_e(93i32);
    pub const CV_AMD64_DR4: CV_HREG_e = CV_HREG_e(94i32);
    pub const CV_AMD64_DR5: CV_HREG_e = CV_HREG_e(95i32);
    pub const CV_AMD64_DR6: CV_HREG_e = CV_HREG_e(96i32);
    pub const CV_AMD64_DR7: CV_HREG_e = CV_HREG_e(97i32);
    pub const CV_AMD64_DR8: CV_HREG_e = CV_HREG_e(98i32);
    pub const CV_AMD64_DR9: CV_HREG_e = CV_HREG_e(99i32);
    pub const CV_AMD64_DS: CV_HREG_e = CV_HREG_e(28i32);
    pub const CV_AMD64_DX: CV_HREG_e = CV_HREG_e(11i32);
    pub const CV_AMD64_EAX: CV_HREG_e = CV_HREG_e(17i32);
    pub const CV_AMD64_EBP: CV_HREG_e = CV_HREG_e(22i32);
    pub const CV_AMD64_EBX: CV_HREG_e = CV_HREG_e(20i32);
    pub const CV_AMD64_ECX: CV_HREG_e = CV_HREG_e(18i32);
    pub const CV_AMD64_EDI: CV_HREG_e = CV_HREG_e(24i32);
    pub const CV_AMD64_EDX: CV_HREG_e = CV_HREG_e(19i32);
    pub const CV_AMD64_EFLAGS: CV_HREG_e = CV_HREG_e(34i32);
    pub const CV_AMD64_EMM0H: CV_HREG_e = CV_HREG_e(228i32);
    pub const CV_AMD64_EMM0L: CV_HREG_e = CV_HREG_e(220i32);
    pub const CV_AMD64_EMM10H: CV_HREG_e = CV_HREG_e(318i32);
    pub const CV_AMD64_EMM10L: CV_HREG_e = CV_HREG_e(310i32);
    pub const CV_AMD64_EMM11H: CV_HREG_e = CV_HREG_e(319i32);
    pub const CV_AMD64_EMM11L: CV_HREG_e = CV_HREG_e(311i32);
    pub const CV_AMD64_EMM12H: CV_HREG_e = CV_HREG_e(320i32);
    pub const CV_AMD64_EMM12L: CV_HREG_e = CV_HREG_e(312i32);
    pub const CV_AMD64_EMM13H: CV_HREG_e = CV_HREG_e(321i32);
    pub const CV_AMD64_EMM13L: CV_HREG_e = CV_HREG_e(313i32);
    pub const CV_AMD64_EMM14H: CV_HREG_e = CV_HREG_e(322i32);
    pub const CV_AMD64_EMM14L: CV_HREG_e = CV_HREG_e(314i32);
    pub const CV_AMD64_EMM15H: CV_HREG_e = CV_HREG_e(323i32);
    pub const CV_AMD64_EMM15L: CV_HREG_e = CV_HREG_e(315i32);
    pub const CV_AMD64_EMM16H: CV_HREG_e = CV_HREG_e(830i32);
    pub const CV_AMD64_EMM17H: CV_HREG_e = CV_HREG_e(831i32);
    pub const CV_AMD64_EMM18H: CV_HREG_e = CV_HREG_e(832i32);
    pub const CV_AMD64_EMM19H: CV_HREG_e = CV_HREG_e(833i32);
    pub const CV_AMD64_EMM1H: CV_HREG_e = CV_HREG_e(229i32);
    pub const CV_AMD64_EMM1L: CV_HREG_e = CV_HREG_e(221i32);
    pub const CV_AMD64_EMM20H: CV_HREG_e = CV_HREG_e(834i32);
    pub const CV_AMD64_EMM21H: CV_HREG_e = CV_HREG_e(835i32);
    pub const CV_AMD64_EMM22H: CV_HREG_e = CV_HREG_e(836i32);
    pub const CV_AMD64_EMM23H: CV_HREG_e = CV_HREG_e(837i32);
    pub const CV_AMD64_EMM24H: CV_HREG_e = CV_HREG_e(838i32);
    pub const CV_AMD64_EMM25H: CV_HREG_e = CV_HREG_e(839i32);
    pub const CV_AMD64_EMM26H: CV_HREG_e = CV_HREG_e(840i32);
    pub const CV_AMD64_EMM27H: CV_HREG_e = CV_HREG_e(841i32);
    pub const CV_AMD64_EMM28H: CV_HREG_e = CV_HREG_e(842i32);
    pub const CV_AMD64_EMM29H: CV_HREG_e = CV_HREG_e(843i32);
    pub const CV_AMD64_EMM2H: CV_HREG_e = CV_HREG_e(230i32);
    pub const CV_AMD64_EMM2L: CV_HREG_e = CV_HREG_e(222i32);
    pub const CV_AMD64_EMM30H: CV_HREG_e = CV_HREG_e(844i32);
    pub const CV_AMD64_EMM31H: CV_HREG_e = CV_HREG_e(845i32);
    pub const CV_AMD64_EMM3H: CV_HREG_e = CV_HREG_e(231i32);
    pub const CV_AMD64_EMM3L: CV_HREG_e = CV_HREG_e(223i32);
    pub const CV_AMD64_EMM4H: CV_HREG_e = CV_HREG_e(232i32);
    pub const CV_AMD64_EMM4L: CV_HREG_e = CV_HREG_e(224i32);
    pub const CV_AMD64_EMM5H: CV_HREG_e = CV_HREG_e(233i32);
    pub const CV_AMD64_EMM5L: CV_HREG_e = CV_HREG_e(225i32);
    pub const CV_AMD64_EMM6H: CV_HREG_e = CV_HREG_e(234i32);
    pub const CV_AMD64_EMM6L: CV_HREG_e = CV_HREG_e(226i32);
    pub const CV_AMD64_EMM7H: CV_HREG_e = CV_HREG_e(235i32);
    pub const CV_AMD64_EMM7L: CV_HREG_e = CV_HREG_e(227i32);
    pub const CV_AMD64_EMM8H: CV_HREG_e = CV_HREG_e(316i32);
    pub const CV_AMD64_EMM8L: CV_HREG_e = CV_HREG_e(308i32);
    pub const CV_AMD64_EMM9H: CV_HREG_e = CV_HREG_e(317i32);
    pub const CV_AMD64_EMM9L: CV_HREG_e = CV_HREG_e(309i32);
    pub const CV_AMD64_ES: CV_HREG_e = CV_HREG_e(25i32);
    pub const CV_AMD64_ESI: CV_HREG_e = CV_HREG_e(23i32);
    pub const CV_AMD64_ESP: CV_HREG_e = CV_HREG_e(21i32);
    pub const CV_AMD64_FLAGS: CV_HREG_e = CV_HREG_e(32i32);
    pub const CV_AMD64_FPCS: CV_HREG_e = CV_HREG_e(140i32);
    pub const CV_AMD64_FPDO: CV_HREG_e = CV_HREG_e(141i32);
    pub const CV_AMD64_FPDS: CV_HREG_e = CV_HREG_e(142i32);
    pub const CV_AMD64_FPEDO: CV_HREG_e = CV_HREG_e(145i32);
    pub const CV_AMD64_FPEIP: CV_HREG_e = CV_HREG_e(144i32);
    pub const CV_AMD64_FPIP: CV_HREG_e = CV_HREG_e(139i32);
    pub const CV_AMD64_FS: CV_HREG_e = CV_HREG_e(29i32);
    pub const CV_AMD64_GDTL: CV_HREG_e = CV_HREG_e(111i32);
    pub const CV_AMD64_GDTR: CV_HREG_e = CV_HREG_e(110i32);
    pub const CV_AMD64_GS: CV_HREG_e = CV_HREG_e(30i32);
    pub const CV_AMD64_IDTL: CV_HREG_e = CV_HREG_e(113i32);
    pub const CV_AMD64_IDTR: CV_HREG_e = CV_HREG_e(112i32);
    pub const CV_AMD64_ISEM: CV_HREG_e = CV_HREG_e(143i32);
    pub const CV_AMD64_K0: CV_HREG_e = CV_HREG_e(758i32);
    pub const CV_AMD64_K1: CV_HREG_e = CV_HREG_e(759i32);
    pub const CV_AMD64_K2: CV_HREG_e = CV_HREG_e(760i32);
    pub const CV_AMD64_K3: CV_HREG_e = CV_HREG_e(761i32);
    pub const CV_AMD64_K4: CV_HREG_e = CV_HREG_e(762i32);
    pub const CV_AMD64_K5: CV_HREG_e = CV_HREG_e(763i32);
    pub const CV_AMD64_K6: CV_HREG_e = CV_HREG_e(764i32);
    pub const CV_AMD64_K7: CV_HREG_e = CV_HREG_e(765i32);
    pub const CV_AMD64_LDTR: CV_HREG_e = CV_HREG_e(114i32);
    pub const CV_AMD64_MM0: CV_HREG_e = CV_HREG_e(146i32);
    pub const CV_AMD64_MM00: CV_HREG_e = CV_HREG_e(236i32);
    pub const CV_AMD64_MM01: CV_HREG_e = CV_HREG_e(237i32);
    pub const CV_AMD64_MM1: CV_HREG_e = CV_HREG_e(147i32);
    pub const CV_AMD64_MM10: CV_HREG_e = CV_HREG_e(238i32);
    pub const CV_AMD64_MM11: CV_HREG_e = CV_HREG_e(239i32);
    pub const CV_AMD64_MM2: CV_HREG_e = CV_HREG_e(148i32);
    pub const CV_AMD64_MM20: CV_HREG_e = CV_HREG_e(240i32);
    pub const CV_AMD64_MM21: CV_HREG_e = CV_HREG_e(241i32);
    pub const CV_AMD64_MM3: CV_HREG_e = CV_HREG_e(149i32);
    pub const CV_AMD64_MM30: CV_HREG_e = CV_HREG_e(242i32);
    pub const CV_AMD64_MM31: CV_HREG_e = CV_HREG_e(243i32);
    pub const CV_AMD64_MM4: CV_HREG_e = CV_HREG_e(150i32);
    pub const CV_AMD64_MM40: CV_HREG_e = CV_HREG_e(244i32);
    pub const CV_AMD64_MM41: CV_HREG_e = CV_HREG_e(245i32);
    pub const CV_AMD64_MM5: CV_HREG_e = CV_HREG_e(151i32);
    pub const CV_AMD64_MM50: CV_HREG_e = CV_HREG_e(246i32);
    pub const CV_AMD64_MM51: CV_HREG_e = CV_HREG_e(247i32);
    pub const CV_AMD64_MM6: CV_HREG_e = CV_HREG_e(152i32);
    pub const CV_AMD64_MM60: CV_HREG_e = CV_HREG_e(248i32);
    pub const CV_AMD64_MM61: CV_HREG_e = CV_HREG_e(249i32);
    pub const CV_AMD64_MM7: CV_HREG_e = CV_HREG_e(153i32);
    pub const CV_AMD64_MM70: CV_HREG_e = CV_HREG_e(250i32);
    pub const CV_AMD64_MM71: CV_HREG_e = CV_HREG_e(251i32);
    pub const CV_AMD64_MXCSR: CV_HREG_e = CV_HREG_e(211i32);
    pub const CV_AMD64_R10: CV_HREG_e = CV_HREG_e(338i32);
    pub const CV_AMD64_R10B: CV_HREG_e = CV_HREG_e(346i32);
    pub const CV_AMD64_R10D: CV_HREG_e = CV_HREG_e(362i32);
    pub const CV_AMD64_R10W: CV_HREG_e = CV_HREG_e(354i32);
    pub const CV_AMD64_R11: CV_HREG_e = CV_HREG_e(339i32);
    pub const CV_AMD64_R11B: CV_HREG_e = CV_HREG_e(347i32);
    pub const CV_AMD64_R11D: CV_HREG_e = CV_HREG_e(363i32);
    pub const CV_AMD64_R11W: CV_HREG_e = CV_HREG_e(355i32);
    pub const CV_AMD64_R12: CV_HREG_e = CV_HREG_e(340i32);
    pub const CV_AMD64_R12B: CV_HREG_e = CV_HREG_e(348i32);
    pub const CV_AMD64_R12D: CV_HREG_e = CV_HREG_e(364i32);
    pub const CV_AMD64_R12W: CV_HREG_e = CV_HREG_e(356i32);
    pub const CV_AMD64_R13: CV_HREG_e = CV_HREG_e(341i32);
    pub const CV_AMD64_R13B: CV_HREG_e = CV_HREG_e(349i32);
    pub const CV_AMD64_R13D: CV_HREG_e = CV_HREG_e(365i32);
    pub const CV_AMD64_R13W: CV_HREG_e = CV_HREG_e(357i32);
    pub const CV_AMD64_R14: CV_HREG_e = CV_HREG_e(342i32);
    pub const CV_AMD64_R14B: CV_HREG_e = CV_HREG_e(350i32);
    pub const CV_AMD64_R14D: CV_HREG_e = CV_HREG_e(366i32);
    pub const CV_AMD64_R14W: CV_HREG_e = CV_HREG_e(358i32);
    pub const CV_AMD64_R15: CV_HREG_e = CV_HREG_e(343i32);
    pub const CV_AMD64_R15B: CV_HREG_e = CV_HREG_e(351i32);
    pub const CV_AMD64_R15D: CV_HREG_e = CV_HREG_e(367i32);
    pub const CV_AMD64_R15W: CV_HREG_e = CV_HREG_e(359i32);
    pub const CV_AMD64_R8: CV_HREG_e = CV_HREG_e(336i32);
    pub const CV_AMD64_R8B: CV_HREG_e = CV_HREG_e(344i32);
    pub const CV_AMD64_R8D: CV_HREG_e = CV_HREG_e(360i32);
    pub const CV_AMD64_R8W: CV_HREG_e = CV_HREG_e(352i32);
    pub const CV_AMD64_R9: CV_HREG_e = CV_HREG_e(337i32);
    pub const CV_AMD64_R9B: CV_HREG_e = CV_HREG_e(345i32);
    pub const CV_AMD64_R9D: CV_HREG_e = CV_HREG_e(361i32);
    pub const CV_AMD64_R9W: CV_HREG_e = CV_HREG_e(353i32);
    pub const CV_AMD64_RAX: CV_HREG_e = CV_HREG_e(328i32);
    pub const CV_AMD64_RBP: CV_HREG_e = CV_HREG_e(334i32);
    pub const CV_AMD64_RBX: CV_HREG_e = CV_HREG_e(329i32);
    pub const CV_AMD64_RCX: CV_HREG_e = CV_HREG_e(330i32);
    pub const CV_AMD64_RDI: CV_HREG_e = CV_HREG_e(333i32);
    pub const CV_AMD64_RDX: CV_HREG_e = CV_HREG_e(331i32);
    pub const CV_AMD64_RIP: CV_HREG_e = CV_HREG_e(33i32);
    pub const CV_AMD64_RSI: CV_HREG_e = CV_HREG_e(332i32);
    pub const CV_AMD64_RSP: CV_HREG_e = CV_HREG_e(335i32);
    pub const CV_AMD64_SI: CV_HREG_e = CV_HREG_e(15i32);
    pub const CV_AMD64_SIL: CV_HREG_e = CV_HREG_e(324i32);
    pub const CV_AMD64_SP: CV_HREG_e = CV_HREG_e(13i32);
    pub const CV_AMD64_SPL: CV_HREG_e = CV_HREG_e(327i32);
    pub const CV_AMD64_SS: CV_HREG_e = CV_HREG_e(27i32);
    pub const CV_AMD64_SSP: CV_HREG_e = CV_HREG_e(846i32);
    pub const CV_AMD64_ST0: CV_HREG_e = CV_HREG_e(128i32);
    pub const CV_AMD64_ST1: CV_HREG_e = CV_HREG_e(129i32);
    pub const CV_AMD64_ST2: CV_HREG_e = CV_HREG_e(130i32);
    pub const CV_AMD64_ST3: CV_HREG_e = CV_HREG_e(131i32);
    pub const CV_AMD64_ST4: CV_HREG_e = CV_HREG_e(132i32);
    pub const CV_AMD64_ST5: CV_HREG_e = CV_HREG_e(133i32);
    pub const CV_AMD64_ST6: CV_HREG_e = CV_HREG_e(134i32);
    pub const CV_AMD64_ST7: CV_HREG_e = CV_HREG_e(135i32);
    pub const CV_AMD64_STAT: CV_HREG_e = CV_HREG_e(137i32);
    pub const CV_AMD64_TAG: CV_HREG_e = CV_HREG_e(138i32);
    pub const CV_AMD64_TILECFG: CV_HREG_e = CV_HREG_e(855i32);
    pub const CV_AMD64_TMM0: CV_HREG_e = CV_HREG_e(847i32);
    pub const CV_AMD64_TMM1: CV_HREG_e = CV_HREG_e(848i32);
    pub const CV_AMD64_TMM2: CV_HREG_e = CV_HREG_e(849i32);
    pub const CV_AMD64_TMM3: CV_HREG_e = CV_HREG_e(850i32);
    pub const CV_AMD64_TMM4: CV_HREG_e = CV_HREG_e(851i32);
    pub const CV_AMD64_TMM5: CV_HREG_e = CV_HREG_e(852i32);
    pub const CV_AMD64_TMM6: CV_HREG_e = CV_HREG_e(853i32);
    pub const CV_AMD64_TMM7: CV_HREG_e = CV_HREG_e(854i32);
    pub const CV_AMD64_TR: CV_HREG_e = CV_HREG_e(115i32);
    pub const CV_AMD64_XMM0: CV_HREG_e = CV_HREG_e(154i32);
    pub const CV_AMD64_XMM0H: CV_HREG_e = CV_HREG_e(202i32);
    pub const CV_AMD64_XMM0IH: CV_HREG_e = CV_HREG_e(416i32);
    pub const CV_AMD64_XMM0IL: CV_HREG_e = CV_HREG_e(400i32);
    pub const CV_AMD64_XMM0L: CV_HREG_e = CV_HREG_e(194i32);
    pub const CV_AMD64_XMM0_0: CV_HREG_e = CV_HREG_e(162i32);
    pub const CV_AMD64_XMM0_1: CV_HREG_e = CV_HREG_e(163i32);
    pub const CV_AMD64_XMM0_2: CV_HREG_e = CV_HREG_e(164i32);
    pub const CV_AMD64_XMM0_3: CV_HREG_e = CV_HREG_e(165i32);
    pub const CV_AMD64_XMM1: CV_HREG_e = CV_HREG_e(155i32);
    pub const CV_AMD64_XMM10: CV_HREG_e = CV_HREG_e(254i32);
    pub const CV_AMD64_XMM10H: CV_HREG_e = CV_HREG_e(302i32);
    pub const CV_AMD64_XMM10IH: CV_HREG_e = CV_HREG_e(426i32);
    pub const CV_AMD64_XMM10IL: CV_HREG_e = CV_HREG_e(410i32);
    pub const CV_AMD64_XMM10L: CV_HREG_e = CV_HREG_e(294i32);
    pub const CV_AMD64_XMM10_0: CV_HREG_e = CV_HREG_e(268i32);
    pub const CV_AMD64_XMM10_1: CV_HREG_e = CV_HREG_e(269i32);
    pub const CV_AMD64_XMM10_2: CV_HREG_e = CV_HREG_e(270i32);
    pub const CV_AMD64_XMM10_3: CV_HREG_e = CV_HREG_e(271i32);
    pub const CV_AMD64_XMM11: CV_HREG_e = CV_HREG_e(255i32);
    pub const CV_AMD64_XMM11H: CV_HREG_e = CV_HREG_e(303i32);
    pub const CV_AMD64_XMM11IH: CV_HREG_e = CV_HREG_e(427i32);
    pub const CV_AMD64_XMM11IL: CV_HREG_e = CV_HREG_e(411i32);
    pub const CV_AMD64_XMM11L: CV_HREG_e = CV_HREG_e(295i32);
    pub const CV_AMD64_XMM11_0: CV_HREG_e = CV_HREG_e(272i32);
    pub const CV_AMD64_XMM11_1: CV_HREG_e = CV_HREG_e(273i32);
    pub const CV_AMD64_XMM11_2: CV_HREG_e = CV_HREG_e(274i32);
    pub const CV_AMD64_XMM11_3: CV_HREG_e = CV_HREG_e(275i32);
    pub const CV_AMD64_XMM12: CV_HREG_e = CV_HREG_e(256i32);
    pub const CV_AMD64_XMM12H: CV_HREG_e = CV_HREG_e(304i32);
    pub const CV_AMD64_XMM12IH: CV_HREG_e = CV_HREG_e(428i32);
    pub const CV_AMD64_XMM12IL: CV_HREG_e = CV_HREG_e(412i32);
    pub const CV_AMD64_XMM12L: CV_HREG_e = CV_HREG_e(296i32);
    pub const CV_AMD64_XMM12_0: CV_HREG_e = CV_HREG_e(276i32);
    pub const CV_AMD64_XMM12_1: CV_HREG_e = CV_HREG_e(277i32);
    pub const CV_AMD64_XMM12_2: CV_HREG_e = CV_HREG_e(278i32);
    pub const CV_AMD64_XMM12_3: CV_HREG_e = CV_HREG_e(279i32);
    pub const CV_AMD64_XMM13: CV_HREG_e = CV_HREG_e(257i32);
    pub const CV_AMD64_XMM13H: CV_HREG_e = CV_HREG_e(305i32);
    pub const CV_AMD64_XMM13IH: CV_HREG_e = CV_HREG_e(429i32);
    pub const CV_AMD64_XMM13IL: CV_HREG_e = CV_HREG_e(413i32);
    pub const CV_AMD64_XMM13L: CV_HREG_e = CV_HREG_e(297i32);
    pub const CV_AMD64_XMM13_0: CV_HREG_e = CV_HREG_e(280i32);
    pub const CV_AMD64_XMM13_1: CV_HREG_e = CV_HREG_e(281i32);
    pub const CV_AMD64_XMM13_2: CV_HREG_e = CV_HREG_e(282i32);
    pub const CV_AMD64_XMM13_3: CV_HREG_e = CV_HREG_e(283i32);
    pub const CV_AMD64_XMM14: CV_HREG_e = CV_HREG_e(258i32);
    pub const CV_AMD64_XMM14H: CV_HREG_e = CV_HREG_e(306i32);
    pub const CV_AMD64_XMM14IH: CV_HREG_e = CV_HREG_e(430i32);
    pub const CV_AMD64_XMM14IL: CV_HREG_e = CV_HREG_e(414i32);
    pub const CV_AMD64_XMM14L: CV_HREG_e = CV_HREG_e(298i32);
    pub const CV_AMD64_XMM14_0: CV_HREG_e = CV_HREG_e(284i32);
    pub const CV_AMD64_XMM14_1: CV_HREG_e = CV_HREG_e(285i32);
    pub const CV_AMD64_XMM14_2: CV_HREG_e = CV_HREG_e(286i32);
    pub const CV_AMD64_XMM14_3: CV_HREG_e = CV_HREG_e(287i32);
    pub const CV_AMD64_XMM15: CV_HREG_e = CV_HREG_e(259i32);
    pub const CV_AMD64_XMM15H: CV_HREG_e = CV_HREG_e(307i32);
    pub const CV_AMD64_XMM15IH: CV_HREG_e = CV_HREG_e(431i32);
    pub const CV_AMD64_XMM15IL: CV_HREG_e = CV_HREG_e(415i32);
    pub const CV_AMD64_XMM15L: CV_HREG_e = CV_HREG_e(299i32);
    pub const CV_AMD64_XMM15_0: CV_HREG_e = CV_HREG_e(288i32);
    pub const CV_AMD64_XMM15_1: CV_HREG_e = CV_HREG_e(289i32);
    pub const CV_AMD64_XMM15_2: CV_HREG_e = CV_HREG_e(290i32);
    pub const CV_AMD64_XMM15_3: CV_HREG_e = CV_HREG_e(291i32);
    pub const CV_AMD64_XMM16: CV_HREG_e = CV_HREG_e(694i32);
    pub const CV_AMD64_XMM16H: CV_HREG_e = CV_HREG_e(814i32);
    pub const CV_AMD64_XMM16L: CV_HREG_e = CV_HREG_e(782i32);
    pub const CV_AMD64_XMM16_0: CV_HREG_e = CV_HREG_e(798i32);
    pub const CV_AMD64_XMM17: CV_HREG_e = CV_HREG_e(695i32);
    pub const CV_AMD64_XMM17H: CV_HREG_e = CV_HREG_e(815i32);
    pub const CV_AMD64_XMM17L: CV_HREG_e = CV_HREG_e(783i32);
    pub const CV_AMD64_XMM17_0: CV_HREG_e = CV_HREG_e(799i32);
    pub const CV_AMD64_XMM18: CV_HREG_e = CV_HREG_e(696i32);
    pub const CV_AMD64_XMM18H: CV_HREG_e = CV_HREG_e(816i32);
    pub const CV_AMD64_XMM18L: CV_HREG_e = CV_HREG_e(784i32);
    pub const CV_AMD64_XMM18_0: CV_HREG_e = CV_HREG_e(800i32);
    pub const CV_AMD64_XMM19: CV_HREG_e = CV_HREG_e(697i32);
    pub const CV_AMD64_XMM19H: CV_HREG_e = CV_HREG_e(817i32);
    pub const CV_AMD64_XMM19L: CV_HREG_e = CV_HREG_e(785i32);
    pub const CV_AMD64_XMM19_0: CV_HREG_e = CV_HREG_e(801i32);
    pub const CV_AMD64_XMM1H: CV_HREG_e = CV_HREG_e(203i32);
    pub const CV_AMD64_XMM1IH: CV_HREG_e = CV_HREG_e(417i32);
    pub const CV_AMD64_XMM1IL: CV_HREG_e = CV_HREG_e(401i32);
    pub const CV_AMD64_XMM1L: CV_HREG_e = CV_HREG_e(195i32);
    pub const CV_AMD64_XMM1_0: CV_HREG_e = CV_HREG_e(166i32);
    pub const CV_AMD64_XMM1_1: CV_HREG_e = CV_HREG_e(167i32);
    pub const CV_AMD64_XMM1_2: CV_HREG_e = CV_HREG_e(168i32);
    pub const CV_AMD64_XMM1_3: CV_HREG_e = CV_HREG_e(169i32);
    pub const CV_AMD64_XMM2: CV_HREG_e = CV_HREG_e(156i32);
    pub const CV_AMD64_XMM20: CV_HREG_e = CV_HREG_e(698i32);
    pub const CV_AMD64_XMM20H: CV_HREG_e = CV_HREG_e(818i32);
    pub const CV_AMD64_XMM20L: CV_HREG_e = CV_HREG_e(786i32);
    pub const CV_AMD64_XMM20_0: CV_HREG_e = CV_HREG_e(802i32);
    pub const CV_AMD64_XMM21: CV_HREG_e = CV_HREG_e(699i32);
    pub const CV_AMD64_XMM21H: CV_HREG_e = CV_HREG_e(819i32);
    pub const CV_AMD64_XMM21L: CV_HREG_e = CV_HREG_e(787i32);
    pub const CV_AMD64_XMM21_0: CV_HREG_e = CV_HREG_e(803i32);
    pub const CV_AMD64_XMM22: CV_HREG_e = CV_HREG_e(700i32);
    pub const CV_AMD64_XMM22H: CV_HREG_e = CV_HREG_e(820i32);
    pub const CV_AMD64_XMM22L: CV_HREG_e = CV_HREG_e(788i32);
    pub const CV_AMD64_XMM22_0: CV_HREG_e = CV_HREG_e(804i32);
    pub const CV_AMD64_XMM23: CV_HREG_e = CV_HREG_e(701i32);
    pub const CV_AMD64_XMM23H: CV_HREG_e = CV_HREG_e(821i32);
    pub const CV_AMD64_XMM23L: CV_HREG_e = CV_HREG_e(789i32);
    pub const CV_AMD64_XMM23_0: CV_HREG_e = CV_HREG_e(805i32);
    pub const CV_AMD64_XMM24: CV_HREG_e = CV_HREG_e(702i32);
    pub const CV_AMD64_XMM24H: CV_HREG_e = CV_HREG_e(822i32);
    pub const CV_AMD64_XMM24L: CV_HREG_e = CV_HREG_e(790i32);
    pub const CV_AMD64_XMM24_0: CV_HREG_e = CV_HREG_e(806i32);
    pub const CV_AMD64_XMM25: CV_HREG_e = CV_HREG_e(703i32);
    pub const CV_AMD64_XMM25H: CV_HREG_e = CV_HREG_e(823i32);
    pub const CV_AMD64_XMM25L: CV_HREG_e = CV_HREG_e(791i32);
    pub const CV_AMD64_XMM25_0: CV_HREG_e = CV_HREG_e(807i32);
    pub const CV_AMD64_XMM26: CV_HREG_e = CV_HREG_e(704i32);
    pub const CV_AMD64_XMM26H: CV_HREG_e = CV_HREG_e(824i32);
    pub const CV_AMD64_XMM26L: CV_HREG_e = CV_HREG_e(792i32);
    pub const CV_AMD64_XMM26_0: CV_HREG_e = CV_HREG_e(808i32);
    pub const CV_AMD64_XMM27: CV_HREG_e = CV_HREG_e(705i32);
    pub const CV_AMD64_XMM27H: CV_HREG_e = CV_HREG_e(825i32);
    pub const CV_AMD64_XMM27L: CV_HREG_e = CV_HREG_e(793i32);
    pub const CV_AMD64_XMM27_0: CV_HREG_e = CV_HREG_e(809i32);
    pub const CV_AMD64_XMM28: CV_HREG_e = CV_HREG_e(706i32);
    pub const CV_AMD64_XMM28H: CV_HREG_e = CV_HREG_e(826i32);
    pub const CV_AMD64_XMM28L: CV_HREG_e = CV_HREG_e(794i32);
    pub const CV_AMD64_XMM28_0: CV_HREG_e = CV_HREG_e(810i32);
    pub const CV_AMD64_XMM29: CV_HREG_e = CV_HREG_e(707i32);
    pub const CV_AMD64_XMM29H: CV_HREG_e = CV_HREG_e(827i32);
    pub const CV_AMD64_XMM29L: CV_HREG_e = CV_HREG_e(795i32);
    pub const CV_AMD64_XMM29_0: CV_HREG_e = CV_HREG_e(811i32);
    pub const CV_AMD64_XMM2H: CV_HREG_e = CV_HREG_e(204i32);
    pub const CV_AMD64_XMM2IH: CV_HREG_e = CV_HREG_e(418i32);
    pub const CV_AMD64_XMM2IL: CV_HREG_e = CV_HREG_e(402i32);
    pub const CV_AMD64_XMM2L: CV_HREG_e = CV_HREG_e(196i32);
    pub const CV_AMD64_XMM2_0: CV_HREG_e = CV_HREG_e(170i32);
    pub const CV_AMD64_XMM2_1: CV_HREG_e = CV_HREG_e(171i32);
    pub const CV_AMD64_XMM2_2: CV_HREG_e = CV_HREG_e(172i32);
    pub const CV_AMD64_XMM2_3: CV_HREG_e = CV_HREG_e(173i32);
    pub const CV_AMD64_XMM3: CV_HREG_e = CV_HREG_e(157i32);
    pub const CV_AMD64_XMM30: CV_HREG_e = CV_HREG_e(708i32);
    pub const CV_AMD64_XMM30H: CV_HREG_e = CV_HREG_e(828i32);
    pub const CV_AMD64_XMM30L: CV_HREG_e = CV_HREG_e(796i32);
    pub const CV_AMD64_XMM30_0: CV_HREG_e = CV_HREG_e(812i32);
    pub const CV_AMD64_XMM31: CV_HREG_e = CV_HREG_e(709i32);
    pub const CV_AMD64_XMM31H: CV_HREG_e = CV_HREG_e(829i32);
    pub const CV_AMD64_XMM31L: CV_HREG_e = CV_HREG_e(797i32);
    pub const CV_AMD64_XMM31_0: CV_HREG_e = CV_HREG_e(813i32);
    pub const CV_AMD64_XMM3H: CV_HREG_e = CV_HREG_e(205i32);
    pub const CV_AMD64_XMM3IH: CV_HREG_e = CV_HREG_e(419i32);
    pub const CV_AMD64_XMM3IL: CV_HREG_e = CV_HREG_e(403i32);
    pub const CV_AMD64_XMM3L: CV_HREG_e = CV_HREG_e(197i32);
    pub const CV_AMD64_XMM3_0: CV_HREG_e = CV_HREG_e(174i32);
    pub const CV_AMD64_XMM3_1: CV_HREG_e = CV_HREG_e(175i32);
    pub const CV_AMD64_XMM3_2: CV_HREG_e = CV_HREG_e(176i32);
    pub const CV_AMD64_XMM3_3: CV_HREG_e = CV_HREG_e(177i32);
    pub const CV_AMD64_XMM4: CV_HREG_e = CV_HREG_e(158i32);
    pub const CV_AMD64_XMM4H: CV_HREG_e = CV_HREG_e(206i32);
    pub const CV_AMD64_XMM4IH: CV_HREG_e = CV_HREG_e(420i32);
    pub const CV_AMD64_XMM4IL: CV_HREG_e = CV_HREG_e(404i32);
    pub const CV_AMD64_XMM4L: CV_HREG_e = CV_HREG_e(198i32);
    pub const CV_AMD64_XMM4_0: CV_HREG_e = CV_HREG_e(178i32);
    pub const CV_AMD64_XMM4_1: CV_HREG_e = CV_HREG_e(179i32);
    pub const CV_AMD64_XMM4_2: CV_HREG_e = CV_HREG_e(180i32);
    pub const CV_AMD64_XMM4_3: CV_HREG_e = CV_HREG_e(181i32);
    pub const CV_AMD64_XMM5: CV_HREG_e = CV_HREG_e(159i32);
    pub const CV_AMD64_XMM5H: CV_HREG_e = CV_HREG_e(207i32);
    pub const CV_AMD64_XMM5IH: CV_HREG_e = CV_HREG_e(421i32);
    pub const CV_AMD64_XMM5IL: CV_HREG_e = CV_HREG_e(405i32);
    pub const CV_AMD64_XMM5L: CV_HREG_e = CV_HREG_e(199i32);
    pub const CV_AMD64_XMM5_0: CV_HREG_e = CV_HREG_e(182i32);
    pub const CV_AMD64_XMM5_1: CV_HREG_e = CV_HREG_e(183i32);
    pub const CV_AMD64_XMM5_2: CV_HREG_e = CV_HREG_e(184i32);
    pub const CV_AMD64_XMM5_3: CV_HREG_e = CV_HREG_e(185i32);
    pub const CV_AMD64_XMM6: CV_HREG_e = CV_HREG_e(160i32);
    pub const CV_AMD64_XMM6H: CV_HREG_e = CV_HREG_e(208i32);
    pub const CV_AMD64_XMM6IH: CV_HREG_e = CV_HREG_e(422i32);
    pub const CV_AMD64_XMM6IL: CV_HREG_e = CV_HREG_e(406i32);
    pub const CV_AMD64_XMM6L: CV_HREG_e = CV_HREG_e(200i32);
    pub const CV_AMD64_XMM6_0: CV_HREG_e = CV_HREG_e(186i32);
    pub const CV_AMD64_XMM6_1: CV_HREG_e = CV_HREG_e(187i32);
    pub const CV_AMD64_XMM6_2: CV_HREG_e = CV_HREG_e(188i32);
    pub const CV_AMD64_XMM6_3: CV_HREG_e = CV_HREG_e(189i32);
    pub const CV_AMD64_XMM7: CV_HREG_e = CV_HREG_e(161i32);
    pub const CV_AMD64_XMM7H: CV_HREG_e = CV_HREG_e(209i32);
    pub const CV_AMD64_XMM7IH: CV_HREG_e = CV_HREG_e(423i32);
    pub const CV_AMD64_XMM7IL: CV_HREG_e = CV_HREG_e(407i32);
    pub const CV_AMD64_XMM7L: CV_HREG_e = CV_HREG_e(201i32);
    pub const CV_AMD64_XMM7_0: CV_HREG_e = CV_HREG_e(190i32);
    pub const CV_AMD64_XMM7_1: CV_HREG_e = CV_HREG_e(191i32);
    pub const CV_AMD64_XMM7_2: CV_HREG_e = CV_HREG_e(192i32);
    pub const CV_AMD64_XMM7_3: CV_HREG_e = CV_HREG_e(193i32);
    pub const CV_AMD64_XMM8: CV_HREG_e = CV_HREG_e(252i32);
    pub const CV_AMD64_XMM8H: CV_HREG_e = CV_HREG_e(300i32);
    pub const CV_AMD64_XMM8IH: CV_HREG_e = CV_HREG_e(424i32);
    pub const CV_AMD64_XMM8IL: CV_HREG_e = CV_HREG_e(408i32);
    pub const CV_AMD64_XMM8L: CV_HREG_e = CV_HREG_e(292i32);
    pub const CV_AMD64_XMM8_0: CV_HREG_e = CV_HREG_e(260i32);
    pub const CV_AMD64_XMM8_1: CV_HREG_e = CV_HREG_e(261i32);
    pub const CV_AMD64_XMM8_2: CV_HREG_e = CV_HREG_e(262i32);
    pub const CV_AMD64_XMM8_3: CV_HREG_e = CV_HREG_e(263i32);
    pub const CV_AMD64_XMM9: CV_HREG_e = CV_HREG_e(253i32);
    pub const CV_AMD64_XMM9H: CV_HREG_e = CV_HREG_e(301i32);
    pub const CV_AMD64_XMM9IH: CV_HREG_e = CV_HREG_e(425i32);
    pub const CV_AMD64_XMM9IL: CV_HREG_e = CV_HREG_e(409i32);
    pub const CV_AMD64_XMM9L: CV_HREG_e = CV_HREG_e(293i32);
    pub const CV_AMD64_XMM9_0: CV_HREG_e = CV_HREG_e(264i32);
    pub const CV_AMD64_XMM9_1: CV_HREG_e = CV_HREG_e(265i32);
    pub const CV_AMD64_XMM9_2: CV_HREG_e = CV_HREG_e(266i32);
    pub const CV_AMD64_XMM9_3: CV_HREG_e = CV_HREG_e(267i32);
    pub const CV_AMD64_YMM0: CV_HREG_e = CV_HREG_e(368i32);
    pub const CV_AMD64_YMM0D0: CV_HREG_e = CV_HREG_e(624i32);
    pub const CV_AMD64_YMM0D1: CV_HREG_e = CV_HREG_e(625i32);
    pub const CV_AMD64_YMM0D2: CV_HREG_e = CV_HREG_e(626i32);
    pub const CV_AMD64_YMM0D3: CV_HREG_e = CV_HREG_e(627i32);
    pub const CV_AMD64_YMM0F0: CV_HREG_e = CV_HREG_e(496i32);
    pub const CV_AMD64_YMM0F1: CV_HREG_e = CV_HREG_e(497i32);
    pub const CV_AMD64_YMM0F2: CV_HREG_e = CV_HREG_e(498i32);
    pub const CV_AMD64_YMM0F3: CV_HREG_e = CV_HREG_e(499i32);
    pub const CV_AMD64_YMM0F4: CV_HREG_e = CV_HREG_e(500i32);
    pub const CV_AMD64_YMM0F5: CV_HREG_e = CV_HREG_e(501i32);
    pub const CV_AMD64_YMM0F6: CV_HREG_e = CV_HREG_e(502i32);
    pub const CV_AMD64_YMM0F7: CV_HREG_e = CV_HREG_e(503i32);
    pub const CV_AMD64_YMM0H: CV_HREG_e = CV_HREG_e(384i32);
    pub const CV_AMD64_YMM0I0: CV_HREG_e = CV_HREG_e(432i32);
    pub const CV_AMD64_YMM0I1: CV_HREG_e = CV_HREG_e(433i32);
    pub const CV_AMD64_YMM0I2: CV_HREG_e = CV_HREG_e(434i32);
    pub const CV_AMD64_YMM0I3: CV_HREG_e = CV_HREG_e(435i32);
    pub const CV_AMD64_YMM1: CV_HREG_e = CV_HREG_e(369i32);
    pub const CV_AMD64_YMM10: CV_HREG_e = CV_HREG_e(378i32);
    pub const CV_AMD64_YMM10D0: CV_HREG_e = CV_HREG_e(664i32);
    pub const CV_AMD64_YMM10D1: CV_HREG_e = CV_HREG_e(665i32);
    pub const CV_AMD64_YMM10D2: CV_HREG_e = CV_HREG_e(666i32);
    pub const CV_AMD64_YMM10D3: CV_HREG_e = CV_HREG_e(667i32);
    pub const CV_AMD64_YMM10F0: CV_HREG_e = CV_HREG_e(576i32);
    pub const CV_AMD64_YMM10F1: CV_HREG_e = CV_HREG_e(577i32);
    pub const CV_AMD64_YMM10F2: CV_HREG_e = CV_HREG_e(578i32);
    pub const CV_AMD64_YMM10F3: CV_HREG_e = CV_HREG_e(579i32);
    pub const CV_AMD64_YMM10F4: CV_HREG_e = CV_HREG_e(580i32);
    pub const CV_AMD64_YMM10F5: CV_HREG_e = CV_HREG_e(581i32);
    pub const CV_AMD64_YMM10F6: CV_HREG_e = CV_HREG_e(582i32);
    pub const CV_AMD64_YMM10F7: CV_HREG_e = CV_HREG_e(583i32);
    pub const CV_AMD64_YMM10H: CV_HREG_e = CV_HREG_e(394i32);
    pub const CV_AMD64_YMM10I0: CV_HREG_e = CV_HREG_e(472i32);
    pub const CV_AMD64_YMM10I1: CV_HREG_e = CV_HREG_e(473i32);
    pub const CV_AMD64_YMM10I2: CV_HREG_e = CV_HREG_e(474i32);
    pub const CV_AMD64_YMM10I3: CV_HREG_e = CV_HREG_e(475i32);
    pub const CV_AMD64_YMM11: CV_HREG_e = CV_HREG_e(379i32);
    pub const CV_AMD64_YMM11D0: CV_HREG_e = CV_HREG_e(668i32);
    pub const CV_AMD64_YMM11D1: CV_HREG_e = CV_HREG_e(669i32);
    pub const CV_AMD64_YMM11D2: CV_HREG_e = CV_HREG_e(670i32);
    pub const CV_AMD64_YMM11D3: CV_HREG_e = CV_HREG_e(671i32);
    pub const CV_AMD64_YMM11F0: CV_HREG_e = CV_HREG_e(584i32);
    pub const CV_AMD64_YMM11F1: CV_HREG_e = CV_HREG_e(585i32);
    pub const CV_AMD64_YMM11F2: CV_HREG_e = CV_HREG_e(586i32);
    pub const CV_AMD64_YMM11F3: CV_HREG_e = CV_HREG_e(587i32);
    pub const CV_AMD64_YMM11F4: CV_HREG_e = CV_HREG_e(588i32);
    pub const CV_AMD64_YMM11F5: CV_HREG_e = CV_HREG_e(589i32);
    pub const CV_AMD64_YMM11F6: CV_HREG_e = CV_HREG_e(590i32);
    pub const CV_AMD64_YMM11F7: CV_HREG_e = CV_HREG_e(591i32);
    pub const CV_AMD64_YMM11H: CV_HREG_e = CV_HREG_e(395i32);
    pub const CV_AMD64_YMM11I0: CV_HREG_e = CV_HREG_e(476i32);
    pub const CV_AMD64_YMM11I1: CV_HREG_e = CV_HREG_e(477i32);
    pub const CV_AMD64_YMM11I2: CV_HREG_e = CV_HREG_e(478i32);
    pub const CV_AMD64_YMM11I3: CV_HREG_e = CV_HREG_e(479i32);
    pub const CV_AMD64_YMM12: CV_HREG_e = CV_HREG_e(380i32);
    pub const CV_AMD64_YMM12D0: CV_HREG_e = CV_HREG_e(672i32);
    pub const CV_AMD64_YMM12D1: CV_HREG_e = CV_HREG_e(673i32);
    pub const CV_AMD64_YMM12D2: CV_HREG_e = CV_HREG_e(674i32);
    pub const CV_AMD64_YMM12D3: CV_HREG_e = CV_HREG_e(675i32);
    pub const CV_AMD64_YMM12F0: CV_HREG_e = CV_HREG_e(592i32);
    pub const CV_AMD64_YMM12F1: CV_HREG_e = CV_HREG_e(593i32);
    pub const CV_AMD64_YMM12F2: CV_HREG_e = CV_HREG_e(594i32);
    pub const CV_AMD64_YMM12F3: CV_HREG_e = CV_HREG_e(595i32);
    pub const CV_AMD64_YMM12F4: CV_HREG_e = CV_HREG_e(596i32);
    pub const CV_AMD64_YMM12F5: CV_HREG_e = CV_HREG_e(597i32);
    pub const CV_AMD64_YMM12F6: CV_HREG_e = CV_HREG_e(598i32);
    pub const CV_AMD64_YMM12F7: CV_HREG_e = CV_HREG_e(599i32);
    pub const CV_AMD64_YMM12H: CV_HREG_e = CV_HREG_e(396i32);
    pub const CV_AMD64_YMM12I0: CV_HREG_e = CV_HREG_e(480i32);
    pub const CV_AMD64_YMM12I1: CV_HREG_e = CV_HREG_e(481i32);
    pub const CV_AMD64_YMM12I2: CV_HREG_e = CV_HREG_e(482i32);
    pub const CV_AMD64_YMM12I3: CV_HREG_e = CV_HREG_e(483i32);
    pub const CV_AMD64_YMM13: CV_HREG_e = CV_HREG_e(381i32);
    pub const CV_AMD64_YMM13D0: CV_HREG_e = CV_HREG_e(676i32);
    pub const CV_AMD64_YMM13D1: CV_HREG_e = CV_HREG_e(677i32);
    pub const CV_AMD64_YMM13D2: CV_HREG_e = CV_HREG_e(678i32);
    pub const CV_AMD64_YMM13D3: CV_HREG_e = CV_HREG_e(679i32);
    pub const CV_AMD64_YMM13F0: CV_HREG_e = CV_HREG_e(600i32);
    pub const CV_AMD64_YMM13F1: CV_HREG_e = CV_HREG_e(601i32);
    pub const CV_AMD64_YMM13F2: CV_HREG_e = CV_HREG_e(602i32);
    pub const CV_AMD64_YMM13F3: CV_HREG_e = CV_HREG_e(603i32);
    pub const CV_AMD64_YMM13F4: CV_HREG_e = CV_HREG_e(604i32);
    pub const CV_AMD64_YMM13F5: CV_HREG_e = CV_HREG_e(605i32);
    pub const CV_AMD64_YMM13F6: CV_HREG_e = CV_HREG_e(606i32);
    pub const CV_AMD64_YMM13F7: CV_HREG_e = CV_HREG_e(607i32);
    pub const CV_AMD64_YMM13H: CV_HREG_e = CV_HREG_e(397i32);
    pub const CV_AMD64_YMM13I0: CV_HREG_e = CV_HREG_e(484i32);
    pub const CV_AMD64_YMM13I1: CV_HREG_e = CV_HREG_e(485i32);
    pub const CV_AMD64_YMM13I2: CV_HREG_e = CV_HREG_e(486i32);
    pub const CV_AMD64_YMM13I3: CV_HREG_e = CV_HREG_e(487i32);
    pub const CV_AMD64_YMM14: CV_HREG_e = CV_HREG_e(382i32);
    pub const CV_AMD64_YMM14D0: CV_HREG_e = CV_HREG_e(680i32);
    pub const CV_AMD64_YMM14D1: CV_HREG_e = CV_HREG_e(681i32);
    pub const CV_AMD64_YMM14D2: CV_HREG_e = CV_HREG_e(682i32);
    pub const CV_AMD64_YMM14D3: CV_HREG_e = CV_HREG_e(683i32);
    pub const CV_AMD64_YMM14F0: CV_HREG_e = CV_HREG_e(608i32);
    pub const CV_AMD64_YMM14F1: CV_HREG_e = CV_HREG_e(609i32);
    pub const CV_AMD64_YMM14F2: CV_HREG_e = CV_HREG_e(610i32);
    pub const CV_AMD64_YMM14F3: CV_HREG_e = CV_HREG_e(611i32);
    pub const CV_AMD64_YMM14F4: CV_HREG_e = CV_HREG_e(612i32);
    pub const CV_AMD64_YMM14F5: CV_HREG_e = CV_HREG_e(613i32);
    pub const CV_AMD64_YMM14F6: CV_HREG_e = CV_HREG_e(614i32);
    pub const CV_AMD64_YMM14F7: CV_HREG_e = CV_HREG_e(615i32);
    pub const CV_AMD64_YMM14H: CV_HREG_e = CV_HREG_e(398i32);
    pub const CV_AMD64_YMM14I0: CV_HREG_e = CV_HREG_e(488i32);
    pub const CV_AMD64_YMM14I1: CV_HREG_e = CV_HREG_e(489i32);
    pub const CV_AMD64_YMM14I2: CV_HREG_e = CV_HREG_e(490i32);
    pub const CV_AMD64_YMM14I3: CV_HREG_e = CV_HREG_e(491i32);
    pub const CV_AMD64_YMM15: CV_HREG_e = CV_HREG_e(383i32);
    pub const CV_AMD64_YMM15D0: CV_HREG_e = CV_HREG_e(684i32);
    pub const CV_AMD64_YMM15D1: CV_HREG_e = CV_HREG_e(685i32);
    pub const CV_AMD64_YMM15D2: CV_HREG_e = CV_HREG_e(686i32);
    pub const CV_AMD64_YMM15D3: CV_HREG_e = CV_HREG_e(687i32);
    pub const CV_AMD64_YMM15F0: CV_HREG_e = CV_HREG_e(616i32);
    pub const CV_AMD64_YMM15F1: CV_HREG_e = CV_HREG_e(617i32);
    pub const CV_AMD64_YMM15F2: CV_HREG_e = CV_HREG_e(618i32);
    pub const CV_AMD64_YMM15F3: CV_HREG_e = CV_HREG_e(619i32);
    pub const CV_AMD64_YMM15F4: CV_HREG_e = CV_HREG_e(620i32);
    pub const CV_AMD64_YMM15F5: CV_HREG_e = CV_HREG_e(621i32);
    pub const CV_AMD64_YMM15F6: CV_HREG_e = CV_HREG_e(622i32);
    pub const CV_AMD64_YMM15F7: CV_HREG_e = CV_HREG_e(623i32);
    pub const CV_AMD64_YMM15H: CV_HREG_e = CV_HREG_e(399i32);
    pub const CV_AMD64_YMM15I0: CV_HREG_e = CV_HREG_e(492i32);
    pub const CV_AMD64_YMM15I1: CV_HREG_e = CV_HREG_e(493i32);
    pub const CV_AMD64_YMM15I2: CV_HREG_e = CV_HREG_e(494i32);
    pub const CV_AMD64_YMM15I3: CV_HREG_e = CV_HREG_e(495i32);
    pub const CV_AMD64_YMM16: CV_HREG_e = CV_HREG_e(710i32);
    pub const CV_AMD64_YMM17: CV_HREG_e = CV_HREG_e(711i32);
    pub const CV_AMD64_YMM18: CV_HREG_e = CV_HREG_e(712i32);
    pub const CV_AMD64_YMM19: CV_HREG_e = CV_HREG_e(713i32);
    pub const CV_AMD64_YMM1D0: CV_HREG_e = CV_HREG_e(628i32);
    pub const CV_AMD64_YMM1D1: CV_HREG_e = CV_HREG_e(629i32);
    pub const CV_AMD64_YMM1D2: CV_HREG_e = CV_HREG_e(630i32);
    pub const CV_AMD64_YMM1D3: CV_HREG_e = CV_HREG_e(631i32);
    pub const CV_AMD64_YMM1F0: CV_HREG_e = CV_HREG_e(504i32);
    pub const CV_AMD64_YMM1F1: CV_HREG_e = CV_HREG_e(505i32);
    pub const CV_AMD64_YMM1F2: CV_HREG_e = CV_HREG_e(506i32);
    pub const CV_AMD64_YMM1F3: CV_HREG_e = CV_HREG_e(507i32);
    pub const CV_AMD64_YMM1F4: CV_HREG_e = CV_HREG_e(508i32);
    pub const CV_AMD64_YMM1F5: CV_HREG_e = CV_HREG_e(509i32);
    pub const CV_AMD64_YMM1F6: CV_HREG_e = CV_HREG_e(510i32);
    pub const CV_AMD64_YMM1F7: CV_HREG_e = CV_HREG_e(511i32);
    pub const CV_AMD64_YMM1H: CV_HREG_e = CV_HREG_e(385i32);
    pub const CV_AMD64_YMM1I0: CV_HREG_e = CV_HREG_e(436i32);
    pub const CV_AMD64_YMM1I1: CV_HREG_e = CV_HREG_e(437i32);
    pub const CV_AMD64_YMM1I2: CV_HREG_e = CV_HREG_e(438i32);
    pub const CV_AMD64_YMM1I3: CV_HREG_e = CV_HREG_e(439i32);
    pub const CV_AMD64_YMM2: CV_HREG_e = CV_HREG_e(370i32);
    pub const CV_AMD64_YMM20: CV_HREG_e = CV_HREG_e(714i32);
    pub const CV_AMD64_YMM21: CV_HREG_e = CV_HREG_e(715i32);
    pub const CV_AMD64_YMM22: CV_HREG_e = CV_HREG_e(716i32);
    pub const CV_AMD64_YMM23: CV_HREG_e = CV_HREG_e(717i32);
    pub const CV_AMD64_YMM24: CV_HREG_e = CV_HREG_e(718i32);
    pub const CV_AMD64_YMM25: CV_HREG_e = CV_HREG_e(719i32);
    pub const CV_AMD64_YMM26: CV_HREG_e = CV_HREG_e(720i32);
    pub const CV_AMD64_YMM27: CV_HREG_e = CV_HREG_e(721i32);
    pub const CV_AMD64_YMM28: CV_HREG_e = CV_HREG_e(722i32);
    pub const CV_AMD64_YMM29: CV_HREG_e = CV_HREG_e(723i32);
    pub const CV_AMD64_YMM2D0: CV_HREG_e = CV_HREG_e(632i32);
    pub const CV_AMD64_YMM2D1: CV_HREG_e = CV_HREG_e(633i32);
    pub const CV_AMD64_YMM2D2: CV_HREG_e = CV_HREG_e(634i32);
    pub const CV_AMD64_YMM2D3: CV_HREG_e = CV_HREG_e(635i32);
    pub const CV_AMD64_YMM2F0: CV_HREG_e = CV_HREG_e(512i32);
    pub const CV_AMD64_YMM2F1: CV_HREG_e = CV_HREG_e(513i32);
    pub const CV_AMD64_YMM2F2: CV_HREG_e = CV_HREG_e(514i32);
    pub const CV_AMD64_YMM2F3: CV_HREG_e = CV_HREG_e(515i32);
    pub const CV_AMD64_YMM2F4: CV_HREG_e = CV_HREG_e(516i32);
    pub const CV_AMD64_YMM2F5: CV_HREG_e = CV_HREG_e(517i32);
    pub const CV_AMD64_YMM2F6: CV_HREG_e = CV_HREG_e(518i32);
    pub const CV_AMD64_YMM2F7: CV_HREG_e = CV_HREG_e(519i32);
    pub const CV_AMD64_YMM2H: CV_HREG_e = CV_HREG_e(386i32);
    pub const CV_AMD64_YMM2I0: CV_HREG_e = CV_HREG_e(440i32);
    pub const CV_AMD64_YMM2I1: CV_HREG_e = CV_HREG_e(441i32);
    pub const CV_AMD64_YMM2I2: CV_HREG_e = CV_HREG_e(442i32);
    pub const CV_AMD64_YMM2I3: CV_HREG_e = CV_HREG_e(443i32);
    pub const CV_AMD64_YMM3: CV_HREG_e = CV_HREG_e(371i32);
    pub const CV_AMD64_YMM30: CV_HREG_e = CV_HREG_e(724i32);
    pub const CV_AMD64_YMM31: CV_HREG_e = CV_HREG_e(725i32);
    pub const CV_AMD64_YMM3D0: CV_HREG_e = CV_HREG_e(636i32);
    pub const CV_AMD64_YMM3D1: CV_HREG_e = CV_HREG_e(637i32);
    pub const CV_AMD64_YMM3D2: CV_HREG_e = CV_HREG_e(638i32);
    pub const CV_AMD64_YMM3D3: CV_HREG_e = CV_HREG_e(639i32);
    pub const CV_AMD64_YMM3F0: CV_HREG_e = CV_HREG_e(520i32);
    pub const CV_AMD64_YMM3F1: CV_HREG_e = CV_HREG_e(521i32);
    pub const CV_AMD64_YMM3F2: CV_HREG_e = CV_HREG_e(522i32);
    pub const CV_AMD64_YMM3F3: CV_HREG_e = CV_HREG_e(523i32);
    pub const CV_AMD64_YMM3F4: CV_HREG_e = CV_HREG_e(524i32);
    pub const CV_AMD64_YMM3F5: CV_HREG_e = CV_HREG_e(525i32);
    pub const CV_AMD64_YMM3F6: CV_HREG_e = CV_HREG_e(526i32);
    pub const CV_AMD64_YMM3F7: CV_HREG_e = CV_HREG_e(527i32);
    pub const CV_AMD64_YMM3H: CV_HREG_e = CV_HREG_e(387i32);
    pub const CV_AMD64_YMM3I0: CV_HREG_e = CV_HREG_e(444i32);
    pub const CV_AMD64_YMM3I1: CV_HREG_e = CV_HREG_e(445i32);
    pub const CV_AMD64_YMM3I2: CV_HREG_e = CV_HREG_e(446i32);
    pub const CV_AMD64_YMM3I3: CV_HREG_e = CV_HREG_e(447i32);
    pub const CV_AMD64_YMM4: CV_HREG_e = CV_HREG_e(372i32);
    pub const CV_AMD64_YMM4D0: CV_HREG_e = CV_HREG_e(640i32);
    pub const CV_AMD64_YMM4D1: CV_HREG_e = CV_HREG_e(641i32);
    pub const CV_AMD64_YMM4D2: CV_HREG_e = CV_HREG_e(642i32);
    pub const CV_AMD64_YMM4D3: CV_HREG_e = CV_HREG_e(643i32);
    pub const CV_AMD64_YMM4F0: CV_HREG_e = CV_HREG_e(528i32);
    pub const CV_AMD64_YMM4F1: CV_HREG_e = CV_HREG_e(529i32);
    pub const CV_AMD64_YMM4F2: CV_HREG_e = CV_HREG_e(530i32);
    pub const CV_AMD64_YMM4F3: CV_HREG_e = CV_HREG_e(531i32);
    pub const CV_AMD64_YMM4F4: CV_HREG_e = CV_HREG_e(532i32);
    pub const CV_AMD64_YMM4F5: CV_HREG_e = CV_HREG_e(533i32);
    pub const CV_AMD64_YMM4F6: CV_HREG_e = CV_HREG_e(534i32);
    pub const CV_AMD64_YMM4F7: CV_HREG_e = CV_HREG_e(535i32);
    pub const CV_AMD64_YMM4H: CV_HREG_e = CV_HREG_e(388i32);
    pub const CV_AMD64_YMM4I0: CV_HREG_e = CV_HREG_e(448i32);
    pub const CV_AMD64_YMM4I1: CV_HREG_e = CV_HREG_e(449i32);
    pub const CV_AMD64_YMM4I2: CV_HREG_e = CV_HREG_e(450i32);
    pub const CV_AMD64_YMM4I3: CV_HREG_e = CV_HREG_e(451i32);
    pub const CV_AMD64_YMM5: CV_HREG_e = CV_HREG_e(373i32);
    pub const CV_AMD64_YMM5D0: CV_HREG_e = CV_HREG_e(644i32);
    pub const CV_AMD64_YMM5D1: CV_HREG_e = CV_HREG_e(645i32);
    pub const CV_AMD64_YMM5D2: CV_HREG_e = CV_HREG_e(646i32);
    pub const CV_AMD64_YMM5D3: CV_HREG_e = CV_HREG_e(647i32);
    pub const CV_AMD64_YMM5F0: CV_HREG_e = CV_HREG_e(536i32);
    pub const CV_AMD64_YMM5F1: CV_HREG_e = CV_HREG_e(537i32);
    pub const CV_AMD64_YMM5F2: CV_HREG_e = CV_HREG_e(538i32);
    pub const CV_AMD64_YMM5F3: CV_HREG_e = CV_HREG_e(539i32);
    pub const CV_AMD64_YMM5F4: CV_HREG_e = CV_HREG_e(540i32);
    pub const CV_AMD64_YMM5F5: CV_HREG_e = CV_HREG_e(541i32);
    pub const CV_AMD64_YMM5F6: CV_HREG_e = CV_HREG_e(542i32);
    pub const CV_AMD64_YMM5F7: CV_HREG_e = CV_HREG_e(543i32);
    pub const CV_AMD64_YMM5H: CV_HREG_e = CV_HREG_e(389i32);
    pub const CV_AMD64_YMM5I0: CV_HREG_e = CV_HREG_e(452i32);
    pub const CV_AMD64_YMM5I1: CV_HREG_e = CV_HREG_e(453i32);
    pub const CV_AMD64_YMM5I2: CV_HREG_e = CV_HREG_e(454i32);
    pub const CV_AMD64_YMM5I3: CV_HREG_e = CV_HREG_e(455i32);
    pub const CV_AMD64_YMM6: CV_HREG_e = CV_HREG_e(374i32);
    pub const CV_AMD64_YMM6D0: CV_HREG_e = CV_HREG_e(648i32);
    pub const CV_AMD64_YMM6D1: CV_HREG_e = CV_HREG_e(649i32);
    pub const CV_AMD64_YMM6D2: CV_HREG_e = CV_HREG_e(650i32);
    pub const CV_AMD64_YMM6D3: CV_HREG_e = CV_HREG_e(651i32);
    pub const CV_AMD64_YMM6F0: CV_HREG_e = CV_HREG_e(544i32);
    pub const CV_AMD64_YMM6F1: CV_HREG_e = CV_HREG_e(545i32);
    pub const CV_AMD64_YMM6F2: CV_HREG_e = CV_HREG_e(546i32);
    pub const CV_AMD64_YMM6F3: CV_HREG_e = CV_HREG_e(547i32);
    pub const CV_AMD64_YMM6F4: CV_HREG_e = CV_HREG_e(548i32);
    pub const CV_AMD64_YMM6F5: CV_HREG_e = CV_HREG_e(549i32);
    pub const CV_AMD64_YMM6F6: CV_HREG_e = CV_HREG_e(550i32);
    pub const CV_AMD64_YMM6F7: CV_HREG_e = CV_HREG_e(551i32);
    pub const CV_AMD64_YMM6H: CV_HREG_e = CV_HREG_e(390i32);
    pub const CV_AMD64_YMM6I0: CV_HREG_e = CV_HREG_e(456i32);
    pub const CV_AMD64_YMM6I1: CV_HREG_e = CV_HREG_e(457i32);
    pub const CV_AMD64_YMM6I2: CV_HREG_e = CV_HREG_e(458i32);
    pub const CV_AMD64_YMM6I3: CV_HREG_e = CV_HREG_e(459i32);
    pub const CV_AMD64_YMM7: CV_HREG_e = CV_HREG_e(375i32);
    pub const CV_AMD64_YMM7D0: CV_HREG_e = CV_HREG_e(652i32);
    pub const CV_AMD64_YMM7D1: CV_HREG_e = CV_HREG_e(653i32);
    pub const CV_AMD64_YMM7D2: CV_HREG_e = CV_HREG_e(654i32);
    pub const CV_AMD64_YMM7D3: CV_HREG_e = CV_HREG_e(655i32);
    pub const CV_AMD64_YMM7F0: CV_HREG_e = CV_HREG_e(552i32);
    pub const CV_AMD64_YMM7F1: CV_HREG_e = CV_HREG_e(553i32);
    pub const CV_AMD64_YMM7F2: CV_HREG_e = CV_HREG_e(554i32);
    pub const CV_AMD64_YMM7F3: CV_HREG_e = CV_HREG_e(555i32);
    pub const CV_AMD64_YMM7F4: CV_HREG_e = CV_HREG_e(556i32);
    pub const CV_AMD64_YMM7F5: CV_HREG_e = CV_HREG_e(557i32);
    pub const CV_AMD64_YMM7F6: CV_HREG_e = CV_HREG_e(558i32);
    pub const CV_AMD64_YMM7F7: CV_HREG_e = CV_HREG_e(559i32);
    pub const CV_AMD64_YMM7H: CV_HREG_e = CV_HREG_e(391i32);
    pub const CV_AMD64_YMM7I0: CV_HREG_e = CV_HREG_e(460i32);
    pub const CV_AMD64_YMM7I1: CV_HREG_e = CV_HREG_e(461i32);
    pub const CV_AMD64_YMM7I2: CV_HREG_e = CV_HREG_e(462i32);
    pub const CV_AMD64_YMM7I3: CV_HREG_e = CV_HREG_e(463i32);
    pub const CV_AMD64_YMM8: CV_HREG_e = CV_HREG_e(376i32);
    pub const CV_AMD64_YMM8D0: CV_HREG_e = CV_HREG_e(656i32);
    pub const CV_AMD64_YMM8D1: CV_HREG_e = CV_HREG_e(657i32);
    pub const CV_AMD64_YMM8D2: CV_HREG_e = CV_HREG_e(658i32);
    pub const CV_AMD64_YMM8D3: CV_HREG_e = CV_HREG_e(659i32);
    pub const CV_AMD64_YMM8F0: CV_HREG_e = CV_HREG_e(560i32);
    pub const CV_AMD64_YMM8F1: CV_HREG_e = CV_HREG_e(561i32);
    pub const CV_AMD64_YMM8F2: CV_HREG_e = CV_HREG_e(562i32);
    pub const CV_AMD64_YMM8F3: CV_HREG_e = CV_HREG_e(563i32);
    pub const CV_AMD64_YMM8F4: CV_HREG_e = CV_HREG_e(564i32);
    pub const CV_AMD64_YMM8F5: CV_HREG_e = CV_HREG_e(565i32);
    pub const CV_AMD64_YMM8F6: CV_HREG_e = CV_HREG_e(566i32);
    pub const CV_AMD64_YMM8F7: CV_HREG_e = CV_HREG_e(567i32);
    pub const CV_AMD64_YMM8H: CV_HREG_e = CV_HREG_e(392i32);
    pub const CV_AMD64_YMM8I0: CV_HREG_e = CV_HREG_e(464i32);
    pub const CV_AMD64_YMM8I1: CV_HREG_e = CV_HREG_e(465i32);
    pub const CV_AMD64_YMM8I2: CV_HREG_e = CV_HREG_e(466i32);
    pub const CV_AMD64_YMM8I3: CV_HREG_e = CV_HREG_e(467i32);
    pub const CV_AMD64_YMM9: CV_HREG_e = CV_HREG_e(377i32);
    pub const CV_AMD64_YMM9D0: CV_HREG_e = CV_HREG_e(660i32);
    pub const CV_AMD64_YMM9D1: CV_HREG_e = CV_HREG_e(661i32);
    pub const CV_AMD64_YMM9D2: CV_HREG_e = CV_HREG_e(662i32);
    pub const CV_AMD64_YMM9D3: CV_HREG_e = CV_HREG_e(663i32);
    pub const CV_AMD64_YMM9F0: CV_HREG_e = CV_HREG_e(568i32);
    pub const CV_AMD64_YMM9F1: CV_HREG_e = CV_HREG_e(569i32);
    pub const CV_AMD64_YMM9F2: CV_HREG_e = CV_HREG_e(570i32);
    pub const CV_AMD64_YMM9F3: CV_HREG_e = CV_HREG_e(571i32);
    pub const CV_AMD64_YMM9F4: CV_HREG_e = CV_HREG_e(572i32);
    pub const CV_AMD64_YMM9F5: CV_HREG_e = CV_HREG_e(573i32);
    pub const CV_AMD64_YMM9F6: CV_HREG_e = CV_HREG_e(574i32);
    pub const CV_AMD64_YMM9F7: CV_HREG_e = CV_HREG_e(575i32);
    pub const CV_AMD64_YMM9H: CV_HREG_e = CV_HREG_e(393i32);
    pub const CV_AMD64_YMM9I0: CV_HREG_e = CV_HREG_e(468i32);
    pub const CV_AMD64_YMM9I1: CV_HREG_e = CV_HREG_e(469i32);
    pub const CV_AMD64_YMM9I2: CV_HREG_e = CV_HREG_e(470i32);
    pub const CV_AMD64_YMM9I3: CV_HREG_e = CV_HREG_e(471i32);
    pub const CV_AMD64_ZMM0: CV_HREG_e = CV_HREG_e(726i32);
    pub const CV_AMD64_ZMM0H: CV_HREG_e = CV_HREG_e(766i32);
    pub const CV_AMD64_ZMM1: CV_HREG_e = CV_HREG_e(727i32);
    pub const CV_AMD64_ZMM10: CV_HREG_e = CV_HREG_e(736i32);
    pub const CV_AMD64_ZMM10H: CV_HREG_e = CV_HREG_e(776i32);
    pub const CV_AMD64_ZMM11: CV_HREG_e = CV_HREG_e(737i32);
    pub const CV_AMD64_ZMM11H: CV_HREG_e = CV_HREG_e(777i32);
    pub const CV_AMD64_ZMM12: CV_HREG_e = CV_HREG_e(738i32);
    pub const CV_AMD64_ZMM12H: CV_HREG_e = CV_HREG_e(778i32);
    pub const CV_AMD64_ZMM13: CV_HREG_e = CV_HREG_e(739i32);
    pub const CV_AMD64_ZMM13H: CV_HREG_e = CV_HREG_e(779i32);
    pub const CV_AMD64_ZMM14: CV_HREG_e = CV_HREG_e(740i32);
    pub const CV_AMD64_ZMM14H: CV_HREG_e = CV_HREG_e(780i32);
    pub const CV_AMD64_ZMM15: CV_HREG_e = CV_HREG_e(741i32);
    pub const CV_AMD64_ZMM15H: CV_HREG_e = CV_HREG_e(781i32);
    pub const CV_AMD64_ZMM16: CV_HREG_e = CV_HREG_e(742i32);
    pub const CV_AMD64_ZMM17: CV_HREG_e = CV_HREG_e(743i32);
    pub const CV_AMD64_ZMM18: CV_HREG_e = CV_HREG_e(744i32);
    pub const CV_AMD64_ZMM19: CV_HREG_e = CV_HREG_e(745i32);
    pub const CV_AMD64_ZMM1H: CV_HREG_e = CV_HREG_e(767i32);
    pub const CV_AMD64_ZMM2: CV_HREG_e = CV_HREG_e(728i32);
    pub const CV_AMD64_ZMM20: CV_HREG_e = CV_HREG_e(746i32);
    pub const CV_AMD64_ZMM21: CV_HREG_e = CV_HREG_e(747i32);
    pub const CV_AMD64_ZMM22: CV_HREG_e = CV_HREG_e(748i32);
    pub const CV_AMD64_ZMM23: CV_HREG_e = CV_HREG_e(749i32);
    pub const CV_AMD64_ZMM24: CV_HREG_e = CV_HREG_e(750i32);
    pub const CV_AMD64_ZMM25: CV_HREG_e = CV_HREG_e(751i32);
    pub const CV_AMD64_ZMM26: CV_HREG_e = CV_HREG_e(752i32);
    pub const CV_AMD64_ZMM27: CV_HREG_e = CV_HREG_e(753i32);
    pub const CV_AMD64_ZMM28: CV_HREG_e = CV_HREG_e(754i32);
    pub const CV_AMD64_ZMM29: CV_HREG_e = CV_HREG_e(755i32);
    pub const CV_AMD64_ZMM2H: CV_HREG_e = CV_HREG_e(768i32);
    pub const CV_AMD64_ZMM3: CV_HREG_e = CV_HREG_e(729i32);
    pub const CV_AMD64_ZMM30: CV_HREG_e = CV_HREG_e(756i32);
    pub const CV_AMD64_ZMM31: CV_HREG_e = CV_HREG_e(757i32);
    pub const CV_AMD64_ZMM3H: CV_HREG_e = CV_HREG_e(769i32);
    pub const CV_AMD64_ZMM4: CV_HREG_e = CV_HREG_e(730i32);
    pub const CV_AMD64_ZMM4H: CV_HREG_e = CV_HREG_e(770i32);
    pub const CV_AMD64_ZMM5: CV_HREG_e = CV_HREG_e(731i32);
    pub const CV_AMD64_ZMM5H: CV_HREG_e = CV_HREG_e(771i32);
    pub const CV_AMD64_ZMM6: CV_HREG_e = CV_HREG_e(732i32);
    pub const CV_AMD64_ZMM6H: CV_HREG_e = CV_HREG_e(772i32);
    pub const CV_AMD64_ZMM7: CV_HREG_e = CV_HREG_e(733i32);
    pub const CV_AMD64_ZMM7H: CV_HREG_e = CV_HREG_e(773i32);
    pub const CV_AMD64_ZMM8: CV_HREG_e = CV_HREG_e(734i32);
    pub const CV_AMD64_ZMM8H: CV_HREG_e = CV_HREG_e(774i32);
    pub const CV_AMD64_ZMM9: CV_HREG_e = CV_HREG_e(735i32);
    pub const CV_AMD64_ZMM9H: CV_HREG_e = CV_HREG_e(775i32);
    pub const CV_ARM64_B0: CV_HREG_e = CV_HREG_e(230i32);
    pub const CV_ARM64_B1: CV_HREG_e = CV_HREG_e(231i32);
    pub const CV_ARM64_B10: CV_HREG_e = CV_HREG_e(240i32);
    pub const CV_ARM64_B11: CV_HREG_e = CV_HREG_e(241i32);
    pub const CV_ARM64_B12: CV_HREG_e = CV_HREG_e(242i32);
    pub const CV_ARM64_B13: CV_HREG_e = CV_HREG_e(243i32);
    pub const CV_ARM64_B14: CV_HREG_e = CV_HREG_e(244i32);
    pub const CV_ARM64_B15: CV_HREG_e = CV_HREG_e(245i32);
    pub const CV_ARM64_B16: CV_HREG_e = CV_HREG_e(246i32);
    pub const CV_ARM64_B17: CV_HREG_e = CV_HREG_e(247i32);
    pub const CV_ARM64_B18: CV_HREG_e = CV_HREG_e(248i32);
    pub const CV_ARM64_B19: CV_HREG_e = CV_HREG_e(249i32);
    pub const CV_ARM64_B2: CV_HREG_e = CV_HREG_e(232i32);
    pub const CV_ARM64_B20: CV_HREG_e = CV_HREG_e(250i32);
    pub const CV_ARM64_B21: CV_HREG_e = CV_HREG_e(251i32);
    pub const CV_ARM64_B22: CV_HREG_e = CV_HREG_e(252i32);
    pub const CV_ARM64_B23: CV_HREG_e = CV_HREG_e(253i32);
    pub const CV_ARM64_B24: CV_HREG_e = CV_HREG_e(254i32);
    pub const CV_ARM64_B25: CV_HREG_e = CV_HREG_e(255i32);
    pub const CV_ARM64_B26: CV_HREG_e = CV_HREG_e(256i32);
    pub const CV_ARM64_B27: CV_HREG_e = CV_HREG_e(257i32);
    pub const CV_ARM64_B28: CV_HREG_e = CV_HREG_e(258i32);
    pub const CV_ARM64_B29: CV_HREG_e = CV_HREG_e(259i32);
    pub const CV_ARM64_B3: CV_HREG_e = CV_HREG_e(233i32);
    pub const CV_ARM64_B30: CV_HREG_e = CV_HREG_e(260i32);
    pub const CV_ARM64_B31: CV_HREG_e = CV_HREG_e(261i32);
    pub const CV_ARM64_B4: CV_HREG_e = CV_HREG_e(234i32);
    pub const CV_ARM64_B5: CV_HREG_e = CV_HREG_e(235i32);
    pub const CV_ARM64_B6: CV_HREG_e = CV_HREG_e(236i32);
    pub const CV_ARM64_B7: CV_HREG_e = CV_HREG_e(237i32);
    pub const CV_ARM64_B8: CV_HREG_e = CV_HREG_e(238i32);
    pub const CV_ARM64_B9: CV_HREG_e = CV_HREG_e(239i32);
    pub const CV_ARM64_CPSR: CV_HREG_e = CV_HREG_e(91i32);
    pub const CV_ARM64_D0: CV_HREG_e = CV_HREG_e(140i32);
    pub const CV_ARM64_D1: CV_HREG_e = CV_HREG_e(141i32);
    pub const CV_ARM64_D10: CV_HREG_e = CV_HREG_e(150i32);
    pub const CV_ARM64_D11: CV_HREG_e = CV_HREG_e(151i32);
    pub const CV_ARM64_D12: CV_HREG_e = CV_HREG_e(152i32);
    pub const CV_ARM64_D13: CV_HREG_e = CV_HREG_e(153i32);
    pub const CV_ARM64_D14: CV_HREG_e = CV_HREG_e(154i32);
    pub const CV_ARM64_D15: CV_HREG_e = CV_HREG_e(155i32);
    pub const CV_ARM64_D16: CV_HREG_e = CV_HREG_e(156i32);
    pub const CV_ARM64_D17: CV_HREG_e = CV_HREG_e(157i32);
    pub const CV_ARM64_D18: CV_HREG_e = CV_HREG_e(158i32);
    pub const CV_ARM64_D19: CV_HREG_e = CV_HREG_e(159i32);
    pub const CV_ARM64_D2: CV_HREG_e = CV_HREG_e(142i32);
    pub const CV_ARM64_D20: CV_HREG_e = CV_HREG_e(160i32);
    pub const CV_ARM64_D21: CV_HREG_e = CV_HREG_e(161i32);
    pub const CV_ARM64_D22: CV_HREG_e = CV_HREG_e(162i32);
    pub const CV_ARM64_D23: CV_HREG_e = CV_HREG_e(163i32);
    pub const CV_ARM64_D24: CV_HREG_e = CV_HREG_e(164i32);
    pub const CV_ARM64_D25: CV_HREG_e = CV_HREG_e(165i32);
    pub const CV_ARM64_D26: CV_HREG_e = CV_HREG_e(166i32);
    pub const CV_ARM64_D27: CV_HREG_e = CV_HREG_e(167i32);
    pub const CV_ARM64_D28: CV_HREG_e = CV_HREG_e(168i32);
    pub const CV_ARM64_D29: CV_HREG_e = CV_HREG_e(169i32);
    pub const CV_ARM64_D3: CV_HREG_e = CV_HREG_e(143i32);
    pub const CV_ARM64_D30: CV_HREG_e = CV_HREG_e(170i32);
    pub const CV_ARM64_D31: CV_HREG_e = CV_HREG_e(171i32);
    pub const CV_ARM64_D4: CV_HREG_e = CV_HREG_e(144i32);
    pub const CV_ARM64_D5: CV_HREG_e = CV_HREG_e(145i32);
    pub const CV_ARM64_D6: CV_HREG_e = CV_HREG_e(146i32);
    pub const CV_ARM64_D7: CV_HREG_e = CV_HREG_e(147i32);
    pub const CV_ARM64_D8: CV_HREG_e = CV_HREG_e(148i32);
    pub const CV_ARM64_D9: CV_HREG_e = CV_HREG_e(149i32);
    pub const CV_ARM64_FP: CV_HREG_e = CV_HREG_e(79i32);
    pub const CV_ARM64_FPCR: CV_HREG_e = CV_HREG_e(221i32);
    pub const CV_ARM64_FPSR: CV_HREG_e = CV_HREG_e(220i32);
    pub const CV_ARM64_H0: CV_HREG_e = CV_HREG_e(270i32);
    pub const CV_ARM64_H1: CV_HREG_e = CV_HREG_e(271i32);
    pub const CV_ARM64_H10: CV_HREG_e = CV_HREG_e(280i32);
    pub const CV_ARM64_H11: CV_HREG_e = CV_HREG_e(281i32);
    pub const CV_ARM64_H12: CV_HREG_e = CV_HREG_e(282i32);
    pub const CV_ARM64_H13: CV_HREG_e = CV_HREG_e(283i32);
    pub const CV_ARM64_H14: CV_HREG_e = CV_HREG_e(284i32);
    pub const CV_ARM64_H15: CV_HREG_e = CV_HREG_e(285i32);
    pub const CV_ARM64_H16: CV_HREG_e = CV_HREG_e(286i32);
    pub const CV_ARM64_H17: CV_HREG_e = CV_HREG_e(287i32);
    pub const CV_ARM64_H18: CV_HREG_e = CV_HREG_e(288i32);
    pub const CV_ARM64_H19: CV_HREG_e = CV_HREG_e(289i32);
    pub const CV_ARM64_H2: CV_HREG_e = CV_HREG_e(272i32);
    pub const CV_ARM64_H20: CV_HREG_e = CV_HREG_e(290i32);
    pub const CV_ARM64_H21: CV_HREG_e = CV_HREG_e(291i32);
    pub const CV_ARM64_H22: CV_HREG_e = CV_HREG_e(292i32);
    pub const CV_ARM64_H23: CV_HREG_e = CV_HREG_e(293i32);
    pub const CV_ARM64_H24: CV_HREG_e = CV_HREG_e(294i32);
    pub const CV_ARM64_H25: CV_HREG_e = CV_HREG_e(295i32);
    pub const CV_ARM64_H26: CV_HREG_e = CV_HREG_e(296i32);
    pub const CV_ARM64_H27: CV_HREG_e = CV_HREG_e(297i32);
    pub const CV_ARM64_H28: CV_HREG_e = CV_HREG_e(298i32);
    pub const CV_ARM64_H29: CV_HREG_e = CV_HREG_e(299i32);
    pub const CV_ARM64_H3: CV_HREG_e = CV_HREG_e(273i32);
    pub const CV_ARM64_H30: CV_HREG_e = CV_HREG_e(300i32);
    pub const CV_ARM64_H31: CV_HREG_e = CV_HREG_e(301i32);
    pub const CV_ARM64_H4: CV_HREG_e = CV_HREG_e(274i32);
    pub const CV_ARM64_H5: CV_HREG_e = CV_HREG_e(275i32);
    pub const CV_ARM64_H6: CV_HREG_e = CV_HREG_e(276i32);
    pub const CV_ARM64_H7: CV_HREG_e = CV_HREG_e(277i32);
    pub const CV_ARM64_H8: CV_HREG_e = CV_HREG_e(278i32);
    pub const CV_ARM64_H9: CV_HREG_e = CV_HREG_e(279i32);
    pub const CV_ARM64_IP0: CV_HREG_e = CV_HREG_e(66i32);
    pub const CV_ARM64_IP1: CV_HREG_e = CV_HREG_e(67i32);
    pub const CV_ARM64_LR: CV_HREG_e = CV_HREG_e(80i32);
    pub const CV_ARM64_NOREG: CV_HREG_e = CV_HREG_e(0i32);
    pub const CV_ARM64_NZCV: CV_HREG_e = CV_HREG_e(90i32);
    pub const CV_ARM64_PC: CV_HREG_e = CV_HREG_e(83i32);
    pub const CV_ARM64_Q0: CV_HREG_e = CV_HREG_e(180i32);
    pub const CV_ARM64_Q0H: CV_HREG_e = CV_HREG_e(350i32);
    pub const CV_ARM64_Q1: CV_HREG_e = CV_HREG_e(181i32);
    pub const CV_ARM64_Q10: CV_HREG_e = CV_HREG_e(190i32);
    pub const CV_ARM64_Q10H: CV_HREG_e = CV_HREG_e(360i32);
    pub const CV_ARM64_Q11: CV_HREG_e = CV_HREG_e(191i32);
    pub const CV_ARM64_Q11H: CV_HREG_e = CV_HREG_e(361i32);
    pub const CV_ARM64_Q12: CV_HREG_e = CV_HREG_e(192i32);
    pub const CV_ARM64_Q12H: CV_HREG_e = CV_HREG_e(362i32);
    pub const CV_ARM64_Q13: CV_HREG_e = CV_HREG_e(193i32);
    pub const CV_ARM64_Q13H: CV_HREG_e = CV_HREG_e(363i32);
    pub const CV_ARM64_Q14: CV_HREG_e = CV_HREG_e(194i32);
    pub const CV_ARM64_Q14H: CV_HREG_e = CV_HREG_e(364i32);
    pub const CV_ARM64_Q15: CV_HREG_e = CV_HREG_e(195i32);
    pub const CV_ARM64_Q15H: CV_HREG_e = CV_HREG_e(365i32);
    pub const CV_ARM64_Q16: CV_HREG_e = CV_HREG_e(196i32);
    pub const CV_ARM64_Q16H: CV_HREG_e = CV_HREG_e(366i32);
    pub const CV_ARM64_Q17: CV_HREG_e = CV_HREG_e(197i32);
    pub const CV_ARM64_Q17H: CV_HREG_e = CV_HREG_e(367i32);
    pub const CV_ARM64_Q18: CV_HREG_e = CV_HREG_e(198i32);
    pub const CV_ARM64_Q18H: CV_HREG_e = CV_HREG_e(368i32);
    pub const CV_ARM64_Q19: CV_HREG_e = CV_HREG_e(199i32);
    pub const CV_ARM64_Q19H: CV_HREG_e = CV_HREG_e(369i32);
    pub const CV_ARM64_Q1H: CV_HREG_e = CV_HREG_e(351i32);
    pub const CV_ARM64_Q2: CV_HREG_e = CV_HREG_e(182i32);
    pub const CV_ARM64_Q20: CV_HREG_e = CV_HREG_e(200i32);
    pub const CV_ARM64_Q20H: CV_HREG_e = CV_HREG_e(370i32);
    pub const CV_ARM64_Q21: CV_HREG_e = CV_HREG_e(201i32);
    pub const CV_ARM64_Q21H: CV_HREG_e = CV_HREG_e(371i32);
    pub const CV_ARM64_Q22: CV_HREG_e = CV_HREG_e(202i32);
    pub const CV_ARM64_Q22H: CV_HREG_e = CV_HREG_e(372i32);
    pub const CV_ARM64_Q23: CV_HREG_e = CV_HREG_e(203i32);
    pub const CV_ARM64_Q23H: CV_HREG_e = CV_HREG_e(373i32);
    pub const CV_ARM64_Q24: CV_HREG_e = CV_HREG_e(204i32);
    pub const CV_ARM64_Q24H: CV_HREG_e = CV_HREG_e(374i32);
    pub const CV_ARM64_Q25: CV_HREG_e = CV_HREG_e(205i32);
    pub const CV_ARM64_Q25H: CV_HREG_e = CV_HREG_e(375i32);
    pub const CV_ARM64_Q26: CV_HREG_e = CV_HREG_e(206i32);
    pub const CV_ARM64_Q26H: CV_HREG_e = CV_HREG_e(376i32);
    pub const CV_ARM64_Q27: CV_HREG_e = CV_HREG_e(207i32);
    pub const CV_ARM64_Q27H: CV_HREG_e = CV_HREG_e(377i32);
    pub const CV_ARM64_Q28: CV_HREG_e = CV_HREG_e(208i32);
    pub const CV_ARM64_Q28H: CV_HREG_e = CV_HREG_e(378i32);
    pub const CV_ARM64_Q29: CV_HREG_e = CV_HREG_e(209i32);
    pub const CV_ARM64_Q29H: CV_HREG_e = CV_HREG_e(379i32);
    pub const CV_ARM64_Q2H: CV_HREG_e = CV_HREG_e(352i32);
    pub const CV_ARM64_Q3: CV_HREG_e = CV_HREG_e(183i32);
    pub const CV_ARM64_Q30: CV_HREG_e = CV_HREG_e(210i32);
    pub const CV_ARM64_Q30H: CV_HREG_e = CV_HREG_e(380i32);
    pub const CV_ARM64_Q31: CV_HREG_e = CV_HREG_e(211i32);
    pub const CV_ARM64_Q31H: CV_HREG_e = CV_HREG_e(381i32);
    pub const CV_ARM64_Q3H: CV_HREG_e = CV_HREG_e(353i32);
    pub const CV_ARM64_Q4: CV_HREG_e = CV_HREG_e(184i32);
    pub const CV_ARM64_Q4H: CV_HREG_e = CV_HREG_e(354i32);
    pub const CV_ARM64_Q5: CV_HREG_e = CV_HREG_e(185i32);
    pub const CV_ARM64_Q5H: CV_HREG_e = CV_HREG_e(355i32);
    pub const CV_ARM64_Q6: CV_HREG_e = CV_HREG_e(186i32);
    pub const CV_ARM64_Q6H: CV_HREG_e = CV_HREG_e(356i32);
    pub const CV_ARM64_Q7: CV_HREG_e = CV_HREG_e(187i32);
    pub const CV_ARM64_Q7H: CV_HREG_e = CV_HREG_e(357i32);
    pub const CV_ARM64_Q8: CV_HREG_e = CV_HREG_e(188i32);
    pub const CV_ARM64_Q8H: CV_HREG_e = CV_HREG_e(358i32);
    pub const CV_ARM64_Q9: CV_HREG_e = CV_HREG_e(189i32);
    pub const CV_ARM64_Q9H: CV_HREG_e = CV_HREG_e(359i32);
    pub const CV_ARM64_S0: CV_HREG_e = CV_HREG_e(100i32);
    pub const CV_ARM64_S1: CV_HREG_e = CV_HREG_e(101i32);
    pub const CV_ARM64_S10: CV_HREG_e = CV_HREG_e(110i32);
    pub const CV_ARM64_S11: CV_HREG_e = CV_HREG_e(111i32);
    pub const CV_ARM64_S12: CV_HREG_e = CV_HREG_e(112i32);
    pub const CV_ARM64_S13: CV_HREG_e = CV_HREG_e(113i32);
    pub const CV_ARM64_S14: CV_HREG_e = CV_HREG_e(114i32);
    pub const CV_ARM64_S15: CV_HREG_e = CV_HREG_e(115i32);
    pub const CV_ARM64_S16: CV_HREG_e = CV_HREG_e(116i32);
    pub const CV_ARM64_S17: CV_HREG_e = CV_HREG_e(117i32);
    pub const CV_ARM64_S18: CV_HREG_e = CV_HREG_e(118i32);
    pub const CV_ARM64_S19: CV_HREG_e = CV_HREG_e(119i32);
    pub const CV_ARM64_S2: CV_HREG_e = CV_HREG_e(102i32);
    pub const CV_ARM64_S20: CV_HREG_e = CV_HREG_e(120i32);
    pub const CV_ARM64_S21: CV_HREG_e = CV_HREG_e(121i32);
    pub const CV_ARM64_S22: CV_HREG_e = CV_HREG_e(122i32);
    pub const CV_ARM64_S23: CV_HREG_e = CV_HREG_e(123i32);
    pub const CV_ARM64_S24: CV_HREG_e = CV_HREG_e(124i32);
    pub const CV_ARM64_S25: CV_HREG_e = CV_HREG_e(125i32);
    pub const CV_ARM64_S26: CV_HREG_e = CV_HREG_e(126i32);
    pub const CV_ARM64_S27: CV_HREG_e = CV_HREG_e(127i32);
    pub const CV_ARM64_S28: CV_HREG_e = CV_HREG_e(128i32);
    pub const CV_ARM64_S29: CV_HREG_e = CV_HREG_e(129i32);
    pub const CV_ARM64_S3: CV_HREG_e = CV_HREG_e(103i32);
    pub const CV_ARM64_S30: CV_HREG_e = CV_HREG_e(130i32);
    pub const CV_ARM64_S31: CV_HREG_e = CV_HREG_e(131i32);
    pub const CV_ARM64_S4: CV_HREG_e = CV_HREG_e(104i32);
    pub const CV_ARM64_S5: CV_HREG_e = CV_HREG_e(105i32);
    pub const CV_ARM64_S6: CV_HREG_e = CV_HREG_e(106i32);
    pub const CV_ARM64_S7: CV_HREG_e = CV_HREG_e(107i32);
    pub const CV_ARM64_S8: CV_HREG_e = CV_HREG_e(108i32);
    pub const CV_ARM64_S9: CV_HREG_e = CV_HREG_e(109i32);
    pub const CV_ARM64_SP: CV_HREG_e = CV_HREG_e(81i32);
    pub const CV_ARM64_V0: CV_HREG_e = CV_HREG_e(310i32);
    pub const CV_ARM64_V1: CV_HREG_e = CV_HREG_e(311i32);
    pub const CV_ARM64_V10: CV_HREG_e = CV_HREG_e(320i32);
    pub const CV_ARM64_V11: CV_HREG_e = CV_HREG_e(321i32);
    pub const CV_ARM64_V12: CV_HREG_e = CV_HREG_e(322i32);
    pub const CV_ARM64_V13: CV_HREG_e = CV_HREG_e(323i32);
    pub const CV_ARM64_V14: CV_HREG_e = CV_HREG_e(324i32);
    pub const CV_ARM64_V15: CV_HREG_e = CV_HREG_e(325i32);
    pub const CV_ARM64_V16: CV_HREG_e = CV_HREG_e(326i32);
    pub const CV_ARM64_V17: CV_HREG_e = CV_HREG_e(327i32);
    pub const CV_ARM64_V18: CV_HREG_e = CV_HREG_e(328i32);
    pub const CV_ARM64_V19: CV_HREG_e = CV_HREG_e(329i32);
    pub const CV_ARM64_V2: CV_HREG_e = CV_HREG_e(312i32);
    pub const CV_ARM64_V20: CV_HREG_e = CV_HREG_e(330i32);
    pub const CV_ARM64_V21: CV_HREG_e = CV_HREG_e(331i32);
    pub const CV_ARM64_V22: CV_HREG_e = CV_HREG_e(332i32);
    pub const CV_ARM64_V23: CV_HREG_e = CV_HREG_e(333i32);
    pub const CV_ARM64_V24: CV_HREG_e = CV_HREG_e(334i32);
    pub const CV_ARM64_V25: CV_HREG_e = CV_HREG_e(335i32);
    pub const CV_ARM64_V26: CV_HREG_e = CV_HREG_e(336i32);
    pub const CV_ARM64_V27: CV_HREG_e = CV_HREG_e(337i32);
    pub const CV_ARM64_V28: CV_HREG_e = CV_HREG_e(338i32);
    pub const CV_ARM64_V29: CV_HREG_e = CV_HREG_e(339i32);
    pub const CV_ARM64_V3: CV_HREG_e = CV_HREG_e(313i32);
    pub const CV_ARM64_V30: CV_HREG_e = CV_HREG_e(340i32);
    pub const CV_ARM64_V31: CV_HREG_e = CV_HREG_e(341i32);
    pub const CV_ARM64_V4: CV_HREG_e = CV_HREG_e(314i32);
    pub const CV_ARM64_V5: CV_HREG_e = CV_HREG_e(315i32);
    pub const CV_ARM64_V6: CV_HREG_e = CV_HREG_e(316i32);
    pub const CV_ARM64_V7: CV_HREG_e = CV_HREG_e(317i32);
    pub const CV_ARM64_V8: CV_HREG_e = CV_HREG_e(318i32);
    pub const CV_ARM64_V9: CV_HREG_e = CV_HREG_e(319i32);
    pub const CV_ARM64_W0: CV_HREG_e = CV_HREG_e(10i32);
    pub const CV_ARM64_W1: CV_HREG_e = CV_HREG_e(11i32);
    pub const CV_ARM64_W10: CV_HREG_e = CV_HREG_e(20i32);
    pub const CV_ARM64_W11: CV_HREG_e = CV_HREG_e(21i32);
    pub const CV_ARM64_W12: CV_HREG_e = CV_HREG_e(22i32);
    pub const CV_ARM64_W13: CV_HREG_e = CV_HREG_e(23i32);
    pub const CV_ARM64_W14: CV_HREG_e = CV_HREG_e(24i32);
    pub const CV_ARM64_W15: CV_HREG_e = CV_HREG_e(25i32);
    pub const CV_ARM64_W16: CV_HREG_e = CV_HREG_e(26i32);
    pub const CV_ARM64_W17: CV_HREG_e = CV_HREG_e(27i32);
    pub const CV_ARM64_W18: CV_HREG_e = CV_HREG_e(28i32);
    pub const CV_ARM64_W19: CV_HREG_e = CV_HREG_e(29i32);
    pub const CV_ARM64_W2: CV_HREG_e = CV_HREG_e(12i32);
    pub const CV_ARM64_W20: CV_HREG_e = CV_HREG_e(30i32);
    pub const CV_ARM64_W21: CV_HREG_e = CV_HREG_e(31i32);
    pub const CV_ARM64_W22: CV_HREG_e = CV_HREG_e(32i32);
    pub const CV_ARM64_W23: CV_HREG_e = CV_HREG_e(33i32);
    pub const CV_ARM64_W24: CV_HREG_e = CV_HREG_e(34i32);
    pub const CV_ARM64_W25: CV_HREG_e = CV_HREG_e(35i32);
    pub const CV_ARM64_W26: CV_HREG_e = CV_HREG_e(36i32);
    pub const CV_ARM64_W27: CV_HREG_e = CV_HREG_e(37i32);
    pub const CV_ARM64_W28: CV_HREG_e = CV_HREG_e(38i32);
    pub const CV_ARM64_W29: CV_HREG_e = CV_HREG_e(39i32);
    pub const CV_ARM64_W3: CV_HREG_e = CV_HREG_e(13i32);
    pub const CV_ARM64_W30: CV_HREG_e = CV_HREG_e(40i32);
    pub const CV_ARM64_W4: CV_HREG_e = CV_HREG_e(14i32);
    pub const CV_ARM64_W5: CV_HREG_e = CV_HREG_e(15i32);
    pub const CV_ARM64_W6: CV_HREG_e = CV_HREG_e(16i32);
    pub const CV_ARM64_W7: CV_HREG_e = CV_HREG_e(17i32);
    pub const CV_ARM64_W8: CV_HREG_e = CV_HREG_e(18i32);
    pub const CV_ARM64_W9: CV_HREG_e = CV_HREG_e(19i32);
    pub const CV_ARM64_WZR: CV_HREG_e = CV_HREG_e(41i32);
    pub const CV_ARM64_X0: CV_HREG_e = CV_HREG_e(50i32);
    pub const CV_ARM64_X1: CV_HREG_e = CV_HREG_e(51i32);
    pub const CV_ARM64_X10: CV_HREG_e = CV_HREG_e(60i32);
    pub const CV_ARM64_X11: CV_HREG_e = CV_HREG_e(61i32);
    pub const CV_ARM64_X12: CV_HREG_e = CV_HREG_e(62i32);
    pub const CV_ARM64_X13: CV_HREG_e = CV_HREG_e(63i32);
    pub const CV_ARM64_X14: CV_HREG_e = CV_HREG_e(64i32);
    pub const CV_ARM64_X15: CV_HREG_e = CV_HREG_e(65i32);
    pub const CV_ARM64_X18: CV_HREG_e = CV_HREG_e(68i32);
    pub const CV_ARM64_X19: CV_HREG_e = CV_HREG_e(69i32);
    pub const CV_ARM64_X2: CV_HREG_e = CV_HREG_e(52i32);
    pub const CV_ARM64_X20: CV_HREG_e = CV_HREG_e(70i32);
    pub const CV_ARM64_X21: CV_HREG_e = CV_HREG_e(71i32);
    pub const CV_ARM64_X22: CV_HREG_e = CV_HREG_e(72i32);
    pub const CV_ARM64_X23: CV_HREG_e = CV_HREG_e(73i32);
    pub const CV_ARM64_X24: CV_HREG_e = CV_HREG_e(74i32);
    pub const CV_ARM64_X25: CV_HREG_e = CV_HREG_e(75i32);
    pub const CV_ARM64_X26: CV_HREG_e = CV_HREG_e(76i32);
    pub const CV_ARM64_X27: CV_HREG_e = CV_HREG_e(77i32);
    pub const CV_ARM64_X28: CV_HREG_e = CV_HREG_e(78i32);
    pub const CV_ARM64_X3: CV_HREG_e = CV_HREG_e(53i32);
    pub const CV_ARM64_X4: CV_HREG_e = CV_HREG_e(54i32);
    pub const CV_ARM64_X5: CV_HREG_e = CV_HREG_e(55i32);
    pub const CV_ARM64_X6: CV_HREG_e = CV_HREG_e(56i32);
    pub const CV_ARM64_X7: CV_HREG_e = CV_HREG_e(57i32);
    pub const CV_ARM64_X8: CV_HREG_e = CV_HREG_e(58i32);
    pub const CV_ARM64_X9: CV_HREG_e = CV_HREG_e(59i32);
    pub const CV_ARM64_ZR: CV_HREG_e = CV_HREG_e(82i32);
    pub const CV_ARM_ACC0: CV_HREG_e = CV_HREG_e(27i32);
    pub const CV_ARM_CPSR: CV_HREG_e = CV_HREG_e(26i32);
    pub const CV_ARM_FPEXC: CV_HREG_e = CV_HREG_e(41i32);
    pub const CV_ARM_FPEXTRA0: CV_HREG_e = CV_HREG_e(90i32);
    pub const CV_ARM_FPEXTRA1: CV_HREG_e = CV_HREG_e(91i32);
    pub const CV_ARM_FPEXTRA2: CV_HREG_e = CV_HREG_e(92i32);
    pub const CV_ARM_FPEXTRA3: CV_HREG_e = CV_HREG_e(93i32);
    pub const CV_ARM_FPEXTRA4: CV_HREG_e = CV_HREG_e(94i32);
    pub const CV_ARM_FPEXTRA5: CV_HREG_e = CV_HREG_e(95i32);
    pub const CV_ARM_FPEXTRA6: CV_HREG_e = CV_HREG_e(96i32);
    pub const CV_ARM_FPEXTRA7: CV_HREG_e = CV_HREG_e(97i32);
    pub const CV_ARM_FPSCR: CV_HREG_e = CV_HREG_e(40i32);
    pub const CV_ARM_FS0: CV_HREG_e = CV_HREG_e(50i32);
    pub const CV_ARM_FS1: CV_HREG_e = CV_HREG_e(51i32);
    pub const CV_ARM_FS10: CV_HREG_e = CV_HREG_e(60i32);
    pub const CV_ARM_FS11: CV_HREG_e = CV_HREG_e(61i32);
    pub const CV_ARM_FS12: CV_HREG_e = CV_HREG_e(62i32);
    pub const CV_ARM_FS13: CV_HREG_e = CV_HREG_e(63i32);
    pub const CV_ARM_FS14: CV_HREG_e = CV_HREG_e(64i32);
    pub const CV_ARM_FS15: CV_HREG_e = CV_HREG_e(65i32);
    pub const CV_ARM_FS16: CV_HREG_e = CV_HREG_e(66i32);
    pub const CV_ARM_FS17: CV_HREG_e = CV_HREG_e(67i32);
    pub const CV_ARM_FS18: CV_HREG_e = CV_HREG_e(68i32);
    pub const CV_ARM_FS19: CV_HREG_e = CV_HREG_e(69i32);
    pub const CV_ARM_FS2: CV_HREG_e = CV_HREG_e(52i32);
    pub const CV_ARM_FS20: CV_HREG_e = CV_HREG_e(70i32);
    pub const CV_ARM_FS21: CV_HREG_e = CV_HREG_e(71i32);
    pub const CV_ARM_FS22: CV_HREG_e = CV_HREG_e(72i32);
    pub const CV_ARM_FS23: CV_HREG_e = CV_HREG_e(73i32);
    pub const CV_ARM_FS24: CV_HREG_e = CV_HREG_e(74i32);
    pub const CV_ARM_FS25: CV_HREG_e = CV_HREG_e(75i32);
    pub const CV_ARM_FS26: CV_HREG_e = CV_HREG_e(76i32);
    pub const CV_ARM_FS27: CV_HREG_e = CV_HREG_e(77i32);
    pub const CV_ARM_FS28: CV_HREG_e = CV_HREG_e(78i32);
    pub const CV_ARM_FS29: CV_HREG_e = CV_HREG_e(79i32);
    pub const CV_ARM_FS3: CV_HREG_e = CV_HREG_e(53i32);
    pub const CV_ARM_FS30: CV_HREG_e = CV_HREG_e(80i32);
    pub const CV_ARM_FS31: CV_HREG_e = CV_HREG_e(81i32);
    pub const CV_ARM_FS32: CV_HREG_e = CV_HREG_e(200i32);
    pub const CV_ARM_FS33: CV_HREG_e = CV_HREG_e(201i32);
    pub const CV_ARM_FS34: CV_HREG_e = CV_HREG_e(202i32);
    pub const CV_ARM_FS35: CV_HREG_e = CV_HREG_e(203i32);
    pub const CV_ARM_FS36: CV_HREG_e = CV_HREG_e(204i32);
    pub const CV_ARM_FS37: CV_HREG_e = CV_HREG_e(205i32);
    pub const CV_ARM_FS38: CV_HREG_e = CV_HREG_e(206i32);
    pub const CV_ARM_FS39: CV_HREG_e = CV_HREG_e(207i32);
    pub const CV_ARM_FS4: CV_HREG_e = CV_HREG_e(54i32);
    pub const CV_ARM_FS40: CV_HREG_e = CV_HREG_e(208i32);
    pub const CV_ARM_FS41: CV_HREG_e = CV_HREG_e(209i32);
    pub const CV_ARM_FS42: CV_HREG_e = CV_HREG_e(210i32);
    pub const CV_ARM_FS43: CV_HREG_e = CV_HREG_e(211i32);
    pub const CV_ARM_FS44: CV_HREG_e = CV_HREG_e(212i32);
    pub const CV_ARM_FS45: CV_HREG_e = CV_HREG_e(213i32);
    pub const CV_ARM_FS46: CV_HREG_e = CV_HREG_e(214i32);
    pub const CV_ARM_FS47: CV_HREG_e = CV_HREG_e(215i32);
    pub const CV_ARM_FS48: CV_HREG_e = CV_HREG_e(216i32);
    pub const CV_ARM_FS49: CV_HREG_e = CV_HREG_e(217i32);
    pub const CV_ARM_FS5: CV_HREG_e = CV_HREG_e(55i32);
    pub const CV_ARM_FS50: CV_HREG_e = CV_HREG_e(218i32);
    pub const CV_ARM_FS51: CV_HREG_e = CV_HREG_e(219i32);
    pub const CV_ARM_FS52: CV_HREG_e = CV_HREG_e(220i32);
    pub const CV_ARM_FS53: CV_HREG_e = CV_HREG_e(221i32);
    pub const CV_ARM_FS54: CV_HREG_e = CV_HREG_e(222i32);
    pub const CV_ARM_FS55: CV_HREG_e = CV_HREG_e(223i32);
    pub const CV_ARM_FS56: CV_HREG_e = CV_HREG_e(224i32);
    pub const CV_ARM_FS57: CV_HREG_e = CV_HREG_e(225i32);
    pub const CV_ARM_FS58: CV_HREG_e = CV_HREG_e(226i32);
    pub const CV_ARM_FS59: CV_HREG_e = CV_HREG_e(227i32);
    pub const CV_ARM_FS6: CV_HREG_e = CV_HREG_e(56i32);
    pub const CV_ARM_FS60: CV_HREG_e = CV_HREG_e(228i32);
    pub const CV_ARM_FS61: CV_HREG_e = CV_HREG_e(229i32);
    pub const CV_ARM_FS62: CV_HREG_e = CV_HREG_e(230i32);
    pub const CV_ARM_FS63: CV_HREG_e = CV_HREG_e(231i32);
    pub const CV_ARM_FS7: CV_HREG_e = CV_HREG_e(57i32);
    pub const CV_ARM_FS8: CV_HREG_e = CV_HREG_e(58i32);
    pub const CV_ARM_FS9: CV_HREG_e = CV_HREG_e(59i32);
    pub const CV_ARM_LR: CV_HREG_e = CV_HREG_e(24i32);
    pub const CV_ARM_ND0: CV_HREG_e = CV_HREG_e(300i32);
    pub const CV_ARM_ND1: CV_HREG_e = CV_HREG_e(301i32);
    pub const CV_ARM_ND10: CV_HREG_e = CV_HREG_e(310i32);
    pub const CV_ARM_ND11: CV_HREG_e = CV_HREG_e(311i32);
    pub const CV_ARM_ND12: CV_HREG_e = CV_HREG_e(312i32);
    pub const CV_ARM_ND13: CV_HREG_e = CV_HREG_e(313i32);
    pub const CV_ARM_ND14: CV_HREG_e = CV_HREG_e(314i32);
    pub const CV_ARM_ND15: CV_HREG_e = CV_HREG_e(315i32);
    pub const CV_ARM_ND16: CV_HREG_e = CV_HREG_e(316i32);
    pub const CV_ARM_ND17: CV_HREG_e = CV_HREG_e(317i32);
    pub const CV_ARM_ND18: CV_HREG_e = CV_HREG_e(318i32);
    pub const CV_ARM_ND19: CV_HREG_e = CV_HREG_e(319i32);
    pub const CV_ARM_ND2: CV_HREG_e = CV_HREG_e(302i32);
    pub const CV_ARM_ND20: CV_HREG_e = CV_HREG_e(320i32);
    pub const CV_ARM_ND21: CV_HREG_e = CV_HREG_e(321i32);
    pub const CV_ARM_ND22: CV_HREG_e = CV_HREG_e(322i32);
    pub const CV_ARM_ND23: CV_HREG_e = CV_HREG_e(323i32);
    pub const CV_ARM_ND24: CV_HREG_e = CV_HREG_e(324i32);
    pub const CV_ARM_ND25: CV_HREG_e = CV_HREG_e(325i32);
    pub const CV_ARM_ND26: CV_HREG_e = CV_HREG_e(326i32);
    pub const CV_ARM_ND27: CV_HREG_e = CV_HREG_e(327i32);
    pub const CV_ARM_ND28: CV_HREG_e = CV_HREG_e(328i32);
    pub const CV_ARM_ND29: CV_HREG_e = CV_HREG_e(329i32);
    pub const CV_ARM_ND3: CV_HREG_e = CV_HREG_e(303i32);
    pub const CV_ARM_ND30: CV_HREG_e = CV_HREG_e(330i32);
    pub const CV_ARM_ND31: CV_HREG_e = CV_HREG_e(331i32);
    pub const CV_ARM_ND4: CV_HREG_e = CV_HREG_e(304i32);
    pub const CV_ARM_ND5: CV_HREG_e = CV_HREG_e(305i32);
    pub const CV_ARM_ND6: CV_HREG_e = CV_HREG_e(306i32);
    pub const CV_ARM_ND7: CV_HREG_e = CV_HREG_e(307i32);
    pub const CV_ARM_ND8: CV_HREG_e = CV_HREG_e(308i32);
    pub const CV_ARM_ND9: CV_HREG_e = CV_HREG_e(309i32);
    pub const CV_ARM_NOREG: CV_HREG_e = CV_HREG_e(0i32);
    pub const CV_ARM_NQ0: CV_HREG_e = CV_HREG_e(400i32);
    pub const CV_ARM_NQ1: CV_HREG_e = CV_HREG_e(401i32);
    pub const CV_ARM_NQ10: CV_HREG_e = CV_HREG_e(410i32);
    pub const CV_ARM_NQ11: CV_HREG_e = CV_HREG_e(411i32);
    pub const CV_ARM_NQ12: CV_HREG_e = CV_HREG_e(412i32);
    pub const CV_ARM_NQ13: CV_HREG_e = CV_HREG_e(413i32);
    pub const CV_ARM_NQ14: CV_HREG_e = CV_HREG_e(414i32);
    pub const CV_ARM_NQ15: CV_HREG_e = CV_HREG_e(415i32);
    pub const CV_ARM_NQ2: CV_HREG_e = CV_HREG_e(402i32);
    pub const CV_ARM_NQ3: CV_HREG_e = CV_HREG_e(403i32);
    pub const CV_ARM_NQ4: CV_HREG_e = CV_HREG_e(404i32);
    pub const CV_ARM_NQ5: CV_HREG_e = CV_HREG_e(405i32);
    pub const CV_ARM_NQ6: CV_HREG_e = CV_HREG_e(406i32);
    pub const CV_ARM_NQ7: CV_HREG_e = CV_HREG_e(407i32);
    pub const CV_ARM_NQ8: CV_HREG_e = CV_HREG_e(408i32);
    pub const CV_ARM_NQ9: CV_HREG_e = CV_HREG_e(409i32);
    pub const CV_ARM_PC: CV_HREG_e = CV_HREG_e(25i32);
    pub const CV_ARM_R0: CV_HREG_e = CV_HREG_e(10i32);
    pub const CV_ARM_R1: CV_HREG_e = CV_HREG_e(11i32);
    pub const CV_ARM_R10: CV_HREG_e = CV_HREG_e(20i32);
    pub const CV_ARM_R11: CV_HREG_e = CV_HREG_e(21i32);
    pub const CV_ARM_R12: CV_HREG_e = CV_HREG_e(22i32);
    pub const CV_ARM_R2: CV_HREG_e = CV_HREG_e(12i32);
    pub const CV_ARM_R3: CV_HREG_e = CV_HREG_e(13i32);
    pub const CV_ARM_R4: CV_HREG_e = CV_HREG_e(14i32);
    pub const CV_ARM_R5: CV_HREG_e = CV_HREG_e(15i32);
    pub const CV_ARM_R6: CV_HREG_e = CV_HREG_e(16i32);
    pub const CV_ARM_R7: CV_HREG_e = CV_HREG_e(17i32);
    pub const CV_ARM_R8: CV_HREG_e = CV_HREG_e(18i32);
    pub const CV_ARM_R9: CV_HREG_e = CV_HREG_e(19i32);
    pub const CV_ARM_SP: CV_HREG_e = CV_HREG_e(23i32);
    pub const CV_ARM_WC12: CV_HREG_e = CV_HREG_e(156i32);
    pub const CV_ARM_WC13: CV_HREG_e = CV_HREG_e(157i32);
    pub const CV_ARM_WC14: CV_HREG_e = CV_HREG_e(158i32);
    pub const CV_ARM_WC15: CV_HREG_e = CV_HREG_e(159i32);
    pub const CV_ARM_WC4: CV_HREG_e = CV_HREG_e(148i32);
    pub const CV_ARM_WC5: CV_HREG_e = CV_HREG_e(149i32);
    pub const CV_ARM_WC6: CV_HREG_e = CV_HREG_e(150i32);
    pub const CV_ARM_WC7: CV_HREG_e = CV_HREG_e(151i32);
    pub const CV_ARM_WCASF: CV_HREG_e = CV_HREG_e(147i32);
    pub const CV_ARM_WCGR0: CV_HREG_e = CV_HREG_e(152i32);
    pub const CV_ARM_WCGR1: CV_HREG_e = CV_HREG_e(153i32);
    pub const CV_ARM_WCGR2: CV_HREG_e = CV_HREG_e(154i32);
    pub const CV_ARM_WCGR3: CV_HREG_e = CV_HREG_e(155i32);
    pub const CV_ARM_WCID: CV_HREG_e = CV_HREG_e(144i32);
    pub const CV_ARM_WCON: CV_HREG_e = CV_HREG_e(145i32);
    pub const CV_ARM_WCSSF: CV_HREG_e = CV_HREG_e(146i32);
    pub const CV_ARM_WR0: CV_HREG_e = CV_HREG_e(128i32);
    pub const CV_ARM_WR1: CV_HREG_e = CV_HREG_e(129i32);
    pub const CV_ARM_WR10: CV_HREG_e = CV_HREG_e(138i32);
    pub const CV_ARM_WR11: CV_HREG_e = CV_HREG_e(139i32);
    pub const CV_ARM_WR12: CV_HREG_e = CV_HREG_e(140i32);
    pub const CV_ARM_WR13: CV_HREG_e = CV_HREG_e(141i32);
    pub const CV_ARM_WR14: CV_HREG_e = CV_HREG_e(142i32);
    pub const CV_ARM_WR15: CV_HREG_e = CV_HREG_e(143i32);
    pub const CV_ARM_WR2: CV_HREG_e = CV_HREG_e(130i32);
    pub const CV_ARM_WR3: CV_HREG_e = CV_HREG_e(131i32);
    pub const CV_ARM_WR4: CV_HREG_e = CV_HREG_e(132i32);
    pub const CV_ARM_WR5: CV_HREG_e = CV_HREG_e(133i32);
    pub const CV_ARM_WR6: CV_HREG_e = CV_HREG_e(134i32);
    pub const CV_ARM_WR7: CV_HREG_e = CV_HREG_e(135i32);
    pub const CV_ARM_WR8: CV_HREG_e = CV_HREG_e(136i32);
    pub const CV_ARM_WR9: CV_HREG_e = CV_HREG_e(137i32);
    pub const CV_ASSOCIATIONKIND_COROUTINE: CV_AssociationKind_e = CV_AssociationKind_e(1i32);
    pub const CV_ASSOCIATIONKIND_NONE: CV_AssociationKind_e = CV_AssociationKind_e(0i32);
    pub const CV_BI_HLSL_APPEND_STRUCTURED_BUFFER: CV_builtin_e = CV_builtin_e(540i32);
    pub const CV_BI_HLSL_BUFFER: CV_builtin_e = CV_builtin_e(524i32);
    pub const CV_BI_HLSL_BYTEADDRESS_BUFFER: CV_builtin_e = CV_builtin_e(536i32);
    pub const CV_BI_HLSL_CONSTANT_BUFFER: CV_builtin_e = CV_builtin_e(548i32);
    pub const CV_BI_HLSL_CONSUME_STRUCTURED_BUFFER: CV_builtin_e = CV_builtin_e(541i32);
    pub const CV_BI_HLSL_INPUTPATCH: CV_builtin_e = CV_builtin_e(528i32);
    pub const CV_BI_HLSL_INTERFACE_POINTER: CV_builtin_e = CV_builtin_e(512i32);
    pub const CV_BI_HLSL_LINESTREAM: CV_builtin_e = CV_builtin_e(526i32);
    pub const CV_BI_HLSL_MIN10FLOAT: CV_builtin_e = CV_builtin_e(543i32);
    pub const CV_BI_HLSL_MIN12INT: CV_builtin_e = CV_builtin_e(545i32);
    pub const CV_BI_HLSL_MIN16FLOAT: CV_builtin_e = CV_builtin_e(544i32);
    pub const CV_BI_HLSL_MIN16INT: CV_builtin_e = CV_builtin_e(546i32);
    pub const CV_BI_HLSL_MIN16UINT: CV_builtin_e = CV_builtin_e(547i32);
    pub const CV_BI_HLSL_MIN8FLOAT: CV_builtin_e = CV_builtin_e(542i32);
    pub const CV_BI_HLSL_OUTPUTPATCH: CV_builtin_e = CV_builtin_e(529i32);
    pub const CV_BI_HLSL_POINTSTREAM: CV_builtin_e = CV_builtin_e(525i32);
    pub const CV_BI_HLSL_RWBUFFER: CV_builtin_e = CV_builtin_e(535i32);
    pub const CV_BI_HLSL_RWBYTEADDRESS_BUFFER: CV_builtin_e = CV_builtin_e(537i32);
    pub const CV_BI_HLSL_RWSTRUCTURED_BUFFER: CV_builtin_e = CV_builtin_e(539i32);
    pub const CV_BI_HLSL_RWTEXTURE1D: CV_builtin_e = CV_builtin_e(530i32);
    pub const CV_BI_HLSL_RWTEXTURE1D_ARRAY: CV_builtin_e = CV_builtin_e(531i32);
    pub const CV_BI_HLSL_RWTEXTURE2D: CV_builtin_e = CV_builtin_e(532i32);
    pub const CV_BI_HLSL_RWTEXTURE2D_ARRAY: CV_builtin_e = CV_builtin_e(533i32);
    pub const CV_BI_HLSL_RWTEXTURE3D: CV_builtin_e = CV_builtin_e(534i32);
    pub const CV_BI_HLSL_SAMPLER: CV_builtin_e = CV_builtin_e(522i32);
    pub const CV_BI_HLSL_SAMPLERCOMPARISON: CV_builtin_e = CV_builtin_e(523i32);
    pub const CV_BI_HLSL_STRUCTURED_BUFFER: CV_builtin_e = CV_builtin_e(538i32);
    pub const CV_BI_HLSL_TEXTURE1D: CV_builtin_e = CV_builtin_e(513i32);
    pub const CV_BI_HLSL_TEXTURE1D_ARRAY: CV_builtin_e = CV_builtin_e(514i32);
    pub const CV_BI_HLSL_TEXTURE2D: CV_builtin_e = CV_builtin_e(515i32);
    pub const CV_BI_HLSL_TEXTURE2DMS: CV_builtin_e = CV_builtin_e(520i32);
    pub const CV_BI_HLSL_TEXTURE2DMS_ARRAY: CV_builtin_e = CV_builtin_e(521i32);
    pub const CV_BI_HLSL_TEXTURE2D_ARRAY: CV_builtin_e = CV_builtin_e(516i32);
    pub const CV_BI_HLSL_TEXTURE3D: CV_builtin_e = CV_builtin_e(517i32);
    pub const CV_BI_HLSL_TEXTURECUBE: CV_builtin_e = CV_builtin_e(518i32);
    pub const CV_BI_HLSL_TEXTURECUBE_ARRAY: CV_builtin_e = CV_builtin_e(519i32);
    pub const CV_BI_HLSL_TRIANGLESTREAM: CV_builtin_e = CV_builtin_e(527i32);
    pub const CV_BI_INVALID: CV_builtin_e = CV_builtin_e(0i32);
    pub const CV_CALL_ALPHACALL: CV_call_e = CV_call_e(14i32);
    pub const CV_CALL_AM33CALL: CV_call_e = CV_call_e(18i32);
    pub const CV_CALL_ARMCALL: CV_call_e = CV_call_e(17i32);
    pub const CV_CALL_CLRCALL: CV_call_e = CV_call_e(22i32);
    pub const CV_CALL_FAR_C: CV_call_e = CV_call_e(1i32);
    pub const CV_CALL_FAR_FAST: CV_call_e = CV_call_e(5i32);
    pub const CV_CALL_FAR_PASCAL: CV_call_e = CV_call_e(3i32);
    pub const CV_CALL_FAR_STD: CV_call_e = CV_call_e(8i32);
    pub const CV_CALL_FAR_SYS: CV_call_e = CV_call_e(10i32);
    pub const CV_CALL_GENERIC: CV_call_e = CV_call_e(13i32);
    pub const CV_CALL_INLINE: CV_call_e = CV_call_e(23i32);
    pub const CV_CALL_M32RCALL: CV_call_e = CV_call_e(21i32);
    pub const CV_CALL_MIPSCALL: CV_call_e = CV_call_e(12i32);
    pub const CV_CALL_NEAR_C: CV_call_e = CV_call_e(0i32);
    pub const CV_CALL_NEAR_FAST: CV_call_e = CV_call_e(4i32);
    pub const CV_CALL_NEAR_PASCAL: CV_call_e = CV_call_e(2i32);
    pub const CV_CALL_NEAR_STD: CV_call_e = CV_call_e(7i32);
    pub const CV_CALL_NEAR_SYS: CV_call_e = CV_call_e(9i32);
    pub const CV_CALL_NEAR_VECTOR: CV_call_e = CV_call_e(24i32);
    pub const CV_CALL_PPCCALL: CV_call_e = CV_call_e(15i32);
    pub const CV_CALL_RESERVED: CV_call_e = CV_call_e(32i32);
    pub const CV_CALL_SH5CALL: CV_call_e = CV_call_e(20i32);
    pub const CV_CALL_SHCALL: CV_call_e = CV_call_e(16i32);
    pub const CV_CALL_SKIPPED: CV_call_e = CV_call_e(6i32);
    pub const CV_CALL_SWIFT: CV_call_e = CV_call_e(25i32);
    pub const CV_CALL_THISCALL: CV_call_e = CV_call_e(11i32);
    pub const CV_CALL_TRICALL: CV_call_e = CV_call_e(19i32);
    pub const CV_CFL_80286: CV_CPU_TYPE_e = CV_CPU_TYPE_e(2i32);
    pub const CV_CFL_80386: CV_CPU_TYPE_e = CV_CPU_TYPE_e(3i32);
    pub const CV_CFL_80486: CV_CPU_TYPE_e = CV_CPU_TYPE_e(4i32);
    pub const CV_CFL_8080: CV_CPU_TYPE_e = CV_CPU_TYPE_e(0i32);
    pub const CV_CFL_8086: CV_CPU_TYPE_e = CV_CPU_TYPE_e(1i32);
    pub const CV_CFL_ALIASOBJ: CV_CFL_LANG = CV_CFL_LANG(20i32);
    pub const CV_CFL_ALPHA: CV_CPU_TYPE_e = CV_CPU_TYPE_e(48i32);
    pub const CV_CFL_ALPHA_21064: CV_CPU_TYPE_e = CV_CPU_TYPE_e(48i32);
    pub const CV_CFL_ALPHA_21164: CV_CPU_TYPE_e = CV_CPU_TYPE_e(49i32);
    pub const CV_CFL_ALPHA_21164A: CV_CPU_TYPE_e = CV_CPU_TYPE_e(50i32);
    pub const CV_CFL_ALPHA_21264: CV_CPU_TYPE_e = CV_CPU_TYPE_e(51i32);
    pub const CV_CFL_ALPHA_21364: CV_CPU_TYPE_e = CV_CPU_TYPE_e(52i32);
    pub const CV_CFL_AM33: CV_CPU_TYPE_e = CV_CPU_TYPE_e(160i32);
    pub const CV_CFL_AMD64: CV_CPU_TYPE_e = CV_CPU_TYPE_e(208i32);
    pub const CV_CFL_ARM3: CV_CPU_TYPE_e = CV_CPU_TYPE_e(96i32);
    pub const CV_CFL_ARM4: CV_CPU_TYPE_e = CV_CPU_TYPE_e(97i32);
    pub const CV_CFL_ARM4T: CV_CPU_TYPE_e = CV_CPU_TYPE_e(98i32);
    pub const CV_CFL_ARM5: CV_CPU_TYPE_e = CV_CPU_TYPE_e(99i32);
    pub const CV_CFL_ARM5T: CV_CPU_TYPE_e = CV_CPU_TYPE_e(100i32);
    pub const CV_CFL_ARM6: CV_CPU_TYPE_e = CV_CPU_TYPE_e(101i32);
    pub const CV_CFL_ARM64: CV_CPU_TYPE_e = CV_CPU_TYPE_e(246i32);
    pub const CV_CFL_ARM64EC: CV_CPU_TYPE_e = CV_CPU_TYPE_e(248i32);
    pub const CV_CFL_ARM64X: CV_CPU_TYPE_e = CV_CPU_TYPE_e(249i32);
    pub const CV_CFL_ARM7: CV_CPU_TYPE_e = CV_CPU_TYPE_e(104i32);
    pub const CV_CFL_ARMNT: CV_CPU_TYPE_e = CV_CPU_TYPE_e(244i32);
    pub const CV_CFL_ARM_WMMX: CV_CPU_TYPE_e = CV_CPU_TYPE_e(103i32);
    pub const CV_CFL_ARM_XMAC: CV_CPU_TYPE_e = CV_CPU_TYPE_e(102i32);
    pub const CV_CFL_BASIC: CV_CFL_LANG = CV_CFL_LANG(5i32);
    pub const CV_CFL_C: CV_CFL_LANG = CV_CFL_LANG(0i32);
    pub const CV_CFL_CEE: CV_CPU_TYPE_e = CV_CPU_TYPE_e(144i32);
    pub const CV_CFL_COBOL: CV_CFL_LANG = CV_CFL_LANG(6i32);
    pub const CV_CFL_CSHARP: CV_CFL_LANG = CV_CFL_LANG(10i32);
    pub const CV_CFL_CVTPGD: CV_CFL_LANG = CV_CFL_LANG(9i32);
    pub const CV_CFL_CVTRES: CV_CFL_LANG = CV_CFL_LANG(8i32);
    pub const CV_CFL_CXX: CV_CFL_LANG = CV_CFL_LANG(1i32);
    pub const CV_CFL_D3D11_SHADER: CV_CPU_TYPE_e = CV_CPU_TYPE_e(256i32);
    pub const CV_CFL_EBC: CV_CPU_TYPE_e = CV_CPU_TYPE_e(224i32);
    pub const CV_CFL_FORTRAN: CV_CFL_LANG = CV_CFL_LANG(2i32);
    pub const CV_CFL_GO: CV_CFL_LANG = CV_CFL_LANG(22i32);
    pub const CV_CFL_HLSL: CV_CFL_LANG = CV_CFL_LANG(16i32);
    pub const CV_CFL_HYBRID_X86_ARM64: CV_CPU_TYPE_e = CV_CPU_TYPE_e(247i32);
    pub const CV_CFL_IA64: CV_CPU_TYPE_e = CV_CPU_TYPE_e(128i32);
    pub const CV_CFL_IA64_1: CV_CPU_TYPE_e = CV_CPU_TYPE_e(128i32);
    pub const CV_CFL_IA64_2: CV_CPU_TYPE_e = CV_CPU_TYPE_e(129i32);
    pub const CV_CFL_ILASM: CV_CFL_LANG = CV_CFL_LANG(12i32);
    pub const CV_CFL_JAVA: CV_CFL_LANG = CV_CFL_LANG(13i32);
    pub const CV_CFL_JSCRIPT: CV_CFL_LANG = CV_CFL_LANG(14i32);
    pub const CV_CFL_LINK: CV_CFL_LANG = CV_CFL_LANG(7i32);
    pub const CV_CFL_M32R: CV_CPU_TYPE_e = CV_CPU_TYPE_e(176i32);
    pub const CV_CFL_M68000: CV_CPU_TYPE_e = CV_CPU_TYPE_e(32i32);
    pub const CV_CFL_M68010: CV_CPU_TYPE_e = CV_CPU_TYPE_e(33i32);
    pub const CV_CFL_M68020: CV_CPU_TYPE_e = CV_CPU_TYPE_e(34i32);
    pub const CV_CFL_M68030: CV_CPU_TYPE_e = CV_CPU_TYPE_e(35i32);
    pub const CV_CFL_M68040: CV_CPU_TYPE_e = CV_CPU_TYPE_e(36i32);
    pub const CV_CFL_MASM: CV_CFL_LANG = CV_CFL_LANG(3i32);
    pub const CV_CFL_MIPS: CV_CPU_TYPE_e = CV_CPU_TYPE_e(16i32);
    pub const CV_CFL_MIPS16: CV_CPU_TYPE_e = CV_CPU_TYPE_e(17i32);
    pub const CV_CFL_MIPS32: CV_CPU_TYPE_e = CV_CPU_TYPE_e(18i32);
    pub const CV_CFL_MIPS64: CV_CPU_TYPE_e = CV_CPU_TYPE_e(19i32);
    pub const CV_CFL_MIPSI: CV_CPU_TYPE_e = CV_CPU_TYPE_e(20i32);
    pub const CV_CFL_MIPSII: CV_CPU_TYPE_e = CV_CPU_TYPE_e(21i32);
    pub const CV_CFL_MIPSIII: CV_CPU_TYPE_e = CV_CPU_TYPE_e(22i32);
    pub const CV_CFL_MIPSIV: CV_CPU_TYPE_e = CV_CPU_TYPE_e(23i32);
    pub const CV_CFL_MIPSR4000: CV_CPU_TYPE_e = CV_CPU_TYPE_e(16i32);
    pub const CV_CFL_MIPSV: CV_CPU_TYPE_e = CV_CPU_TYPE_e(24i32);
    pub const CV_CFL_MSIL: CV_CFL_LANG = CV_CFL_LANG(15i32);
    pub const CV_CFL_OBJC: CV_CFL_LANG = CV_CFL_LANG(17i32);
    pub const CV_CFL_OBJCXX: CV_CFL_LANG = CV_CFL_LANG(18i32);
    pub const CV_CFL_OMNI: CV_CPU_TYPE_e = CV_CPU_TYPE_e(112i32);
    pub const CV_CFL_PASCAL: CV_CFL_LANG = CV_CFL_LANG(4i32);
    pub const CV_CFL_PENTIUM: CV_CPU_TYPE_e = CV_CPU_TYPE_e(5i32);
    pub const CV_CFL_PENTIUMII: CV_CPU_TYPE_e = CV_CPU_TYPE_e(6i32);
    pub const CV_CFL_PENTIUMIII: CV_CPU_TYPE_e = CV_CPU_TYPE_e(7i32);
    pub const CV_CFL_PENTIUMPRO: CV_CPU_TYPE_e = CV_CPU_TYPE_e(6i32);
    pub const CV_CFL_PPC601: CV_CPU_TYPE_e = CV_CPU_TYPE_e(64i32);
    pub const CV_CFL_PPC603: CV_CPU_TYPE_e = CV_CPU_TYPE_e(65i32);
    pub const CV_CFL_PPC604: CV_CPU_TYPE_e = CV_CPU_TYPE_e(66i32);
    pub const CV_CFL_PPC620: CV_CPU_TYPE_e = CV_CPU_TYPE_e(67i32);
    pub const CV_CFL_PPCBE: CV_CPU_TYPE_e = CV_CPU_TYPE_e(69i32);
    pub const CV_CFL_PPCFP: CV_CPU_TYPE_e = CV_CPU_TYPE_e(68i32);
    pub const CV_CFL_RUST: CV_CFL_LANG = CV_CFL_LANG(21i32);
    pub const CV_CFL_SH3: CV_CPU_TYPE_e = CV_CPU_TYPE_e(80i32);
    pub const CV_CFL_SH3DSP: CV_CPU_TYPE_e = CV_CPU_TYPE_e(82i32);
    pub const CV_CFL_SH3E: CV_CPU_TYPE_e = CV_CPU_TYPE_e(81i32);
    pub const CV_CFL_SH4: CV_CPU_TYPE_e = CV_CPU_TYPE_e(83i32);
    pub const CV_CFL_SHMEDIA: CV_CPU_TYPE_e = CV_CPU_TYPE_e(84i32);
    pub const CV_CFL_SWIFT: CV_CFL_LANG = CV_CFL_LANG(19i32);
    pub const CV_CFL_THUMB: CV_CPU_TYPE_e = CV_CPU_TYPE_e(240i32);
    pub const CV_CFL_TRICORE: CV_CPU_TYPE_e = CV_CPU_TYPE_e(192i32);
    pub const CV_CFL_UNKNOWN: CV_CPU_TYPE_e = CV_CPU_TYPE_e(255i32);
    pub const CV_CFL_VB: CV_CFL_LANG = CV_CFL_LANG(11i32);
    pub const CV_CFL_X64: CV_CPU_TYPE_e = CV_CPU_TYPE_e(208i32);
    pub const CV_COROUTINEKIND_DESTROY: CV_CoroutineKind_e = CV_CoroutineKind_e(4i32);
    pub const CV_COROUTINEKIND_INIT: CV_CoroutineKind_e = CV_CoroutineKind_e(2i32);
    pub const CV_COROUTINEKIND_NONE: CV_CoroutineKind_e = CV_CoroutineKind_e(0i32);
    pub const CV_COROUTINEKIND_PRIMARY: CV_CoroutineKind_e = CV_CoroutineKind_e(1i32);
    pub const CV_COROUTINEKIND_RESUME: CV_CoroutineKind_e = CV_CoroutineKind_e(3i32);
    pub const CV_HLSLREG_CONSTANT_BUFFER: CV_HLSLREG_e = CV_HLSLREG_e(8i32);
    pub const CV_HLSLREG_CYCLE_COUNTER: CV_HLSLREG_e = CV_HLSLREG_e(40i32);
    pub const CV_HLSLREG_FUNCTION_BODY: CV_HLSLREG_e = CV_HLSLREG_e(17i32);
    pub const CV_HLSLREG_FUNCTION_INPUT: CV_HLSLREG_e = CV_HLSLREG_e(20i32);
    pub const CV_HLSLREG_FUNCTION_OUTPUT: CV_HLSLREG_e = CV_HLSLREG_e(21i32);
    pub const CV_HLSLREG_FUNCTION_TABLE: CV_HLSLREG_e = CV_HLSLREG_e(18i32);
    pub const CV_HLSLREG_IMMEDIATE32: CV_HLSLREG_e = CV_HLSLREG_e(4i32);
    pub const CV_HLSLREG_IMMEDIATE64: CV_HLSLREG_e = CV_HLSLREG_e(5i32);
    pub const CV_HLSLREG_IMMEDIATE_CONSTANT_BUFFER: CV_HLSLREG_e = CV_HLSLREG_e(9i32);
    pub const CV_HLSLREG_INDEXABLE_TEMP: CV_HLSLREG_e = CV_HLSLREG_e(3i32);
    pub const CV_HLSLREG_INPUT: CV_HLSLREG_e = CV_HLSLREG_e(1i32);
    pub const CV_HLSLREG_INPUT_CONTROL_POINT: CV_HLSLREG_e = CV_HLSLREG_e(25i32);
    pub const CV_HLSLREG_INPUT_COVERAGE_MASK: CV_HLSLREG_e = CV_HLSLREG_e(35i32);
    pub const CV_HLSLREG_INPUT_DOMAIN_POINT: CV_HLSLREG_e = CV_HLSLREG_e(28i32);
    pub const CV_HLSLREG_INPUT_FORK_INSTANCE_ID: CV_HLSLREG_e = CV_HLSLREG_e(23i32);
    pub const CV_HLSLREG_INPUT_GS_INSTANCE_ID: CV_HLSLREG_e = CV_HLSLREG_e(37i32);
    pub const CV_HLSLREG_INPUT_JOIN_INSTANCE_ID: CV_HLSLREG_e = CV_HLSLREG_e(24i32);
    pub const CV_HLSLREG_INPUT_PATCH_CONSTANT: CV_HLSLREG_e = CV_HLSLREG_e(27i32);
    pub const CV_HLSLREG_INPUT_PRIMITIVEID: CV_HLSLREG_e = CV_HLSLREG_e(11i32);
    pub const CV_HLSLREG_INPUT_THREAD_GROUP_ID: CV_HLSLREG_e = CV_HLSLREG_e(33i32);
    pub const CV_HLSLREG_INPUT_THREAD_ID: CV_HLSLREG_e = CV_HLSLREG_e(32i32);
    pub const CV_HLSLREG_INPUT_THREAD_ID_IN_GROUP: CV_HLSLREG_e = CV_HLSLREG_e(34i32);
    pub const CV_HLSLREG_INPUT_THREAD_ID_IN_GROUP_FLATTENED: CV_HLSLREG_e = CV_HLSLREG_e(36i32);
    pub const CV_HLSLREG_INTERFACE: CV_HLSLREG_e = CV_HLSLREG_e(19i32);
    pub const CV_HLSLREG_LABEL: CV_HLSLREG_e = CV_HLSLREG_e(10i32);
    pub const CV_HLSLREG_NULL: CV_HLSLREG_e = CV_HLSLREG_e(13i32);
    pub const CV_HLSLREG_OUTPUT: CV_HLSLREG_e = CV_HLSLREG_e(2i32);
    pub const CV_HLSLREG_OUTPUT_CONTROL_POINT: CV_HLSLREG_e = CV_HLSLREG_e(26i32);
    pub const CV_HLSLREG_OUTPUT_CONTROL_POINT_ID: CV_HLSLREG_e = CV_HLSLREG_e(22i32);
    pub const CV_HLSLREG_OUTPUT_COVERAGE_MASK: CV_HLSLREG_e = CV_HLSLREG_e(15i32);
    pub const CV_HLSLREG_OUTPUT_DEPTH: CV_HLSLREG_e = CV_HLSLREG_e(12i32);
    pub const CV_HLSLREG_OUTPUT_DEPTH_GREATER_EQUAL: CV_HLSLREG_e = CV_HLSLREG_e(38i32);
    pub const CV_HLSLREG_OUTPUT_DEPTH_LESS_EQUAL: CV_HLSLREG_e = CV_HLSLREG_e(39i32);
    pub const CV_HLSLREG_RASTERIZER: CV_HLSLREG_e = CV_HLSLREG_e(14i32);
    pub const CV_HLSLREG_RESOURCE: CV_HLSLREG_e = CV_HLSLREG_e(7i32);
    pub const CV_HLSLREG_SAMPLER: CV_HLSLREG_e = CV_HLSLREG_e(6i32);
    pub const CV_HLSLREG_STREAM: CV_HLSLREG_e = CV_HLSLREG_e(16i32);
    pub const CV_HLSLREG_TEMP: CV_HLSLREG_e = CV_HLSLREG_e(0i32);
    pub const CV_HLSLREG_THIS_POINTER: CV_HLSLREG_e = CV_HLSLREG_e(29i32);
    pub const CV_HLSLREG_THREAD_GROUP_SHARED_MEMORY: CV_HLSLREG_e = CV_HLSLREG_e(31i32);
    pub const CV_HLSLREG_UNORDERED_ACCESS_VIEW: CV_HLSLREG_e = CV_HLSLREG_e(30i32);
    pub const CV_HLSL_MEMSPACE_DATA: CV_HLSLMemorySpace_e = CV_HLSLMemorySpace_e(0i32);
    pub const CV_HLSL_MEMSPACE_MAX: CV_HLSLMemorySpace_e = CV_HLSLMemorySpace_e(15i32);
    pub const CV_HLSL_MEMSPACE_RESOURCE: CV_HLSLMemorySpace_e = CV_HLSLMemorySpace_e(2i32);
    pub const CV_HLSL_MEMSPACE_RWRESOURCE: CV_HLSLMemorySpace_e = CV_HLSLMemorySpace_e(3i32);
    pub const CV_HLSL_MEMSPACE_SAMPLER: CV_HLSLMemorySpace_e = CV_HLSLMemorySpace_e(1i32);
    pub const CV_IA64_AR10: CV_HREG_e = CV_HREG_e(3082i32);
    pub const CV_IA64_AR100: CV_HREG_e = CV_HREG_e(3172i32);
    pub const CV_IA64_AR101: CV_HREG_e = CV_HREG_e(3173i32);
    pub const CV_IA64_AR102: CV_HREG_e = CV_HREG_e(3174i32);
    pub const CV_IA64_AR103: CV_HREG_e = CV_HREG_e(3175i32);
    pub const CV_IA64_AR104: CV_HREG_e = CV_HREG_e(3176i32);
    pub const CV_IA64_AR105: CV_HREG_e = CV_HREG_e(3177i32);
    pub const CV_IA64_AR106: CV_HREG_e = CV_HREG_e(3178i32);
    pub const CV_IA64_AR107: CV_HREG_e = CV_HREG_e(3179i32);
    pub const CV_IA64_AR108: CV_HREG_e = CV_HREG_e(3180i32);
    pub const CV_IA64_AR109: CV_HREG_e = CV_HREG_e(3181i32);
    pub const CV_IA64_AR11: CV_HREG_e = CV_HREG_e(3083i32);
    pub const CV_IA64_AR110: CV_HREG_e = CV_HREG_e(3182i32);
    pub const CV_IA64_AR111: CV_HREG_e = CV_HREG_e(3183i32);
    pub const CV_IA64_AR112: CV_HREG_e = CV_HREG_e(3184i32);
    pub const CV_IA64_AR113: CV_HREG_e = CV_HREG_e(3185i32);
    pub const CV_IA64_AR114: CV_HREG_e = CV_HREG_e(3186i32);
    pub const CV_IA64_AR115: CV_HREG_e = CV_HREG_e(3187i32);
    pub const CV_IA64_AR116: CV_HREG_e = CV_HREG_e(3188i32);
    pub const CV_IA64_AR117: CV_HREG_e = CV_HREG_e(3189i32);
    pub const CV_IA64_AR118: CV_HREG_e = CV_HREG_e(3190i32);
    pub const CV_IA64_AR119: CV_HREG_e = CV_HREG_e(3191i32);
    pub const CV_IA64_AR12: CV_HREG_e = CV_HREG_e(3084i32);
    pub const CV_IA64_AR120: CV_HREG_e = CV_HREG_e(3192i32);
    pub const CV_IA64_AR121: CV_HREG_e = CV_HREG_e(3193i32);
    pub const CV_IA64_AR122: CV_HREG_e = CV_HREG_e(3194i32);
    pub const CV_IA64_AR123: CV_HREG_e = CV_HREG_e(3195i32);
    pub const CV_IA64_AR124: CV_HREG_e = CV_HREG_e(3196i32);
    pub const CV_IA64_AR125: CV_HREG_e = CV_HREG_e(3197i32);
    pub const CV_IA64_AR126: CV_HREG_e = CV_HREG_e(3198i32);
    pub const CV_IA64_AR127: CV_HREG_e = CV_HREG_e(3199i32);
    pub const CV_IA64_AR13: CV_HREG_e = CV_HREG_e(3085i32);
    pub const CV_IA64_AR14: CV_HREG_e = CV_HREG_e(3086i32);
    pub const CV_IA64_AR15: CV_HREG_e = CV_HREG_e(3087i32);
    pub const CV_IA64_AR20: CV_HREG_e = CV_HREG_e(3092i32);
    pub const CV_IA64_AR22: CV_HREG_e = CV_HREG_e(3094i32);
    pub const CV_IA64_AR23: CV_HREG_e = CV_HREG_e(3095i32);
    pub const CV_IA64_AR31: CV_HREG_e = CV_HREG_e(3103i32);
    pub const CV_IA64_AR33: CV_HREG_e = CV_HREG_e(3105i32);
    pub const CV_IA64_AR34: CV_HREG_e = CV_HREG_e(3106i32);
    pub const CV_IA64_AR35: CV_HREG_e = CV_HREG_e(3107i32);
    pub const CV_IA64_AR37: CV_HREG_e = CV_HREG_e(3109i32);
    pub const CV_IA64_AR38: CV_HREG_e = CV_HREG_e(3110i32);
    pub const CV_IA64_AR39: CV_HREG_e = CV_HREG_e(3111i32);
    pub const CV_IA64_AR41: CV_HREG_e = CV_HREG_e(3113i32);
    pub const CV_IA64_AR42: CV_HREG_e = CV_HREG_e(3114i32);
    pub const CV_IA64_AR43: CV_HREG_e = CV_HREG_e(3115i32);
    pub const CV_IA64_AR45: CV_HREG_e = CV_HREG_e(3117i32);
    pub const CV_IA64_AR46: CV_HREG_e = CV_HREG_e(3118i32);
    pub const CV_IA64_AR47: CV_HREG_e = CV_HREG_e(3119i32);
    pub const CV_IA64_AR48: CV_HREG_e = CV_HREG_e(3120i32);
    pub const CV_IA64_AR49: CV_HREG_e = CV_HREG_e(3121i32);
    pub const CV_IA64_AR50: CV_HREG_e = CV_HREG_e(3122i32);
    pub const CV_IA64_AR51: CV_HREG_e = CV_HREG_e(3123i32);
    pub const CV_IA64_AR52: CV_HREG_e = CV_HREG_e(3124i32);
    pub const CV_IA64_AR53: CV_HREG_e = CV_HREG_e(3125i32);
    pub const CV_IA64_AR54: CV_HREG_e = CV_HREG_e(3126i32);
    pub const CV_IA64_AR55: CV_HREG_e = CV_HREG_e(3127i32);
    pub const CV_IA64_AR56: CV_HREG_e = CV_HREG_e(3128i32);
    pub const CV_IA64_AR57: CV_HREG_e = CV_HREG_e(3129i32);
    pub const CV_IA64_AR58: CV_HREG_e = CV_HREG_e(3130i32);
    pub const CV_IA64_AR59: CV_HREG_e = CV_HREG_e(3131i32);
    pub const CV_IA64_AR60: CV_HREG_e = CV_HREG_e(3132i32);
    pub const CV_IA64_AR61: CV_HREG_e = CV_HREG_e(3133i32);
    pub const CV_IA64_AR62: CV_HREG_e = CV_HREG_e(3134i32);
    pub const CV_IA64_AR63: CV_HREG_e = CV_HREG_e(3135i32);
    pub const CV_IA64_AR67: CV_HREG_e = CV_HREG_e(3139i32);
    pub const CV_IA64_AR68: CV_HREG_e = CV_HREG_e(3140i32);
    pub const CV_IA64_AR69: CV_HREG_e = CV_HREG_e(3141i32);
    pub const CV_IA64_AR70: CV_HREG_e = CV_HREG_e(3142i32);
    pub const CV_IA64_AR71: CV_HREG_e = CV_HREG_e(3143i32);
    pub const CV_IA64_AR72: CV_HREG_e = CV_HREG_e(3144i32);
    pub const CV_IA64_AR73: CV_HREG_e = CV_HREG_e(3145i32);
    pub const CV_IA64_AR74: CV_HREG_e = CV_HREG_e(3146i32);
    pub const CV_IA64_AR75: CV_HREG_e = CV_HREG_e(3147i32);
    pub const CV_IA64_AR76: CV_HREG_e = CV_HREG_e(3148i32);
    pub const CV_IA64_AR77: CV_HREG_e = CV_HREG_e(3149i32);
    pub const CV_IA64_AR78: CV_HREG_e = CV_HREG_e(3150i32);
    pub const CV_IA64_AR79: CV_HREG_e = CV_HREG_e(3151i32);
    pub const CV_IA64_AR8: CV_HREG_e = CV_HREG_e(3080i32);
    pub const CV_IA64_AR80: CV_HREG_e = CV_HREG_e(3152i32);
    pub const CV_IA64_AR81: CV_HREG_e = CV_HREG_e(3153i32);
    pub const CV_IA64_AR82: CV_HREG_e = CV_HREG_e(3154i32);
    pub const CV_IA64_AR83: CV_HREG_e = CV_HREG_e(3155i32);
    pub const CV_IA64_AR84: CV_HREG_e = CV_HREG_e(3156i32);
    pub const CV_IA64_AR85: CV_HREG_e = CV_HREG_e(3157i32);
    pub const CV_IA64_AR86: CV_HREG_e = CV_HREG_e(3158i32);
    pub const CV_IA64_AR87: CV_HREG_e = CV_HREG_e(3159i32);
    pub const CV_IA64_AR88: CV_HREG_e = CV_HREG_e(3160i32);
    pub const CV_IA64_AR89: CV_HREG_e = CV_HREG_e(3161i32);
    pub const CV_IA64_AR9: CV_HREG_e = CV_HREG_e(3081i32);
    pub const CV_IA64_AR90: CV_HREG_e = CV_HREG_e(3162i32);
    pub const CV_IA64_AR91: CV_HREG_e = CV_HREG_e(3163i32);
    pub const CV_IA64_AR92: CV_HREG_e = CV_HREG_e(3164i32);
    pub const CV_IA64_AR93: CV_HREG_e = CV_HREG_e(3165i32);
    pub const CV_IA64_AR94: CV_HREG_e = CV_HREG_e(3166i32);
    pub const CV_IA64_AR95: CV_HREG_e = CV_HREG_e(3167i32);
    pub const CV_IA64_AR96: CV_HREG_e = CV_HREG_e(3168i32);
    pub const CV_IA64_AR97: CV_HREG_e = CV_HREG_e(3169i32);
    pub const CV_IA64_AR98: CV_HREG_e = CV_HREG_e(3170i32);
    pub const CV_IA64_AR99: CV_HREG_e = CV_HREG_e(3171i32);
    pub const CV_IA64_ApCCV: CV_HREG_e = CV_HREG_e(3104i32);
    pub const CV_IA64_ApDCR: CV_HREG_e = CV_HREG_e(4096i32);
    pub const CV_IA64_ApEC: CV_HREG_e = CV_HREG_e(3138i32);
    pub const CV_IA64_ApGPTA: CV_HREG_e = CV_HREG_e(4105i32);
    pub const CV_IA64_ApITC: CV_HREG_e = CV_HREG_e(3116i32);
    pub const CV_IA64_ApITM: CV_HREG_e = CV_HREG_e(4097i32);
    pub const CV_IA64_ApIVA: CV_HREG_e = CV_HREG_e(4098i32);
    pub const CV_IA64_ApKR0: CV_HREG_e = CV_HREG_e(3072i32);
    pub const CV_IA64_ApKR1: CV_HREG_e = CV_HREG_e(3073i32);
    pub const CV_IA64_ApKR2: CV_HREG_e = CV_HREG_e(3074i32);
    pub const CV_IA64_ApKR3: CV_HREG_e = CV_HREG_e(3075i32);
    pub const CV_IA64_ApKR4: CV_HREG_e = CV_HREG_e(3076i32);
    pub const CV_IA64_ApKR5: CV_HREG_e = CV_HREG_e(3077i32);
    pub const CV_IA64_ApKR6: CV_HREG_e = CV_HREG_e(3078i32);
    pub const CV_IA64_ApKR7: CV_HREG_e = CV_HREG_e(3079i32);
    pub const CV_IA64_ApLC: CV_HREG_e = CV_HREG_e(3137i32);
    pub const CV_IA64_ApPTA: CV_HREG_e = CV_HREG_e(4104i32);
    pub const CV_IA64_ApUNAT: CV_HREG_e = CV_HREG_e(3108i32);
    pub const CV_IA64_Br0: CV_HREG_e = CV_HREG_e(512i32);
    pub const CV_IA64_Br1: CV_HREG_e = CV_HREG_e(513i32);
    pub const CV_IA64_Br2: CV_HREG_e = CV_HREG_e(514i32);
    pub const CV_IA64_Br3: CV_HREG_e = CV_HREG_e(515i32);
    pub const CV_IA64_Br4: CV_HREG_e = CV_HREG_e(516i32);
    pub const CV_IA64_Br5: CV_HREG_e = CV_HREG_e(517i32);
    pub const CV_IA64_Br6: CV_HREG_e = CV_HREG_e(518i32);
    pub const CV_IA64_Br7: CV_HREG_e = CV_HREG_e(519i32);
    pub const CV_IA64_CFLG: CV_HREG_e = CV_HREG_e(3099i32);
    pub const CV_IA64_CPUID0: CV_HREG_e = CV_HREG_e(3328i32);
    pub const CV_IA64_CPUID1: CV_HREG_e = CV_HREG_e(3329i32);
    pub const CV_IA64_CPUID2: CV_HREG_e = CV_HREG_e(3330i32);
    pub const CV_IA64_CPUID3: CV_HREG_e = CV_HREG_e(3331i32);
    pub const CV_IA64_CPUID4: CV_HREG_e = CV_HREG_e(3332i32);
    pub const CV_IA64_CR10: CV_HREG_e = CV_HREG_e(4106i32);
    pub const CV_IA64_CR100: CV_HREG_e = CV_HREG_e(4196i32);
    pub const CV_IA64_CR101: CV_HREG_e = CV_HREG_e(4197i32);
    pub const CV_IA64_CR102: CV_HREG_e = CV_HREG_e(4198i32);
    pub const CV_IA64_CR103: CV_HREG_e = CV_HREG_e(4199i32);
    pub const CV_IA64_CR104: CV_HREG_e = CV_HREG_e(4200i32);
    pub const CV_IA64_CR105: CV_HREG_e = CV_HREG_e(4201i32);
    pub const CV_IA64_CR106: CV_HREG_e = CV_HREG_e(4202i32);
    pub const CV_IA64_CR107: CV_HREG_e = CV_HREG_e(4203i32);
    pub const CV_IA64_CR108: CV_HREG_e = CV_HREG_e(4204i32);
    pub const CV_IA64_CR109: CV_HREG_e = CV_HREG_e(4205i32);
    pub const CV_IA64_CR11: CV_HREG_e = CV_HREG_e(4107i32);
    pub const CV_IA64_CR110: CV_HREG_e = CV_HREG_e(4206i32);
    pub const CV_IA64_CR111: CV_HREG_e = CV_HREG_e(4207i32);
    pub const CV_IA64_CR112: CV_HREG_e = CV_HREG_e(4208i32);
    pub const CV_IA64_CR113: CV_HREG_e = CV_HREG_e(4209i32);
    pub const CV_IA64_CR114: CV_HREG_e = CV_HREG_e(4210i32);
    pub const CV_IA64_CR115: CV_HREG_e = CV_HREG_e(4211i32);
    pub const CV_IA64_CR116: CV_HREG_e = CV_HREG_e(4212i32);
    pub const CV_IA64_CR117: CV_HREG_e = CV_HREG_e(4213i32);
    pub const CV_IA64_CR118: CV_HREG_e = CV_HREG_e(4214i32);
    pub const CV_IA64_CR119: CV_HREG_e = CV_HREG_e(4215i32);
    pub const CV_IA64_CR12: CV_HREG_e = CV_HREG_e(4108i32);
    pub const CV_IA64_CR120: CV_HREG_e = CV_HREG_e(4216i32);
    pub const CV_IA64_CR121: CV_HREG_e = CV_HREG_e(4217i32);
    pub const CV_IA64_CR122: CV_HREG_e = CV_HREG_e(4218i32);
    pub const CV_IA64_CR123: CV_HREG_e = CV_HREG_e(4219i32);
    pub const CV_IA64_CR124: CV_HREG_e = CV_HREG_e(4220i32);
    pub const CV_IA64_CR125: CV_HREG_e = CV_HREG_e(4221i32);
    pub const CV_IA64_CR126: CV_HREG_e = CV_HREG_e(4222i32);
    pub const CV_IA64_CR127: CV_HREG_e = CV_HREG_e(4223i32);
    pub const CV_IA64_CR13: CV_HREG_e = CV_HREG_e(4109i32);
    pub const CV_IA64_CR14: CV_HREG_e = CV_HREG_e(4110i32);
    pub const CV_IA64_CR15: CV_HREG_e = CV_HREG_e(4111i32);
    pub const CV_IA64_CR18: CV_HREG_e = CV_HREG_e(4114i32);
    pub const CV_IA64_CR26: CV_HREG_e = CV_HREG_e(4122i32);
    pub const CV_IA64_CR27: CV_HREG_e = CV_HREG_e(4123i32);
    pub const CV_IA64_CR28: CV_HREG_e = CV_HREG_e(4124i32);
    pub const CV_IA64_CR29: CV_HREG_e = CV_HREG_e(4125i32);
    pub const CV_IA64_CR3: CV_HREG_e = CV_HREG_e(4099i32);
    pub const CV_IA64_CR30: CV_HREG_e = CV_HREG_e(4126i32);
    pub const CV_IA64_CR31: CV_HREG_e = CV_HREG_e(4127i32);
    pub const CV_IA64_CR32: CV_HREG_e = CV_HREG_e(4128i32);
    pub const CV_IA64_CR33: CV_HREG_e = CV_HREG_e(4129i32);
    pub const CV_IA64_CR34: CV_HREG_e = CV_HREG_e(4130i32);
    pub const CV_IA64_CR35: CV_HREG_e = CV_HREG_e(4131i32);
    pub const CV_IA64_CR36: CV_HREG_e = CV_HREG_e(4132i32);
    pub const CV_IA64_CR37: CV_HREG_e = CV_HREG_e(4133i32);
    pub const CV_IA64_CR38: CV_HREG_e = CV_HREG_e(4134i32);
    pub const CV_IA64_CR39: CV_HREG_e = CV_HREG_e(4135i32);
    pub const CV_IA64_CR4: CV_HREG_e = CV_HREG_e(4100i32);
    pub const CV_IA64_CR40: CV_HREG_e = CV_HREG_e(4136i32);
    pub const CV_IA64_CR41: CV_HREG_e = CV_HREG_e(4137i32);
    pub const CV_IA64_CR42: CV_HREG_e = CV_HREG_e(4138i32);
    pub const CV_IA64_CR43: CV_HREG_e = CV_HREG_e(4139i32);
    pub const CV_IA64_CR44: CV_HREG_e = CV_HREG_e(4140i32);
    pub const CV_IA64_CR45: CV_HREG_e = CV_HREG_e(4141i32);
    pub const CV_IA64_CR46: CV_HREG_e = CV_HREG_e(4142i32);
    pub const CV_IA64_CR47: CV_HREG_e = CV_HREG_e(4143i32);
    pub const CV_IA64_CR48: CV_HREG_e = CV_HREG_e(4144i32);
    pub const CV_IA64_CR49: CV_HREG_e = CV_HREG_e(4145i32);
    pub const CV_IA64_CR5: CV_HREG_e = CV_HREG_e(4101i32);
    pub const CV_IA64_CR50: CV_HREG_e = CV_HREG_e(4146i32);
    pub const CV_IA64_CR51: CV_HREG_e = CV_HREG_e(4147i32);
    pub const CV_IA64_CR52: CV_HREG_e = CV_HREG_e(4148i32);
    pub const CV_IA64_CR53: CV_HREG_e = CV_HREG_e(4149i32);
    pub const CV_IA64_CR54: CV_HREG_e = CV_HREG_e(4150i32);
    pub const CV_IA64_CR55: CV_HREG_e = CV_HREG_e(4151i32);
    pub const CV_IA64_CR56: CV_HREG_e = CV_HREG_e(4152i32);
    pub const CV_IA64_CR57: CV_HREG_e = CV_HREG_e(4153i32);
    pub const CV_IA64_CR58: CV_HREG_e = CV_HREG_e(4154i32);
    pub const CV_IA64_CR59: CV_HREG_e = CV_HREG_e(4155i32);
    pub const CV_IA64_CR6: CV_HREG_e = CV_HREG_e(4102i32);
    pub const CV_IA64_CR60: CV_HREG_e = CV_HREG_e(4156i32);
    pub const CV_IA64_CR61: CV_HREG_e = CV_HREG_e(4157i32);
    pub const CV_IA64_CR62: CV_HREG_e = CV_HREG_e(4158i32);
    pub const CV_IA64_CR63: CV_HREG_e = CV_HREG_e(4159i32);
    pub const CV_IA64_CR7: CV_HREG_e = CV_HREG_e(4103i32);
    pub const CV_IA64_CR75: CV_HREG_e = CV_HREG_e(4171i32);
    pub const CV_IA64_CR76: CV_HREG_e = CV_HREG_e(4172i32);
    pub const CV_IA64_CR77: CV_HREG_e = CV_HREG_e(4173i32);
    pub const CV_IA64_CR78: CV_HREG_e = CV_HREG_e(4174i32);
    pub const CV_IA64_CR79: CV_HREG_e = CV_HREG_e(4175i32);
    pub const CV_IA64_CR82: CV_HREG_e = CV_HREG_e(4178i32);
    pub const CV_IA64_CR83: CV_HREG_e = CV_HREG_e(4179i32);
    pub const CV_IA64_CR84: CV_HREG_e = CV_HREG_e(4180i32);
    pub const CV_IA64_CR85: CV_HREG_e = CV_HREG_e(4181i32);
    pub const CV_IA64_CR86: CV_HREG_e = CV_HREG_e(4182i32);
    pub const CV_IA64_CR87: CV_HREG_e = CV_HREG_e(4183i32);
    pub const CV_IA64_CR88: CV_HREG_e = CV_HREG_e(4184i32);
    pub const CV_IA64_CR89: CV_HREG_e = CV_HREG_e(4185i32);
    pub const CV_IA64_CR90: CV_HREG_e = CV_HREG_e(4186i32);
    pub const CV_IA64_CR91: CV_HREG_e = CV_HREG_e(4187i32);
    pub const CV_IA64_CR92: CV_HREG_e = CV_HREG_e(4188i32);
    pub const CV_IA64_CR93: CV_HREG_e = CV_HREG_e(4189i32);
    pub const CV_IA64_CR94: CV_HREG_e = CV_HREG_e(4190i32);
    pub const CV_IA64_CR95: CV_HREG_e = CV_HREG_e(4191i32);
    pub const CV_IA64_CR96: CV_HREG_e = CV_HREG_e(4192i32);
    pub const CV_IA64_CR97: CV_HREG_e = CV_HREG_e(4193i32);
    pub const CV_IA64_CR98: CV_HREG_e = CV_HREG_e(4194i32);
    pub const CV_IA64_CR99: CV_HREG_e = CV_HREG_e(4195i32);
    pub const CV_IA64_CSD: CV_HREG_e = CV_HREG_e(3097i32);
    pub const CV_IA64_Cfm: CV_HREG_e = CV_HREG_e(1018i32);
    pub const CV_IA64_DbD0: CV_HREG_e = CV_HREG_e(8576i32);
    pub const CV_IA64_DbD1: CV_HREG_e = CV_HREG_e(8577i32);
    pub const CV_IA64_DbD2: CV_HREG_e = CV_HREG_e(8578i32);
    pub const CV_IA64_DbD3: CV_HREG_e = CV_HREG_e(8579i32);
    pub const CV_IA64_DbD4: CV_HREG_e = CV_HREG_e(8580i32);
    pub const CV_IA64_DbD5: CV_HREG_e = CV_HREG_e(8581i32);
    pub const CV_IA64_DbD6: CV_HREG_e = CV_HREG_e(8582i32);
    pub const CV_IA64_DbD7: CV_HREG_e = CV_HREG_e(8583i32);
    pub const CV_IA64_DbI0: CV_HREG_e = CV_HREG_e(8448i32);
    pub const CV_IA64_DbI1: CV_HREG_e = CV_HREG_e(8449i32);
    pub const CV_IA64_DbI2: CV_HREG_e = CV_HREG_e(8450i32);
    pub const CV_IA64_DbI3: CV_HREG_e = CV_HREG_e(8451i32);
    pub const CV_IA64_DbI4: CV_HREG_e = CV_HREG_e(8452i32);
    pub const CV_IA64_DbI5: CV_HREG_e = CV_HREG_e(8453i32);
    pub const CV_IA64_DbI6: CV_HREG_e = CV_HREG_e(8454i32);
    pub const CV_IA64_DbI7: CV_HREG_e = CV_HREG_e(8455i32);
    pub const CV_IA64_EFLAG: CV_HREG_e = CV_HREG_e(3096i32);
    pub const CV_IA64_FltF0: CV_HREG_e = CV_HREG_e(2048i32);
    pub const CV_IA64_FltF1: CV_HREG_e = CV_HREG_e(2049i32);
    pub const CV_IA64_FltF10: CV_HREG_e = CV_HREG_e(2058i32);
    pub const CV_IA64_FltF100: CV_HREG_e = CV_HREG_e(2148i32);
    pub const CV_IA64_FltF101: CV_HREG_e = CV_HREG_e(2149i32);
    pub const CV_IA64_FltF102: CV_HREG_e = CV_HREG_e(2150i32);
    pub const CV_IA64_FltF103: CV_HREG_e = CV_HREG_e(2151i32);
    pub const CV_IA64_FltF104: CV_HREG_e = CV_HREG_e(2152i32);
    pub const CV_IA64_FltF105: CV_HREG_e = CV_HREG_e(2153i32);
    pub const CV_IA64_FltF106: CV_HREG_e = CV_HREG_e(2154i32);
    pub const CV_IA64_FltF107: CV_HREG_e = CV_HREG_e(2155i32);
    pub const CV_IA64_FltF108: CV_HREG_e = CV_HREG_e(2156i32);
    pub const CV_IA64_FltF109: CV_HREG_e = CV_HREG_e(2157i32);
    pub const CV_IA64_FltF11: CV_HREG_e = CV_HREG_e(2059i32);
    pub const CV_IA64_FltF110: CV_HREG_e = CV_HREG_e(2158i32);
    pub const CV_IA64_FltF111: CV_HREG_e = CV_HREG_e(2159i32);
    pub const CV_IA64_FltF112: CV_HREG_e = CV_HREG_e(2160i32);
    pub const CV_IA64_FltF113: CV_HREG_e = CV_HREG_e(2161i32);
    pub const CV_IA64_FltF114: CV_HREG_e = CV_HREG_e(2162i32);
    pub const CV_IA64_FltF115: CV_HREG_e = CV_HREG_e(2163i32);
    pub const CV_IA64_FltF116: CV_HREG_e = CV_HREG_e(2164i32);
    pub const CV_IA64_FltF117: CV_HREG_e = CV_HREG_e(2165i32);
    pub const CV_IA64_FltF118: CV_HREG_e = CV_HREG_e(2166i32);
    pub const CV_IA64_FltF119: CV_HREG_e = CV_HREG_e(2167i32);
    pub const CV_IA64_FltF12: CV_HREG_e = CV_HREG_e(2060i32);
    pub const CV_IA64_FltF120: CV_HREG_e = CV_HREG_e(2168i32);
    pub const CV_IA64_FltF121: CV_HREG_e = CV_HREG_e(2169i32);
    pub const CV_IA64_FltF122: CV_HREG_e = CV_HREG_e(2170i32);
    pub const CV_IA64_FltF123: CV_HREG_e = CV_HREG_e(2171i32);
    pub const CV_IA64_FltF124: CV_HREG_e = CV_HREG_e(2172i32);
    pub const CV_IA64_FltF125: CV_HREG_e = CV_HREG_e(2173i32);
    pub const CV_IA64_FltF126: CV_HREG_e = CV_HREG_e(2174i32);
    pub const CV_IA64_FltF127: CV_HREG_e = CV_HREG_e(2175i32);
    pub const CV_IA64_FltF13: CV_HREG_e = CV_HREG_e(2061i32);
    pub const CV_IA64_FltF14: CV_HREG_e = CV_HREG_e(2062i32);
    pub const CV_IA64_FltF15: CV_HREG_e = CV_HREG_e(2063i32);
    pub const CV_IA64_FltF16: CV_HREG_e = CV_HREG_e(2064i32);
    pub const CV_IA64_FltF17: CV_HREG_e = CV_HREG_e(2065i32);
    pub const CV_IA64_FltF18: CV_HREG_e = CV_HREG_e(2066i32);
    pub const CV_IA64_FltF19: CV_HREG_e = CV_HREG_e(2067i32);
    pub const CV_IA64_FltF2: CV_HREG_e = CV_HREG_e(2050i32);
    pub const CV_IA64_FltF20: CV_HREG_e = CV_HREG_e(2068i32);
    pub const CV_IA64_FltF21: CV_HREG_e = CV_HREG_e(2069i32);
    pub const CV_IA64_FltF22: CV_HREG_e = CV_HREG_e(2070i32);
    pub const CV_IA64_FltF23: CV_HREG_e = CV_HREG_e(2071i32);
    pub const CV_IA64_FltF24: CV_HREG_e = CV_HREG_e(2072i32);
    pub const CV_IA64_FltF25: CV_HREG_e = CV_HREG_e(2073i32);
    pub const CV_IA64_FltF26: CV_HREG_e = CV_HREG_e(2074i32);
    pub const CV_IA64_FltF27: CV_HREG_e = CV_HREG_e(2075i32);
    pub const CV_IA64_FltF28: CV_HREG_e = CV_HREG_e(2076i32);
    pub const CV_IA64_FltF29: CV_HREG_e = CV_HREG_e(2077i32);
    pub const CV_IA64_FltF3: CV_HREG_e = CV_HREG_e(2051i32);
    pub const CV_IA64_FltF30: CV_HREG_e = CV_HREG_e(2078i32);
    pub const CV_IA64_FltF31: CV_HREG_e = CV_HREG_e(2079i32);
    pub const CV_IA64_FltF32: CV_HREG_e = CV_HREG_e(2080i32);
    pub const CV_IA64_FltF33: CV_HREG_e = CV_HREG_e(2081i32);
    pub const CV_IA64_FltF34: CV_HREG_e = CV_HREG_e(2082i32);
    pub const CV_IA64_FltF35: CV_HREG_e = CV_HREG_e(2083i32);
    pub const CV_IA64_FltF36: CV_HREG_e = CV_HREG_e(2084i32);
    pub const CV_IA64_FltF37: CV_HREG_e = CV_HREG_e(2085i32);
    pub const CV_IA64_FltF38: CV_HREG_e = CV_HREG_e(2086i32);
    pub const CV_IA64_FltF39: CV_HREG_e = CV_HREG_e(2087i32);
    pub const CV_IA64_FltF4: CV_HREG_e = CV_HREG_e(2052i32);
    pub const CV_IA64_FltF40: CV_HREG_e = CV_HREG_e(2088i32);
    pub const CV_IA64_FltF41: CV_HREG_e = CV_HREG_e(2089i32);
    pub const CV_IA64_FltF42: CV_HREG_e = CV_HREG_e(2090i32);
    pub const CV_IA64_FltF43: CV_HREG_e = CV_HREG_e(2091i32);
    pub const CV_IA64_FltF44: CV_HREG_e = CV_HREG_e(2092i32);
    pub const CV_IA64_FltF45: CV_HREG_e = CV_HREG_e(2093i32);
    pub const CV_IA64_FltF46: CV_HREG_e = CV_HREG_e(2094i32);
    pub const CV_IA64_FltF47: CV_HREG_e = CV_HREG_e(2095i32);
    pub const CV_IA64_FltF48: CV_HREG_e = CV_HREG_e(2096i32);
    pub const CV_IA64_FltF49: CV_HREG_e = CV_HREG_e(2097i32);
    pub const CV_IA64_FltF5: CV_HREG_e = CV_HREG_e(2053i32);
    pub const CV_IA64_FltF50: CV_HREG_e = CV_HREG_e(2098i32);
    pub const CV_IA64_FltF51: CV_HREG_e = CV_HREG_e(2099i32);
    pub const CV_IA64_FltF52: CV_HREG_e = CV_HREG_e(2100i32);
    pub const CV_IA64_FltF53: CV_HREG_e = CV_HREG_e(2101i32);
    pub const CV_IA64_FltF54: CV_HREG_e = CV_HREG_e(2102i32);
    pub const CV_IA64_FltF55: CV_HREG_e = CV_HREG_e(2103i32);
    pub const CV_IA64_FltF56: CV_HREG_e = CV_HREG_e(2104i32);
    pub const CV_IA64_FltF57: CV_HREG_e = CV_HREG_e(2105i32);
    pub const CV_IA64_FltF58: CV_HREG_e = CV_HREG_e(2106i32);
    pub const CV_IA64_FltF59: CV_HREG_e = CV_HREG_e(2107i32);
    pub const CV_IA64_FltF6: CV_HREG_e = CV_HREG_e(2054i32);
    pub const CV_IA64_FltF60: CV_HREG_e = CV_HREG_e(2108i32);
    pub const CV_IA64_FltF61: CV_HREG_e = CV_HREG_e(2109i32);
    pub const CV_IA64_FltF62: CV_HREG_e = CV_HREG_e(2110i32);
    pub const CV_IA64_FltF63: CV_HREG_e = CV_HREG_e(2111i32);
    pub const CV_IA64_FltF64: CV_HREG_e = CV_HREG_e(2112i32);
    pub const CV_IA64_FltF65: CV_HREG_e = CV_HREG_e(2113i32);
    pub const CV_IA64_FltF66: CV_HREG_e = CV_HREG_e(2114i32);
    pub const CV_IA64_FltF67: CV_HREG_e = CV_HREG_e(2115i32);
    pub const CV_IA64_FltF68: CV_HREG_e = CV_HREG_e(2116i32);
    pub const CV_IA64_FltF69: CV_HREG_e = CV_HREG_e(2117i32);
    pub const CV_IA64_FltF7: CV_HREG_e = CV_HREG_e(2055i32);
    pub const CV_IA64_FltF70: CV_HREG_e = CV_HREG_e(2118i32);
    pub const CV_IA64_FltF71: CV_HREG_e = CV_HREG_e(2119i32);
    pub const CV_IA64_FltF72: CV_HREG_e = CV_HREG_e(2120i32);
    pub const CV_IA64_FltF73: CV_HREG_e = CV_HREG_e(2121i32);
    pub const CV_IA64_FltF74: CV_HREG_e = CV_HREG_e(2122i32);
    pub const CV_IA64_FltF75: CV_HREG_e = CV_HREG_e(2123i32);
    pub const CV_IA64_FltF76: CV_HREG_e = CV_HREG_e(2124i32);
    pub const CV_IA64_FltF77: CV_HREG_e = CV_HREG_e(2125i32);
    pub const CV_IA64_FltF78: CV_HREG_e = CV_HREG_e(2126i32);
    pub const CV_IA64_FltF79: CV_HREG_e = CV_HREG_e(2127i32);
    pub const CV_IA64_FltF8: CV_HREG_e = CV_HREG_e(2056i32);
    pub const CV_IA64_FltF80: CV_HREG_e = CV_HREG_e(2128i32);
    pub const CV_IA64_FltF81: CV_HREG_e = CV_HREG_e(2129i32);
    pub const CV_IA64_FltF82: CV_HREG_e = CV_HREG_e(2130i32);
    pub const CV_IA64_FltF83: CV_HREG_e = CV_HREG_e(2131i32);
    pub const CV_IA64_FltF84: CV_HREG_e = CV_HREG_e(2132i32);
    pub const CV_IA64_FltF85: CV_HREG_e = CV_HREG_e(2133i32);
    pub const CV_IA64_FltF86: CV_HREG_e = CV_HREG_e(2134i32);
    pub const CV_IA64_FltF87: CV_HREG_e = CV_HREG_e(2135i32);
    pub const CV_IA64_FltF88: CV_HREG_e = CV_HREG_e(2136i32);
    pub const CV_IA64_FltF89: CV_HREG_e = CV_HREG_e(2137i32);
    pub const CV_IA64_FltF9: CV_HREG_e = CV_HREG_e(2057i32);
    pub const CV_IA64_FltF90: CV_HREG_e = CV_HREG_e(2138i32);
    pub const CV_IA64_FltF91: CV_HREG_e = CV_HREG_e(2139i32);
    pub const CV_IA64_FltF92: CV_HREG_e = CV_HREG_e(2140i32);
    pub const CV_IA64_FltF93: CV_HREG_e = CV_HREG_e(2141i32);
    pub const CV_IA64_FltF94: CV_HREG_e = CV_HREG_e(2142i32);
    pub const CV_IA64_FltF95: CV_HREG_e = CV_HREG_e(2143i32);
    pub const CV_IA64_FltF96: CV_HREG_e = CV_HREG_e(2144i32);
    pub const CV_IA64_FltF97: CV_HREG_e = CV_HREG_e(2145i32);
    pub const CV_IA64_FltF98: CV_HREG_e = CV_HREG_e(2146i32);
    pub const CV_IA64_FltF99: CV_HREG_e = CV_HREG_e(2147i32);
    pub const CV_IA64_IntH0: CV_HREG_e = CV_HREG_e(832i32);
    pub const CV_IA64_IntH1: CV_HREG_e = CV_HREG_e(833i32);
    pub const CV_IA64_IntH10: CV_HREG_e = CV_HREG_e(842i32);
    pub const CV_IA64_IntH11: CV_HREG_e = CV_HREG_e(843i32);
    pub const CV_IA64_IntH12: CV_HREG_e = CV_HREG_e(844i32);
    pub const CV_IA64_IntH13: CV_HREG_e = CV_HREG_e(845i32);
    pub const CV_IA64_IntH14: CV_HREG_e = CV_HREG_e(846i32);
    pub const CV_IA64_IntH15: CV_HREG_e = CV_HREG_e(847i32);
    pub const CV_IA64_IntH2: CV_HREG_e = CV_HREG_e(834i32);
    pub const CV_IA64_IntH3: CV_HREG_e = CV_HREG_e(835i32);
    pub const CV_IA64_IntH4: CV_HREG_e = CV_HREG_e(836i32);
    pub const CV_IA64_IntH5: CV_HREG_e = CV_HREG_e(837i32);
    pub const CV_IA64_IntH6: CV_HREG_e = CV_HREG_e(838i32);
    pub const CV_IA64_IntH7: CV_HREG_e = CV_HREG_e(839i32);
    pub const CV_IA64_IntH8: CV_HREG_e = CV_HREG_e(840i32);
    pub const CV_IA64_IntH9: CV_HREG_e = CV_HREG_e(841i32);
    pub const CV_IA64_IntR0: CV_HREG_e = CV_HREG_e(1024i32);
    pub const CV_IA64_IntR1: CV_HREG_e = CV_HREG_e(1025i32);
    pub const CV_IA64_IntR10: CV_HREG_e = CV_HREG_e(1034i32);
    pub const CV_IA64_IntR100: CV_HREG_e = CV_HREG_e(1124i32);
    pub const CV_IA64_IntR101: CV_HREG_e = CV_HREG_e(1125i32);
    pub const CV_IA64_IntR102: CV_HREG_e = CV_HREG_e(1126i32);
    pub const CV_IA64_IntR103: CV_HREG_e = CV_HREG_e(1127i32);
    pub const CV_IA64_IntR104: CV_HREG_e = CV_HREG_e(1128i32);
    pub const CV_IA64_IntR105: CV_HREG_e = CV_HREG_e(1129i32);
    pub const CV_IA64_IntR106: CV_HREG_e = CV_HREG_e(1130i32);
    pub const CV_IA64_IntR107: CV_HREG_e = CV_HREG_e(1131i32);
    pub const CV_IA64_IntR108: CV_HREG_e = CV_HREG_e(1132i32);
    pub const CV_IA64_IntR109: CV_HREG_e = CV_HREG_e(1133i32);
    pub const CV_IA64_IntR11: CV_HREG_e = CV_HREG_e(1035i32);
    pub const CV_IA64_IntR110: CV_HREG_e = CV_HREG_e(1134i32);
    pub const CV_IA64_IntR111: CV_HREG_e = CV_HREG_e(1135i32);
    pub const CV_IA64_IntR112: CV_HREG_e = CV_HREG_e(1136i32);
    pub const CV_IA64_IntR113: CV_HREG_e = CV_HREG_e(1137i32);
    pub const CV_IA64_IntR114: CV_HREG_e = CV_HREG_e(1138i32);
    pub const CV_IA64_IntR115: CV_HREG_e = CV_HREG_e(1139i32);
    pub const CV_IA64_IntR116: CV_HREG_e = CV_HREG_e(1140i32);
    pub const CV_IA64_IntR117: CV_HREG_e = CV_HREG_e(1141i32);
    pub const CV_IA64_IntR118: CV_HREG_e = CV_HREG_e(1142i32);
    pub const CV_IA64_IntR119: CV_HREG_e = CV_HREG_e(1143i32);
    pub const CV_IA64_IntR12: CV_HREG_e = CV_HREG_e(1036i32);
    pub const CV_IA64_IntR120: CV_HREG_e = CV_HREG_e(1144i32);
    pub const CV_IA64_IntR121: CV_HREG_e = CV_HREG_e(1145i32);
    pub const CV_IA64_IntR122: CV_HREG_e = CV_HREG_e(1146i32);
    pub const CV_IA64_IntR123: CV_HREG_e = CV_HREG_e(1147i32);
    pub const CV_IA64_IntR124: CV_HREG_e = CV_HREG_e(1148i32);
    pub const CV_IA64_IntR125: CV_HREG_e = CV_HREG_e(1149i32);
    pub const CV_IA64_IntR126: CV_HREG_e = CV_HREG_e(1150i32);
    pub const CV_IA64_IntR127: CV_HREG_e = CV_HREG_e(1151i32);
    pub const CV_IA64_IntR13: CV_HREG_e = CV_HREG_e(1037i32);
    pub const CV_IA64_IntR14: CV_HREG_e = CV_HREG_e(1038i32);
    pub const CV_IA64_IntR15: CV_HREG_e = CV_HREG_e(1039i32);
    pub const CV_IA64_IntR16: CV_HREG_e = CV_HREG_e(1040i32);
    pub const CV_IA64_IntR17: CV_HREG_e = CV_HREG_e(1041i32);
    pub const CV_IA64_IntR18: CV_HREG_e = CV_HREG_e(1042i32);
    pub const CV_IA64_IntR19: CV_HREG_e = CV_HREG_e(1043i32);
    pub const CV_IA64_IntR2: CV_HREG_e = CV_HREG_e(1026i32);
    pub const CV_IA64_IntR20: CV_HREG_e = CV_HREG_e(1044i32);
    pub const CV_IA64_IntR21: CV_HREG_e = CV_HREG_e(1045i32);
    pub const CV_IA64_IntR22: CV_HREG_e = CV_HREG_e(1046i32);
    pub const CV_IA64_IntR23: CV_HREG_e = CV_HREG_e(1047i32);
    pub const CV_IA64_IntR24: CV_HREG_e = CV_HREG_e(1048i32);
    pub const CV_IA64_IntR25: CV_HREG_e = CV_HREG_e(1049i32);
    pub const CV_IA64_IntR26: CV_HREG_e = CV_HREG_e(1050i32);
    pub const CV_IA64_IntR27: CV_HREG_e = CV_HREG_e(1051i32);
    pub const CV_IA64_IntR28: CV_HREG_e = CV_HREG_e(1052i32);
    pub const CV_IA64_IntR29: CV_HREG_e = CV_HREG_e(1053i32);
    pub const CV_IA64_IntR3: CV_HREG_e = CV_HREG_e(1027i32);
    pub const CV_IA64_IntR30: CV_HREG_e = CV_HREG_e(1054i32);
    pub const CV_IA64_IntR31: CV_HREG_e = CV_HREG_e(1055i32);
    pub const CV_IA64_IntR32: CV_HREG_e = CV_HREG_e(1056i32);
    pub const CV_IA64_IntR33: CV_HREG_e = CV_HREG_e(1057i32);
    pub const CV_IA64_IntR34: CV_HREG_e = CV_HREG_e(1058i32);
    pub const CV_IA64_IntR35: CV_HREG_e = CV_HREG_e(1059i32);
    pub const CV_IA64_IntR36: CV_HREG_e = CV_HREG_e(1060i32);
    pub const CV_IA64_IntR37: CV_HREG_e = CV_HREG_e(1061i32);
    pub const CV_IA64_IntR38: CV_HREG_e = CV_HREG_e(1062i32);
    pub const CV_IA64_IntR39: CV_HREG_e = CV_HREG_e(1063i32);
    pub const CV_IA64_IntR4: CV_HREG_e = CV_HREG_e(1028i32);
    pub const CV_IA64_IntR40: CV_HREG_e = CV_HREG_e(1064i32);
    pub const CV_IA64_IntR41: CV_HREG_e = CV_HREG_e(1065i32);
    pub const CV_IA64_IntR42: CV_HREG_e = CV_HREG_e(1066i32);
    pub const CV_IA64_IntR43: CV_HREG_e = CV_HREG_e(1067i32);
    pub const CV_IA64_IntR44: CV_HREG_e = CV_HREG_e(1068i32);
    pub const CV_IA64_IntR45: CV_HREG_e = CV_HREG_e(1069i32);
    pub const CV_IA64_IntR46: CV_HREG_e = CV_HREG_e(1070i32);
    pub const CV_IA64_IntR47: CV_HREG_e = CV_HREG_e(1071i32);
    pub const CV_IA64_IntR48: CV_HREG_e = CV_HREG_e(1072i32);
    pub const CV_IA64_IntR49: CV_HREG_e = CV_HREG_e(1073i32);
    pub const CV_IA64_IntR5: CV_HREG_e = CV_HREG_e(1029i32);
    pub const CV_IA64_IntR50: CV_HREG_e = CV_HREG_e(1074i32);
    pub const CV_IA64_IntR51: CV_HREG_e = CV_HREG_e(1075i32);
    pub const CV_IA64_IntR52: CV_HREG_e = CV_HREG_e(1076i32);
    pub const CV_IA64_IntR53: CV_HREG_e = CV_HREG_e(1077i32);
    pub const CV_IA64_IntR54: CV_HREG_e = CV_HREG_e(1078i32);
    pub const CV_IA64_IntR55: CV_HREG_e = CV_HREG_e(1079i32);
    pub const CV_IA64_IntR56: CV_HREG_e = CV_HREG_e(1080i32);
    pub const CV_IA64_IntR57: CV_HREG_e = CV_HREG_e(1081i32);
    pub const CV_IA64_IntR58: CV_HREG_e = CV_HREG_e(1082i32);
    pub const CV_IA64_IntR59: CV_HREG_e = CV_HREG_e(1083i32);
    pub const CV_IA64_IntR6: CV_HREG_e = CV_HREG_e(1030i32);
    pub const CV_IA64_IntR60: CV_HREG_e = CV_HREG_e(1084i32);
    pub const CV_IA64_IntR61: CV_HREG_e = CV_HREG_e(1085i32);
    pub const CV_IA64_IntR62: CV_HREG_e = CV_HREG_e(1086i32);
    pub const CV_IA64_IntR63: CV_HREG_e = CV_HREG_e(1087i32);
    pub const CV_IA64_IntR64: CV_HREG_e = CV_HREG_e(1088i32);
    pub const CV_IA64_IntR65: CV_HREG_e = CV_HREG_e(1089i32);
    pub const CV_IA64_IntR66: CV_HREG_e = CV_HREG_e(1090i32);
    pub const CV_IA64_IntR67: CV_HREG_e = CV_HREG_e(1091i32);
    pub const CV_IA64_IntR68: CV_HREG_e = CV_HREG_e(1092i32);
    pub const CV_IA64_IntR69: CV_HREG_e = CV_HREG_e(1093i32);
    pub const CV_IA64_IntR7: CV_HREG_e = CV_HREG_e(1031i32);
    pub const CV_IA64_IntR70: CV_HREG_e = CV_HREG_e(1094i32);
    pub const CV_IA64_IntR71: CV_HREG_e = CV_HREG_e(1095i32);
    pub const CV_IA64_IntR72: CV_HREG_e = CV_HREG_e(1096i32);
    pub const CV_IA64_IntR73: CV_HREG_e = CV_HREG_e(1097i32);
    pub const CV_IA64_IntR74: CV_HREG_e = CV_HREG_e(1098i32);
    pub const CV_IA64_IntR75: CV_HREG_e = CV_HREG_e(1099i32);
    pub const CV_IA64_IntR76: CV_HREG_e = CV_HREG_e(1100i32);
    pub const CV_IA64_IntR77: CV_HREG_e = CV_HREG_e(1101i32);
    pub const CV_IA64_IntR78: CV_HREG_e = CV_HREG_e(1102i32);
    pub const CV_IA64_IntR79: CV_HREG_e = CV_HREG_e(1103i32);
    pub const CV_IA64_IntR8: CV_HREG_e = CV_HREG_e(1032i32);
    pub const CV_IA64_IntR80: CV_HREG_e = CV_HREG_e(1104i32);
    pub const CV_IA64_IntR81: CV_HREG_e = CV_HREG_e(1105i32);
    pub const CV_IA64_IntR82: CV_HREG_e = CV_HREG_e(1106i32);
    pub const CV_IA64_IntR83: CV_HREG_e = CV_HREG_e(1107i32);
    pub const CV_IA64_IntR84: CV_HREG_e = CV_HREG_e(1108i32);
    pub const CV_IA64_IntR85: CV_HREG_e = CV_HREG_e(1109i32);
    pub const CV_IA64_IntR86: CV_HREG_e = CV_HREG_e(1110i32);
    pub const CV_IA64_IntR87: CV_HREG_e = CV_HREG_e(1111i32);
    pub const CV_IA64_IntR88: CV_HREG_e = CV_HREG_e(1112i32);
    pub const CV_IA64_IntR89: CV_HREG_e = CV_HREG_e(1113i32);
    pub const CV_IA64_IntR9: CV_HREG_e = CV_HREG_e(1033i32);
    pub const CV_IA64_IntR90: CV_HREG_e = CV_HREG_e(1114i32);
    pub const CV_IA64_IntR91: CV_HREG_e = CV_HREG_e(1115i32);
    pub const CV_IA64_IntR92: CV_HREG_e = CV_HREG_e(1116i32);
    pub const CV_IA64_IntR93: CV_HREG_e = CV_HREG_e(1117i32);
    pub const CV_IA64_IntR94: CV_HREG_e = CV_HREG_e(1118i32);
    pub const CV_IA64_IntR95: CV_HREG_e = CV_HREG_e(1119i32);
    pub const CV_IA64_IntR96: CV_HREG_e = CV_HREG_e(1120i32);
    pub const CV_IA64_IntR97: CV_HREG_e = CV_HREG_e(1121i32);
    pub const CV_IA64_IntR98: CV_HREG_e = CV_HREG_e(1122i32);
    pub const CV_IA64_IntR99: CV_HREG_e = CV_HREG_e(1123i32);
    pub const CV_IA64_Ip: CV_HREG_e = CV_HREG_e(1016i32);
    pub const CV_IA64_NOREG: CV_HREG_e = CV_HREG_e(0i32);
    pub const CV_IA64_Nats: CV_HREG_e = CV_HREG_e(1020i32);
    pub const CV_IA64_Nats2: CV_HREG_e = CV_HREG_e(1021i32);
    pub const CV_IA64_Nats3: CV_HREG_e = CV_HREG_e(1022i32);
    pub const CV_IA64_P0: CV_HREG_e = CV_HREG_e(704i32);
    pub const CV_IA64_P1: CV_HREG_e = CV_HREG_e(705i32);
    pub const CV_IA64_P10: CV_HREG_e = CV_HREG_e(714i32);
    pub const CV_IA64_P11: CV_HREG_e = CV_HREG_e(715i32);
    pub const CV_IA64_P12: CV_HREG_e = CV_HREG_e(716i32);
    pub const CV_IA64_P13: CV_HREG_e = CV_HREG_e(717i32);
    pub const CV_IA64_P14: CV_HREG_e = CV_HREG_e(718i32);
    pub const CV_IA64_P15: CV_HREG_e = CV_HREG_e(719i32);
    pub const CV_IA64_P16: CV_HREG_e = CV_HREG_e(720i32);
    pub const CV_IA64_P17: CV_HREG_e = CV_HREG_e(721i32);
    pub const CV_IA64_P18: CV_HREG_e = CV_HREG_e(722i32);
    pub const CV_IA64_P19: CV_HREG_e = CV_HREG_e(723i32);
    pub const CV_IA64_P2: CV_HREG_e = CV_HREG_e(706i32);
    pub const CV_IA64_P20: CV_HREG_e = CV_HREG_e(724i32);
    pub const CV_IA64_P21: CV_HREG_e = CV_HREG_e(725i32);
    pub const CV_IA64_P22: CV_HREG_e = CV_HREG_e(726i32);
    pub const CV_IA64_P23: CV_HREG_e = CV_HREG_e(727i32);
    pub const CV_IA64_P24: CV_HREG_e = CV_HREG_e(728i32);
    pub const CV_IA64_P25: CV_HREG_e = CV_HREG_e(729i32);
    pub const CV_IA64_P26: CV_HREG_e = CV_HREG_e(730i32);
    pub const CV_IA64_P27: CV_HREG_e = CV_HREG_e(731i32);
    pub const CV_IA64_P28: CV_HREG_e = CV_HREG_e(732i32);
    pub const CV_IA64_P29: CV_HREG_e = CV_HREG_e(733i32);
    pub const CV_IA64_P3: CV_HREG_e = CV_HREG_e(707i32);
    pub const CV_IA64_P30: CV_HREG_e = CV_HREG_e(734i32);
    pub const CV_IA64_P31: CV_HREG_e = CV_HREG_e(735i32);
    pub const CV_IA64_P32: CV_HREG_e = CV_HREG_e(736i32);
    pub const CV_IA64_P33: CV_HREG_e = CV_HREG_e(737i32);
    pub const CV_IA64_P34: CV_HREG_e = CV_HREG_e(738i32);
    pub const CV_IA64_P35: CV_HREG_e = CV_HREG_e(739i32);
    pub const CV_IA64_P36: CV_HREG_e = CV_HREG_e(740i32);
    pub const CV_IA64_P37: CV_HREG_e = CV_HREG_e(741i32);
    pub const CV_IA64_P38: CV_HREG_e = CV_HREG_e(742i32);
    pub const CV_IA64_P39: CV_HREG_e = CV_HREG_e(743i32);
    pub const CV_IA64_P4: CV_HREG_e = CV_HREG_e(708i32);
    pub const CV_IA64_P40: CV_HREG_e = CV_HREG_e(744i32);
    pub const CV_IA64_P41: CV_HREG_e = CV_HREG_e(745i32);
    pub const CV_IA64_P42: CV_HREG_e = CV_HREG_e(746i32);
    pub const CV_IA64_P43: CV_HREG_e = CV_HREG_e(747i32);
    pub const CV_IA64_P44: CV_HREG_e = CV_HREG_e(748i32);
    pub const CV_IA64_P45: CV_HREG_e = CV_HREG_e(749i32);
    pub const CV_IA64_P46: CV_HREG_e = CV_HREG_e(750i32);
    pub const CV_IA64_P47: CV_HREG_e = CV_HREG_e(751i32);
    pub const CV_IA64_P48: CV_HREG_e = CV_HREG_e(752i32);
    pub const CV_IA64_P49: CV_HREG_e = CV_HREG_e(753i32);
    pub const CV_IA64_P5: CV_HREG_e = CV_HREG_e(709i32);
    pub const CV_IA64_P50: CV_HREG_e = CV_HREG_e(754i32);
    pub const CV_IA64_P51: CV_HREG_e = CV_HREG_e(755i32);
    pub const CV_IA64_P52: CV_HREG_e = CV_HREG_e(756i32);
    pub const CV_IA64_P53: CV_HREG_e = CV_HREG_e(757i32);
    pub const CV_IA64_P54: CV_HREG_e = CV_HREG_e(758i32);
    pub const CV_IA64_P55: CV_HREG_e = CV_HREG_e(759i32);
    pub const CV_IA64_P56: CV_HREG_e = CV_HREG_e(760i32);
    pub const CV_IA64_P57: CV_HREG_e = CV_HREG_e(761i32);
    pub const CV_IA64_P58: CV_HREG_e = CV_HREG_e(762i32);
    pub const CV_IA64_P59: CV_HREG_e = CV_HREG_e(763i32);
    pub const CV_IA64_P6: CV_HREG_e = CV_HREG_e(710i32);
    pub const CV_IA64_P60: CV_HREG_e = CV_HREG_e(764i32);
    pub const CV_IA64_P61: CV_HREG_e = CV_HREG_e(765i32);
    pub const CV_IA64_P62: CV_HREG_e = CV_HREG_e(766i32);
    pub const CV_IA64_P63: CV_HREG_e = CV_HREG_e(767i32);
    pub const CV_IA64_P7: CV_HREG_e = CV_HREG_e(711i32);
    pub const CV_IA64_P8: CV_HREG_e = CV_HREG_e(712i32);
    pub const CV_IA64_P9: CV_HREG_e = CV_HREG_e(713i32);
    pub const CV_IA64_PFC0: CV_HREG_e = CV_HREG_e(7424i32);
    pub const CV_IA64_PFC1: CV_HREG_e = CV_HREG_e(7425i32);
    pub const CV_IA64_PFC10: CV_HREG_e = CV_HREG_e(7434i32);
    pub const CV_IA64_PFC11: CV_HREG_e = CV_HREG_e(7435i32);
    pub const CV_IA64_PFC12: CV_HREG_e = CV_HREG_e(7436i32);
    pub const CV_IA64_PFC13: CV_HREG_e = CV_HREG_e(7437i32);
    pub const CV_IA64_PFC14: CV_HREG_e = CV_HREG_e(7438i32);
    pub const CV_IA64_PFC15: CV_HREG_e = CV_HREG_e(7439i32);
    pub const CV_IA64_PFC2: CV_HREG_e = CV_HREG_e(7426i32);
    pub const CV_IA64_PFC3: CV_HREG_e = CV_HREG_e(7427i32);
    pub const CV_IA64_PFC4: CV_HREG_e = CV_HREG_e(7428i32);
    pub const CV_IA64_PFC5: CV_HREG_e = CV_HREG_e(7429i32);
    pub const CV_IA64_PFC6: CV_HREG_e = CV_HREG_e(7430i32);
    pub const CV_IA64_PFC7: CV_HREG_e = CV_HREG_e(7431i32);
    pub const CV_IA64_PFC8: CV_HREG_e = CV_HREG_e(7432i32);
    pub const CV_IA64_PFC9: CV_HREG_e = CV_HREG_e(7433i32);
    pub const CV_IA64_PFD0: CV_HREG_e = CV_HREG_e(7168i32);
    pub const CV_IA64_PFD1: CV_HREG_e = CV_HREG_e(7169i32);
    pub const CV_IA64_PFD10: CV_HREG_e = CV_HREG_e(7178i32);
    pub const CV_IA64_PFD11: CV_HREG_e = CV_HREG_e(7179i32);
    pub const CV_IA64_PFD12: CV_HREG_e = CV_HREG_e(7180i32);
    pub const CV_IA64_PFD13: CV_HREG_e = CV_HREG_e(7181i32);
    pub const CV_IA64_PFD14: CV_HREG_e = CV_HREG_e(7182i32);
    pub const CV_IA64_PFD15: CV_HREG_e = CV_HREG_e(7183i32);
    pub const CV_IA64_PFD16: CV_HREG_e = CV_HREG_e(7184i32);
    pub const CV_IA64_PFD17: CV_HREG_e = CV_HREG_e(7185i32);
    pub const CV_IA64_PFD2: CV_HREG_e = CV_HREG_e(7170i32);
    pub const CV_IA64_PFD3: CV_HREG_e = CV_HREG_e(7171i32);
    pub const CV_IA64_PFD4: CV_HREG_e = CV_HREG_e(7172i32);
    pub const CV_IA64_PFD5: CV_HREG_e = CV_HREG_e(7173i32);
    pub const CV_IA64_PFD6: CV_HREG_e = CV_HREG_e(7174i32);
    pub const CV_IA64_PFD7: CV_HREG_e = CV_HREG_e(7175i32);
    pub const CV_IA64_PFD8: CV_HREG_e = CV_HREG_e(7176i32);
    pub const CV_IA64_PFD9: CV_HREG_e = CV_HREG_e(7177i32);
    pub const CV_IA64_Pkr0: CV_HREG_e = CV_HREG_e(5120i32);
    pub const CV_IA64_Pkr1: CV_HREG_e = CV_HREG_e(5121i32);
    pub const CV_IA64_Pkr10: CV_HREG_e = CV_HREG_e(5130i32);
    pub const CV_IA64_Pkr11: CV_HREG_e = CV_HREG_e(5131i32);
    pub const CV_IA64_Pkr12: CV_HREG_e = CV_HREG_e(5132i32);
    pub const CV_IA64_Pkr13: CV_HREG_e = CV_HREG_e(5133i32);
    pub const CV_IA64_Pkr14: CV_HREG_e = CV_HREG_e(5134i32);
    pub const CV_IA64_Pkr15: CV_HREG_e = CV_HREG_e(5135i32);
    pub const CV_IA64_Pkr2: CV_HREG_e = CV_HREG_e(5122i32);
    pub const CV_IA64_Pkr3: CV_HREG_e = CV_HREG_e(5123i32);
    pub const CV_IA64_Pkr4: CV_HREG_e = CV_HREG_e(5124i32);
    pub const CV_IA64_Pkr5: CV_HREG_e = CV_HREG_e(5125i32);
    pub const CV_IA64_Pkr6: CV_HREG_e = CV_HREG_e(5126i32);
    pub const CV_IA64_Pkr7: CV_HREG_e = CV_HREG_e(5127i32);
    pub const CV_IA64_Pkr8: CV_HREG_e = CV_HREG_e(5128i32);
    pub const CV_IA64_Pkr9: CV_HREG_e = CV_HREG_e(5129i32);
    pub const CV_IA64_Preds: CV_HREG_e = CV_HREG_e(768i32);
    pub const CV_IA64_Psr: CV_HREG_e = CV_HREG_e(1019i32);
    pub const CV_IA64_Rr0: CV_HREG_e = CV_HREG_e(6144i32);
    pub const CV_IA64_Rr1: CV_HREG_e = CV_HREG_e(6145i32);
    pub const CV_IA64_Rr2: CV_HREG_e = CV_HREG_e(6146i32);
    pub const CV_IA64_Rr3: CV_HREG_e = CV_HREG_e(6147i32);
    pub const CV_IA64_Rr4: CV_HREG_e = CV_HREG_e(6148i32);
    pub const CV_IA64_Rr5: CV_HREG_e = CV_HREG_e(6149i32);
    pub const CV_IA64_Rr6: CV_HREG_e = CV_HREG_e(6150i32);
    pub const CV_IA64_Rr7: CV_HREG_e = CV_HREG_e(6151i32);
    pub const CV_IA64_RsBSP: CV_HREG_e = CV_HREG_e(3089i32);
    pub const CV_IA64_RsBSPSTORE: CV_HREG_e = CV_HREG_e(3090i32);
    pub const CV_IA64_RsPFS: CV_HREG_e = CV_HREG_e(3136i32);
    pub const CV_IA64_RsRNAT: CV_HREG_e = CV_HREG_e(3091i32);
    pub const CV_IA64_RsRSC: CV_HREG_e = CV_HREG_e(3088i32);
    pub const CV_IA64_SSD: CV_HREG_e = CV_HREG_e(3098i32);
    pub const CV_IA64_SaCMCV: CV_HREG_e = CV_HREG_e(4170i32);
    pub const CV_IA64_SaEOI: CV_HREG_e = CV_HREG_e(4163i32);
    pub const CV_IA64_SaIRR0: CV_HREG_e = CV_HREG_e(4164i32);
    pub const CV_IA64_SaIRR1: CV_HREG_e = CV_HREG_e(4165i32);
    pub const CV_IA64_SaIRR2: CV_HREG_e = CV_HREG_e(4166i32);
    pub const CV_IA64_SaIRR3: CV_HREG_e = CV_HREG_e(4167i32);
    pub const CV_IA64_SaITV: CV_HREG_e = CV_HREG_e(4168i32);
    pub const CV_IA64_SaIVR: CV_HREG_e = CV_HREG_e(4161i32);
    pub const CV_IA64_SaLID: CV_HREG_e = CV_HREG_e(4160i32);
    pub const CV_IA64_SaLRR0: CV_HREG_e = CV_HREG_e(4176i32);
    pub const CV_IA64_SaLRR1: CV_HREG_e = CV_HREG_e(4177i32);
    pub const CV_IA64_SaPMV: CV_HREG_e = CV_HREG_e(4169i32);
    pub const CV_IA64_SaTPR: CV_HREG_e = CV_HREG_e(4162i32);
    pub const CV_IA64_StFCR: CV_HREG_e = CV_HREG_e(3093i32);
    pub const CV_IA64_StFDR: CV_HREG_e = CV_HREG_e(3102i32);
    pub const CV_IA64_StFIR: CV_HREG_e = CV_HREG_e(3101i32);
    pub const CV_IA64_StFPSR: CV_HREG_e = CV_HREG_e(3112i32);
    pub const CV_IA64_StFSR: CV_HREG_e = CV_HREG_e(3100i32);
    pub const CV_IA64_StIFA: CV_HREG_e = CV_HREG_e(4116i32);
    pub const CV_IA64_StIFS: CV_HREG_e = CV_HREG_e(4119i32);
    pub const CV_IA64_StIHA: CV_HREG_e = CV_HREG_e(4121i32);
    pub const CV_IA64_StIIM: CV_HREG_e = CV_HREG_e(4120i32);
    pub const CV_IA64_StIIP: CV_HREG_e = CV_HREG_e(4115i32);
    pub const CV_IA64_StIIPA: CV_HREG_e = CV_HREG_e(4118i32);
    pub const CV_IA64_StIPSR: CV_HREG_e = CV_HREG_e(4112i32);
    pub const CV_IA64_StISR: CV_HREG_e = CV_HREG_e(4113i32);
    pub const CV_IA64_StITIR: CV_HREG_e = CV_HREG_e(4117i32);
    pub const CV_IA64_TrD0: CV_HREG_e = CV_HREG_e(8320i32);
    pub const CV_IA64_TrD1: CV_HREG_e = CV_HREG_e(8321i32);
    pub const CV_IA64_TrD2: CV_HREG_e = CV_HREG_e(8322i32);
    pub const CV_IA64_TrD3: CV_HREG_e = CV_HREG_e(8323i32);
    pub const CV_IA64_TrD4: CV_HREG_e = CV_HREG_e(8324i32);
    pub const CV_IA64_TrD5: CV_HREG_e = CV_HREG_e(8325i32);
    pub const CV_IA64_TrD6: CV_HREG_e = CV_HREG_e(8326i32);
    pub const CV_IA64_TrD7: CV_HREG_e = CV_HREG_e(8327i32);
    pub const CV_IA64_TrI0: CV_HREG_e = CV_HREG_e(8192i32);
    pub const CV_IA64_TrI1: CV_HREG_e = CV_HREG_e(8193i32);
    pub const CV_IA64_TrI2: CV_HREG_e = CV_HREG_e(8194i32);
    pub const CV_IA64_TrI3: CV_HREG_e = CV_HREG_e(8195i32);
    pub const CV_IA64_TrI4: CV_HREG_e = CV_HREG_e(8196i32);
    pub const CV_IA64_TrI5: CV_HREG_e = CV_HREG_e(8197i32);
    pub const CV_IA64_TrI6: CV_HREG_e = CV_HREG_e(8198i32);
    pub const CV_IA64_TrI7: CV_HREG_e = CV_HREG_e(8199i32);
    pub const CV_IA64_Umask: CV_HREG_e = CV_HREG_e(1017i32);
    pub const CV_JAVA_PC: CV_HREG_e = CV_HREG_e(1i32);
    pub const CV_M32R_ACHI: CV_HREG_e = CV_HREG_e(32i32);
    pub const CV_M32R_ACLO: CV_HREG_e = CV_HREG_e(33i32);
    pub const CV_M32R_BPC: CV_HREG_e = CV_HREG_e(31i32);
    pub const CV_M32R_CBR: CV_HREG_e = CV_HREG_e(27i32);
    pub const CV_M32R_NOREG: CV_HREG_e = CV_HREG_e(0i32);
    pub const CV_M32R_PC: CV_HREG_e = CV_HREG_e(34i32);
    pub const CV_M32R_PSW: CV_HREG_e = CV_HREG_e(26i32);
    pub const CV_M32R_R0: CV_HREG_e = CV_HREG_e(10i32);
    pub const CV_M32R_R1: CV_HREG_e = CV_HREG_e(11i32);
    pub const CV_M32R_R10: CV_HREG_e = CV_HREG_e(20i32);
    pub const CV_M32R_R11: CV_HREG_e = CV_HREG_e(21i32);
    pub const CV_M32R_R12: CV_HREG_e = CV_HREG_e(22i32);
    pub const CV_M32R_R13: CV_HREG_e = CV_HREG_e(23i32);
    pub const CV_M32R_R14: CV_HREG_e = CV_HREG_e(24i32);
    pub const CV_M32R_R15: CV_HREG_e = CV_HREG_e(25i32);
    pub const CV_M32R_R2: CV_HREG_e = CV_HREG_e(12i32);
    pub const CV_M32R_R3: CV_HREG_e = CV_HREG_e(13i32);
    pub const CV_M32R_R4: CV_HREG_e = CV_HREG_e(14i32);
    pub const CV_M32R_R5: CV_HREG_e = CV_HREG_e(15i32);
    pub const CV_M32R_R6: CV_HREG_e = CV_HREG_e(16i32);
    pub const CV_M32R_R7: CV_HREG_e = CV_HREG_e(17i32);
    pub const CV_M32R_R8: CV_HREG_e = CV_HREG_e(18i32);
    pub const CV_M32R_R9: CV_HREG_e = CV_HREG_e(19i32);
    pub const CV_M32R_SPI: CV_HREG_e = CV_HREG_e(28i32);
    pub const CV_M32R_SPO: CV_HREG_e = CV_HREG_e(30i32);
    pub const CV_M32R_SPU: CV_HREG_e = CV_HREG_e(29i32);
    pub const CV_M4_Fir: CV_HREG_e = CV_HREG_e(50i32);
    pub const CV_M4_FltF0: CV_HREG_e = CV_HREG_e(60i32);
    pub const CV_M4_FltF1: CV_HREG_e = CV_HREG_e(61i32);
    pub const CV_M4_FltF10: CV_HREG_e = CV_HREG_e(70i32);
    pub const CV_M4_FltF11: CV_HREG_e = CV_HREG_e(71i32);
    pub const CV_M4_FltF12: CV_HREG_e = CV_HREG_e(72i32);
    pub const CV_M4_FltF13: CV_HREG_e = CV_HREG_e(73i32);
    pub const CV_M4_FltF14: CV_HREG_e = CV_HREG_e(74i32);
    pub const CV_M4_FltF15: CV_HREG_e = CV_HREG_e(75i32);
    pub const CV_M4_FltF16: CV_HREG_e = CV_HREG_e(76i32);
    pub const CV_M4_FltF17: CV_HREG_e = CV_HREG_e(77i32);
    pub const CV_M4_FltF18: CV_HREG_e = CV_HREG_e(78i32);
    pub const CV_M4_FltF19: CV_HREG_e = CV_HREG_e(79i32);
    pub const CV_M4_FltF2: CV_HREG_e = CV_HREG_e(62i32);
    pub const CV_M4_FltF20: CV_HREG_e = CV_HREG_e(80i32);
    pub const CV_M4_FltF21: CV_HREG_e = CV_HREG_e(81i32);
    pub const CV_M4_FltF22: CV_HREG_e = CV_HREG_e(82i32);
    pub const CV_M4_FltF23: CV_HREG_e = CV_HREG_e(83i32);
    pub const CV_M4_FltF24: CV_HREG_e = CV_HREG_e(84i32);
    pub const CV_M4_FltF25: CV_HREG_e = CV_HREG_e(85i32);
    pub const CV_M4_FltF26: CV_HREG_e = CV_HREG_e(86i32);
    pub const CV_M4_FltF27: CV_HREG_e = CV_HREG_e(87i32);
    pub const CV_M4_FltF28: CV_HREG_e = CV_HREG_e(88i32);
    pub const CV_M4_FltF29: CV_HREG_e = CV_HREG_e(89i32);
    pub const CV_M4_FltF3: CV_HREG_e = CV_HREG_e(63i32);
    pub const CV_M4_FltF30: CV_HREG_e = CV_HREG_e(90i32);
    pub const CV_M4_FltF31: CV_HREG_e = CV_HREG_e(91i32);
    pub const CV_M4_FltF4: CV_HREG_e = CV_HREG_e(64i32);
    pub const CV_M4_FltF5: CV_HREG_e = CV_HREG_e(65i32);
    pub const CV_M4_FltF6: CV_HREG_e = CV_HREG_e(66i32);
    pub const CV_M4_FltF7: CV_HREG_e = CV_HREG_e(67i32);
    pub const CV_M4_FltF8: CV_HREG_e = CV_HREG_e(68i32);
    pub const CV_M4_FltF9: CV_HREG_e = CV_HREG_e(69i32);
    pub const CV_M4_FltFsr: CV_HREG_e = CV_HREG_e(92i32);
    pub const CV_M4_IntA0: CV_HREG_e = CV_HREG_e(14i32);
    pub const CV_M4_IntA1: CV_HREG_e = CV_HREG_e(15i32);
    pub const CV_M4_IntA2: CV_HREG_e = CV_HREG_e(16i32);
    pub const CV_M4_IntA3: CV_HREG_e = CV_HREG_e(17i32);
    pub const CV_M4_IntAT: CV_HREG_e = CV_HREG_e(11i32);
    pub const CV_M4_IntGP: CV_HREG_e = CV_HREG_e(38i32);
    pub const CV_M4_IntHI: CV_HREG_e = CV_HREG_e(43i32);
    pub const CV_M4_IntKT0: CV_HREG_e = CV_HREG_e(36i32);
    pub const CV_M4_IntKT1: CV_HREG_e = CV_HREG_e(37i32);
    pub const CV_M4_IntLO: CV_HREG_e = CV_HREG_e(42i32);
    pub const CV_M4_IntRA: CV_HREG_e = CV_HREG_e(41i32);
    pub const CV_M4_IntS0: CV_HREG_e = CV_HREG_e(26i32);
    pub const CV_M4_IntS1: CV_HREG_e = CV_HREG_e(27i32);
    pub const CV_M4_IntS2: CV_HREG_e = CV_HREG_e(28i32);
    pub const CV_M4_IntS3: CV_HREG_e = CV_HREG_e(29i32);
    pub const CV_M4_IntS4: CV_HREG_e = CV_HREG_e(30i32);
    pub const CV_M4_IntS5: CV_HREG_e = CV_HREG_e(31i32);
    pub const CV_M4_IntS6: CV_HREG_e = CV_HREG_e(32i32);
    pub const CV_M4_IntS7: CV_HREG_e = CV_HREG_e(33i32);
    pub const CV_M4_IntS8: CV_HREG_e = CV_HREG_e(40i32);
    pub const CV_M4_IntSP: CV_HREG_e = CV_HREG_e(39i32);
    pub const CV_M4_IntT0: CV_HREG_e = CV_HREG_e(18i32);
    pub const CV_M4_IntT1: CV_HREG_e = CV_HREG_e(19i32);
    pub const CV_M4_IntT2: CV_HREG_e = CV_HREG_e(20i32);
    pub const CV_M4_IntT3: CV_HREG_e = CV_HREG_e(21i32);
    pub const CV_M4_IntT4: CV_HREG_e = CV_HREG_e(22i32);
    pub const CV_M4_IntT5: CV_HREG_e = CV_HREG_e(23i32);
    pub const CV_M4_IntT6: CV_HREG_e = CV_HREG_e(24i32);
    pub const CV_M4_IntT7: CV_HREG_e = CV_HREG_e(25i32);
    pub const CV_M4_IntT8: CV_HREG_e = CV_HREG_e(34i32);
    pub const CV_M4_IntT9: CV_HREG_e = CV_HREG_e(35i32);
    pub const CV_M4_IntV0: CV_HREG_e = CV_HREG_e(12i32);
    pub const CV_M4_IntV1: CV_HREG_e = CV_HREG_e(13i32);
    pub const CV_M4_IntZERO: CV_HREG_e = CV_HREG_e(10i32);
    pub const CV_M4_NOREG: CV_HREG_e = CV_HREG_e(0i32);
    pub const CV_M4_Psr: CV_HREG_e = CV_HREG_e(51i32);
    pub const CV_MOD_CONST: CV_modifier_e = CV_modifier_e(1i32);
    pub const CV_MOD_HLSL_CENTER: CV_modifier_e = CV_modifier_e(522i32);
    pub const CV_MOD_HLSL_CENTROID: CV_modifier_e = CV_modifier_e(518i32);
    pub const CV_MOD_HLSL_CONSTINTERP: CV_modifier_e = CV_modifier_e(519i32);
    pub const CV_MOD_HLSL_LINE: CV_modifier_e = CV_modifier_e(513i32);
    pub const CV_MOD_HLSL_LINEADJ: CV_modifier_e = CV_modifier_e(515i32);
    pub const CV_MOD_HLSL_LINEAR: CV_modifier_e = CV_modifier_e(517i32);
    pub const CV_MOD_HLSL_NOPERSPECTIVE: CV_modifier_e = CV_modifier_e(520i32);
    pub const CV_MOD_HLSL_PRECISE: CV_modifier_e = CV_modifier_e(525i32);
    pub const CV_MOD_HLSL_SAMPLE: CV_modifier_e = CV_modifier_e(521i32);
    pub const CV_MOD_HLSL_SNORM: CV_modifier_e = CV_modifier_e(523i32);
    pub const CV_MOD_HLSL_TRIANGLE: CV_modifier_e = CV_modifier_e(514i32);
    pub const CV_MOD_HLSL_TRIANGLEADJ: CV_modifier_e = CV_modifier_e(516i32);
    pub const CV_MOD_HLSL_UAV_GLOBALLY_COHERENT: CV_modifier_e = CV_modifier_e(526i32);
    pub const CV_MOD_HLSL_UNIFORM: CV_modifier_e = CV_modifier_e(512i32);
    pub const CV_MOD_HLSL_UNORM: CV_modifier_e = CV_modifier_e(524i32);
    pub const CV_MOD_INVALID: CV_modifier_e = CV_modifier_e(0i32);
    pub const CV_MOD_UNALIGNED: CV_modifier_e = CV_modifier_e(3i32);
    pub const CV_MOD_VOLATILE: CV_modifier_e = CV_modifier_e(2i32);
    pub const CV_PPC_ASR: CV_HREG_e = CV_HREG_e(280i32);
    pub const CV_PPC_BAT0L: CV_HREG_e = CV_HREG_e(629i32);
    pub const CV_PPC_BAT0U: CV_HREG_e = CV_HREG_e(628i32);
    pub const CV_PPC_BAT1L: CV_HREG_e = CV_HREG_e(631i32);
    pub const CV_PPC_BAT1U: CV_HREG_e = CV_HREG_e(630i32);
    pub const CV_PPC_BAT2L: CV_HREG_e = CV_HREG_e(633i32);
    pub const CV_PPC_BAT2U: CV_HREG_e = CV_HREG_e(632i32);
    pub const CV_PPC_BAT3L: CV_HREG_e = CV_HREG_e(635i32);
    pub const CV_PPC_BAT3U: CV_HREG_e = CV_HREG_e(634i32);
    pub const CV_PPC_COMPARE: CV_HREG_e = CV_HREG_e(110i32);
    pub const CV_PPC_COUNT: CV_HREG_e = CV_HREG_e(111i32);
    pub const CV_PPC_CR: CV_HREG_e = CV_HREG_e(33i32);
    pub const CV_PPC_CR0: CV_HREG_e = CV_HREG_e(34i32);
    pub const CV_PPC_CR1: CV_HREG_e = CV_HREG_e(35i32);
    pub const CV_PPC_CR2: CV_HREG_e = CV_HREG_e(36i32);
    pub const CV_PPC_CR3: CV_HREG_e = CV_HREG_e(37i32);
    pub const CV_PPC_CR4: CV_HREG_e = CV_HREG_e(38i32);
    pub const CV_PPC_CR5: CV_HREG_e = CV_HREG_e(39i32);
    pub const CV_PPC_CR6: CV_HREG_e = CV_HREG_e(40i32);
    pub const CV_PPC_CR7: CV_HREG_e = CV_HREG_e(41i32);
    pub const CV_PPC_CTR: CV_HREG_e = CV_HREG_e(109i32);
    pub const CV_PPC_DAR: CV_HREG_e = CV_HREG_e(119i32);
    pub const CV_PPC_DBAT0L: CV_HREG_e = CV_HREG_e(637i32);
    pub const CV_PPC_DBAT0U: CV_HREG_e = CV_HREG_e(636i32);
    pub const CV_PPC_DBAT1L: CV_HREG_e = CV_HREG_e(639i32);
    pub const CV_PPC_DBAT1U: CV_HREG_e = CV_HREG_e(638i32);
    pub const CV_PPC_DBAT2L: CV_HREG_e = CV_HREG_e(641i32);
    pub const CV_PPC_DBAT2U: CV_HREG_e = CV_HREG_e(640i32);
    pub const CV_PPC_DBAT3L: CV_HREG_e = CV_HREG_e(643i32);
    pub const CV_PPC_DBAT3U: CV_HREG_e = CV_HREG_e(642i32);
    pub const CV_PPC_DCMP: CV_HREG_e = CV_HREG_e(1077i32);
    pub const CV_PPC_DEC: CV_HREG_e = CV_HREG_e(122i32);
    pub const CV_PPC_DMISS: CV_HREG_e = CV_HREG_e(1076i32);
    pub const CV_PPC_DSISR: CV_HREG_e = CV_HREG_e(118i32);
    pub const CV_PPC_EAR: CV_HREG_e = CV_HREG_e(382i32);
    pub const CV_PPC_FPR0: CV_HREG_e = CV_HREG_e(42i32);
    pub const CV_PPC_FPR1: CV_HREG_e = CV_HREG_e(43i32);
    pub const CV_PPC_FPR10: CV_HREG_e = CV_HREG_e(52i32);
    pub const CV_PPC_FPR11: CV_HREG_e = CV_HREG_e(53i32);
    pub const CV_PPC_FPR12: CV_HREG_e = CV_HREG_e(54i32);
    pub const CV_PPC_FPR13: CV_HREG_e = CV_HREG_e(55i32);
    pub const CV_PPC_FPR14: CV_HREG_e = CV_HREG_e(56i32);
    pub const CV_PPC_FPR15: CV_HREG_e = CV_HREG_e(57i32);
    pub const CV_PPC_FPR16: CV_HREG_e = CV_HREG_e(58i32);
    pub const CV_PPC_FPR17: CV_HREG_e = CV_HREG_e(59i32);
    pub const CV_PPC_FPR18: CV_HREG_e = CV_HREG_e(60i32);
    pub const CV_PPC_FPR19: CV_HREG_e = CV_HREG_e(61i32);
    pub const CV_PPC_FPR2: CV_HREG_e = CV_HREG_e(44i32);
    pub const CV_PPC_FPR20: CV_HREG_e = CV_HREG_e(62i32);
    pub const CV_PPC_FPR21: CV_HREG_e = CV_HREG_e(63i32);
    pub const CV_PPC_FPR22: CV_HREG_e = CV_HREG_e(64i32);
    pub const CV_PPC_FPR23: CV_HREG_e = CV_HREG_e(65i32);
    pub const CV_PPC_FPR24: CV_HREG_e = CV_HREG_e(66i32);
    pub const CV_PPC_FPR25: CV_HREG_e = CV_HREG_e(67i32);
    pub const CV_PPC_FPR26: CV_HREG_e = CV_HREG_e(68i32);
    pub const CV_PPC_FPR27: CV_HREG_e = CV_HREG_e(69i32);
    pub const CV_PPC_FPR28: CV_HREG_e = CV_HREG_e(70i32);
    pub const CV_PPC_FPR29: CV_HREG_e = CV_HREG_e(71i32);
    pub const CV_PPC_FPR3: CV_HREG_e = CV_HREG_e(45i32);
    pub const CV_PPC_FPR30: CV_HREG_e = CV_HREG_e(72i32);
    pub const CV_PPC_FPR31: CV_HREG_e = CV_HREG_e(73i32);
    pub const CV_PPC_FPR4: CV_HREG_e = CV_HREG_e(46i32);
    pub const CV_PPC_FPR5: CV_HREG_e = CV_HREG_e(47i32);
    pub const CV_PPC_FPR6: CV_HREG_e = CV_HREG_e(48i32);
    pub const CV_PPC_FPR7: CV_HREG_e = CV_HREG_e(49i32);
    pub const CV_PPC_FPR8: CV_HREG_e = CV_HREG_e(50i32);
    pub const CV_PPC_FPR9: CV_HREG_e = CV_HREG_e(51i32);
    pub const CV_PPC_FPSCR: CV_HREG_e = CV_HREG_e(74i32);
    pub const CV_PPC_GPR0: CV_HREG_e = CV_HREG_e(1i32);
    pub const CV_PPC_GPR1: CV_HREG_e = CV_HREG_e(2i32);
    pub const CV_PPC_GPR10: CV_HREG_e = CV_HREG_e(11i32);
    pub const CV_PPC_GPR11: CV_HREG_e = CV_HREG_e(12i32);
    pub const CV_PPC_GPR12: CV_HREG_e = CV_HREG_e(13i32);
    pub const CV_PPC_GPR13: CV_HREG_e = CV_HREG_e(14i32);
    pub const CV_PPC_GPR14: CV_HREG_e = CV_HREG_e(15i32);
    pub const CV_PPC_GPR15: CV_HREG_e = CV_HREG_e(16i32);
    pub const CV_PPC_GPR16: CV_HREG_e = CV_HREG_e(17i32);
    pub const CV_PPC_GPR17: CV_HREG_e = CV_HREG_e(18i32);
    pub const CV_PPC_GPR18: CV_HREG_e = CV_HREG_e(19i32);
    pub const CV_PPC_GPR19: CV_HREG_e = CV_HREG_e(20i32);
    pub const CV_PPC_GPR2: CV_HREG_e = CV_HREG_e(3i32);
    pub const CV_PPC_GPR20: CV_HREG_e = CV_HREG_e(21i32);
    pub const CV_PPC_GPR21: CV_HREG_e = CV_HREG_e(22i32);
    pub const CV_PPC_GPR22: CV_HREG_e = CV_HREG_e(23i32);
    pub const CV_PPC_GPR23: CV_HREG_e = CV_HREG_e(24i32);
    pub const CV_PPC_GPR24: CV_HREG_e = CV_HREG_e(25i32);
    pub const CV_PPC_GPR25: CV_HREG_e = CV_HREG_e(26i32);
    pub const CV_PPC_GPR26: CV_HREG_e = CV_HREG_e(27i32);
    pub const CV_PPC_GPR27: CV_HREG_e = CV_HREG_e(28i32);
    pub const CV_PPC_GPR28: CV_HREG_e = CV_HREG_e(29i32);
    pub const CV_PPC_GPR29: CV_HREG_e = CV_HREG_e(30i32);
    pub const CV_PPC_GPR3: CV_HREG_e = CV_HREG_e(4i32);
    pub const CV_PPC_GPR30: CV_HREG_e = CV_HREG_e(31i32);
    pub const CV_PPC_GPR31: CV_HREG_e = CV_HREG_e(32i32);
    pub const CV_PPC_GPR4: CV_HREG_e = CV_HREG_e(5i32);
    pub const CV_PPC_GPR5: CV_HREG_e = CV_HREG_e(6i32);
    pub const CV_PPC_GPR6: CV_HREG_e = CV_HREG_e(7i32);
    pub const CV_PPC_GPR7: CV_HREG_e = CV_HREG_e(8i32);
    pub const CV_PPC_GPR8: CV_HREG_e = CV_HREG_e(9i32);
    pub const CV_PPC_GPR9: CV_HREG_e = CV_HREG_e(10i32);
    pub const CV_PPC_HASH1: CV_HREG_e = CV_HREG_e(1078i32);
    pub const CV_PPC_HASH2: CV_HREG_e = CV_HREG_e(1079i32);
    pub const CV_PPC_HID0: CV_HREG_e = CV_HREG_e(1108i32);
    pub const CV_PPC_HID1: CV_HREG_e = CV_HREG_e(1109i32);
    pub const CV_PPC_HID10: CV_HREG_e = CV_HREG_e(1118i32);
    pub const CV_PPC_HID11: CV_HREG_e = CV_HREG_e(1119i32);
    pub const CV_PPC_HID12: CV_HREG_e = CV_HREG_e(1120i32);
    pub const CV_PPC_HID13: CV_HREG_e = CV_HREG_e(1121i32);
    pub const CV_PPC_HID14: CV_HREG_e = CV_HREG_e(1122i32);
    pub const CV_PPC_HID15: CV_HREG_e = CV_HREG_e(1123i32);
    pub const CV_PPC_HID2: CV_HREG_e = CV_HREG_e(1110i32);
    pub const CV_PPC_HID3: CV_HREG_e = CV_HREG_e(1111i32);
    pub const CV_PPC_HID4: CV_HREG_e = CV_HREG_e(1112i32);
    pub const CV_PPC_HID5: CV_HREG_e = CV_HREG_e(1113i32);
    pub const CV_PPC_HID6: CV_HREG_e = CV_HREG_e(1114i32);
    pub const CV_PPC_HID7: CV_HREG_e = CV_HREG_e(1115i32);
    pub const CV_PPC_HID8: CV_HREG_e = CV_HREG_e(1116i32);
    pub const CV_PPC_HID9: CV_HREG_e = CV_HREG_e(1117i32);
    pub const CV_PPC_ICMP: CV_HREG_e = CV_HREG_e(1081i32);
    pub const CV_PPC_IMISS: CV_HREG_e = CV_HREG_e(1080i32);
    pub const CV_PPC_LR: CV_HREG_e = CV_HREG_e(108i32);
    pub const CV_PPC_MQ: CV_HREG_e = CV_HREG_e(100i32);
    pub const CV_PPC_MSR: CV_HREG_e = CV_HREG_e(75i32);
    pub const CV_PPC_PC: CV_HREG_e = CV_HREG_e(99i32);
    pub const CV_PPC_PMR0: CV_HREG_e = CV_HREG_e(1044i32);
    pub const CV_PPC_PMR1: CV_HREG_e = CV_HREG_e(1045i32);
    pub const CV_PPC_PMR10: CV_HREG_e = CV_HREG_e(1054i32);
    pub const CV_PPC_PMR11: CV_HREG_e = CV_HREG_e(1055i32);
    pub const CV_PPC_PMR12: CV_HREG_e = CV_HREG_e(1056i32);
    pub const CV_PPC_PMR13: CV_HREG_e = CV_HREG_e(1057i32);
    pub const CV_PPC_PMR14: CV_HREG_e = CV_HREG_e(1058i32);
    pub const CV_PPC_PMR15: CV_HREG_e = CV_HREG_e(1059i32);
    pub const CV_PPC_PMR2: CV_HREG_e = CV_HREG_e(1046i32);
    pub const CV_PPC_PMR3: CV_HREG_e = CV_HREG_e(1047i32);
    pub const CV_PPC_PMR4: CV_HREG_e = CV_HREG_e(1048i32);
    pub const CV_PPC_PMR5: CV_HREG_e = CV_HREG_e(1049i32);
    pub const CV_PPC_PMR6: CV_HREG_e = CV_HREG_e(1050i32);
    pub const CV_PPC_PMR7: CV_HREG_e = CV_HREG_e(1051i32);
    pub const CV_PPC_PMR8: CV_HREG_e = CV_HREG_e(1052i32);
    pub const CV_PPC_PMR9: CV_HREG_e = CV_HREG_e(1053i32);
    pub const CV_PPC_PVR: CV_HREG_e = CV_HREG_e(287i32);
    pub const CV_PPC_RPA: CV_HREG_e = CV_HREG_e(1082i32);
    pub const CV_PPC_RTCL: CV_HREG_e = CV_HREG_e(105i32);
    pub const CV_PPC_RTCU: CV_HREG_e = CV_HREG_e(104i32);
    pub const CV_PPC_SDR1: CV_HREG_e = CV_HREG_e(125i32);
    pub const CV_PPC_SPRG0: CV_HREG_e = CV_HREG_e(372i32);
    pub const CV_PPC_SPRG1: CV_HREG_e = CV_HREG_e(373i32);
    pub const CV_PPC_SPRG2: CV_HREG_e = CV_HREG_e(374i32);
    pub const CV_PPC_SPRG3: CV_HREG_e = CV_HREG_e(375i32);
    pub const CV_PPC_SR0: CV_HREG_e = CV_HREG_e(76i32);
    pub const CV_PPC_SR1: CV_HREG_e = CV_HREG_e(77i32);
    pub const CV_PPC_SR10: CV_HREG_e = CV_HREG_e(86i32);
    pub const CV_PPC_SR11: CV_HREG_e = CV_HREG_e(87i32);
    pub const CV_PPC_SR12: CV_HREG_e = CV_HREG_e(88i32);
    pub const CV_PPC_SR13: CV_HREG_e = CV_HREG_e(89i32);
    pub const CV_PPC_SR14: CV_HREG_e = CV_HREG_e(90i32);
    pub const CV_PPC_SR15: CV_HREG_e = CV_HREG_e(91i32);
    pub const CV_PPC_SR2: CV_HREG_e = CV_HREG_e(78i32);
    pub const CV_PPC_SR3: CV_HREG_e = CV_HREG_e(79i32);
    pub const CV_PPC_SR4: CV_HREG_e = CV_HREG_e(80i32);
    pub const CV_PPC_SR5: CV_HREG_e = CV_HREG_e(81i32);
    pub const CV_PPC_SR6: CV_HREG_e = CV_HREG_e(82i32);
    pub const CV_PPC_SR7: CV_HREG_e = CV_HREG_e(83i32);
    pub const CV_PPC_SR8: CV_HREG_e = CV_HREG_e(84i32);
    pub const CV_PPC_SR9: CV_HREG_e = CV_HREG_e(85i32);
    pub const CV_PPC_SRR0: CV_HREG_e = CV_HREG_e(126i32);
    pub const CV_PPC_SRR1: CV_HREG_e = CV_HREG_e(127i32);
    pub const CV_PPC_XER: CV_HREG_e = CV_HREG_e(101i32);
    pub const CV_R68_A0: CV_HREG_e = CV_HREG_e(8i32);
    pub const CV_R68_A1: CV_HREG_e = CV_HREG_e(9i32);
    pub const CV_R68_A2: CV_HREG_e = CV_HREG_e(10i32);
    pub const CV_R68_A3: CV_HREG_e = CV_HREG_e(11i32);
    pub const CV_R68_A4: CV_HREG_e = CV_HREG_e(12i32);
    pub const CV_R68_A5: CV_HREG_e = CV_HREG_e(13i32);
    pub const CV_R68_A6: CV_HREG_e = CV_HREG_e(14i32);
    pub const CV_R68_A7: CV_HREG_e = CV_HREG_e(15i32);
    pub const CV_R68_AC: CV_HREG_e = CV_HREG_e(58i32);
    pub const CV_R68_BAC0: CV_HREG_e = CV_HREG_e(72i32);
    pub const CV_R68_BAC1: CV_HREG_e = CV_HREG_e(73i32);
    pub const CV_R68_BAC2: CV_HREG_e = CV_HREG_e(74i32);
    pub const CV_R68_BAC3: CV_HREG_e = CV_HREG_e(75i32);
    pub const CV_R68_BAC4: CV_HREG_e = CV_HREG_e(76i32);
    pub const CV_R68_BAC5: CV_HREG_e = CV_HREG_e(77i32);
    pub const CV_R68_BAC6: CV_HREG_e = CV_HREG_e(78i32);
    pub const CV_R68_BAC7: CV_HREG_e = CV_HREG_e(79i32);
    pub const CV_R68_BAD0: CV_HREG_e = CV_HREG_e(64i32);
    pub const CV_R68_BAD1: CV_HREG_e = CV_HREG_e(65i32);
    pub const CV_R68_BAD2: CV_HREG_e = CV_HREG_e(66i32);
    pub const CV_R68_BAD3: CV_HREG_e = CV_HREG_e(67i32);
    pub const CV_R68_BAD4: CV_HREG_e = CV_HREG_e(68i32);
    pub const CV_R68_BAD5: CV_HREG_e = CV_HREG_e(69i32);
    pub const CV_R68_BAD6: CV_HREG_e = CV_HREG_e(70i32);
    pub const CV_R68_BAD7: CV_HREG_e = CV_HREG_e(71i32);
    pub const CV_R68_CAAR: CV_HREG_e = CV_HREG_e(24i32);
    pub const CV_R68_CACR: CV_HREG_e = CV_HREG_e(22i32);
    pub const CV_R68_CAL: CV_HREG_e = CV_HREG_e(60i32);
    pub const CV_R68_CCR: CV_HREG_e = CV_HREG_e(16i32);
    pub const CV_R68_CRP: CV_HREG_e = CV_HREG_e(54i32);
    pub const CV_R68_D0: CV_HREG_e = CV_HREG_e(0i32);
    pub const CV_R68_D1: CV_HREG_e = CV_HREG_e(1i32);
    pub const CV_R68_D2: CV_HREG_e = CV_HREG_e(2i32);
    pub const CV_R68_D3: CV_HREG_e = CV_HREG_e(3i32);
    pub const CV_R68_D4: CV_HREG_e = CV_HREG_e(4i32);
    pub const CV_R68_D5: CV_HREG_e = CV_HREG_e(5i32);
    pub const CV_R68_D6: CV_HREG_e = CV_HREG_e(6i32);
    pub const CV_R68_D7: CV_HREG_e = CV_HREG_e(7i32);
    pub const CV_R68_DFC: CV_HREG_e = CV_HREG_e(21i32);
    pub const CV_R68_DRP: CV_HREG_e = CV_HREG_e(56i32);
    pub const CV_R68_DTT0: CV_HREG_e = CV_HREG_e(44i32);
    pub const CV_R68_DTT1: CV_HREG_e = CV_HREG_e(45i32);
    pub const CV_R68_FP0: CV_HREG_e = CV_HREG_e(32i32);
    pub const CV_R68_FP1: CV_HREG_e = CV_HREG_e(33i32);
    pub const CV_R68_FP2: CV_HREG_e = CV_HREG_e(34i32);
    pub const CV_R68_FP3: CV_HREG_e = CV_HREG_e(35i32);
    pub const CV_R68_FP4: CV_HREG_e = CV_HREG_e(36i32);
    pub const CV_R68_FP5: CV_HREG_e = CV_HREG_e(37i32);
    pub const CV_R68_FP6: CV_HREG_e = CV_HREG_e(38i32);
    pub const CV_R68_FP7: CV_HREG_e = CV_HREG_e(39i32);
    pub const CV_R68_FPCR: CV_HREG_e = CV_HREG_e(28i32);
    pub const CV_R68_FPIAR: CV_HREG_e = CV_HREG_e(30i32);
    pub const CV_R68_FPSR: CV_HREG_e = CV_HREG_e(29i32);
    pub const CV_R68_ISP: CV_HREG_e = CV_HREG_e(25i32);
    pub const CV_R68_ITT0: CV_HREG_e = CV_HREG_e(46i32);
    pub const CV_R68_ITT1: CV_HREG_e = CV_HREG_e(47i32);
    pub const CV_R68_MMUSR: CV_HREG_e = CV_HREG_e(42i32);
    pub const CV_R68_MMUSR030: CV_HREG_e = CV_HREG_e(41i32);
    pub const CV_R68_MSP: CV_HREG_e = CV_HREG_e(19i32);
    pub const CV_R68_PC: CV_HREG_e = CV_HREG_e(26i32);
    pub const CV_R68_PCSR: CV_HREG_e = CV_HREG_e(52i32);
    pub const CV_R68_PSR: CV_HREG_e = CV_HREG_e(51i32);
    pub const CV_R68_SCC: CV_HREG_e = CV_HREG_e(59i32);
    pub const CV_R68_SFC: CV_HREG_e = CV_HREG_e(20i32);
    pub const CV_R68_SR: CV_HREG_e = CV_HREG_e(17i32);
    pub const CV_R68_SRP: CV_HREG_e = CV_HREG_e(55i32);
    pub const CV_R68_TC: CV_HREG_e = CV_HREG_e(57i32);
    pub const CV_R68_TT0: CV_HREG_e = CV_HREG_e(61i32);
    pub const CV_R68_TT1: CV_HREG_e = CV_HREG_e(62i32);
    pub const CV_R68_URP: CV_HREG_e = CV_HREG_e(43i32);
    pub const CV_R68_USP: CV_HREG_e = CV_HREG_e(18i32);
    pub const CV_R68_VAL: CV_HREG_e = CV_HREG_e(53i32);
    pub const CV_R68_VBR: CV_HREG_e = CV_HREG_e(23i32);
    pub const CV_REG_AH: CV_HREG_e = CV_HREG_e(5i32);
    pub const CV_REG_AL: CV_HREG_e = CV_HREG_e(1i32);
    pub const CV_REG_AX: CV_HREG_e = CV_HREG_e(9i32);
    pub const CV_REG_BH: CV_HREG_e = CV_HREG_e(8i32);
    pub const CV_REG_BL: CV_HREG_e = CV_HREG_e(4i32);
    pub const CV_REG_BND0: CV_HREG_e = CV_HREG_e(396i32);
    pub const CV_REG_BND1: CV_HREG_e = CV_HREG_e(397i32);
    pub const CV_REG_BND2: CV_HREG_e = CV_HREG_e(398i32);
    pub const CV_REG_BND3: CV_HREG_e = CV_HREG_e(399i32);
    pub const CV_REG_BNDCFGU: CV_HREG_e = CV_HREG_e(400i32);
    pub const CV_REG_BNDSTATUS: CV_HREG_e = CV_HREG_e(401i32);
    pub const CV_REG_BP: CV_HREG_e = CV_HREG_e(14i32);
    pub const CV_REG_BX: CV_HREG_e = CV_HREG_e(12i32);
    pub const CV_REG_CH: CV_HREG_e = CV_HREG_e(6i32);
    pub const CV_REG_CL: CV_HREG_e = CV_HREG_e(2i32);
    pub const CV_REG_CR0: CV_HREG_e = CV_HREG_e(80i32);
    pub const CV_REG_CR1: CV_HREG_e = CV_HREG_e(81i32);
    pub const CV_REG_CR2: CV_HREG_e = CV_HREG_e(82i32);
    pub const CV_REG_CR3: CV_HREG_e = CV_HREG_e(83i32);
    pub const CV_REG_CR4: CV_HREG_e = CV_HREG_e(84i32);
    pub const CV_REG_CS: CV_HREG_e = CV_HREG_e(26i32);
    pub const CV_REG_CTRL: CV_HREG_e = CV_HREG_e(136i32);
    pub const CV_REG_CX: CV_HREG_e = CV_HREG_e(10i32);
    pub const CV_REG_DH: CV_HREG_e = CV_HREG_e(7i32);
    pub const CV_REG_DI: CV_HREG_e = CV_HREG_e(16i32);
    pub const CV_REG_DL: CV_HREG_e = CV_HREG_e(3i32);
    pub const CV_REG_DR0: CV_HREG_e = CV_HREG_e(90i32);
    pub const CV_REG_DR1: CV_HREG_e = CV_HREG_e(91i32);
    pub const CV_REG_DR2: CV_HREG_e = CV_HREG_e(92i32);
    pub const CV_REG_DR3: CV_HREG_e = CV_HREG_e(93i32);
    pub const CV_REG_DR4: CV_HREG_e = CV_HREG_e(94i32);
    pub const CV_REG_DR5: CV_HREG_e = CV_HREG_e(95i32);
    pub const CV_REG_DR6: CV_HREG_e = CV_HREG_e(96i32);
    pub const CV_REG_DR7: CV_HREG_e = CV_HREG_e(97i32);
    pub const CV_REG_DS: CV_HREG_e = CV_HREG_e(28i32);
    pub const CV_REG_DX: CV_HREG_e = CV_HREG_e(11i32);
    pub const CV_REG_EAX: CV_HREG_e = CV_HREG_e(17i32);
    pub const CV_REG_EBP: CV_HREG_e = CV_HREG_e(22i32);
    pub const CV_REG_EBX: CV_HREG_e = CV_HREG_e(20i32);
    pub const CV_REG_ECX: CV_HREG_e = CV_HREG_e(18i32);
    pub const CV_REG_EDI: CV_HREG_e = CV_HREG_e(24i32);
    pub const CV_REG_EDX: CV_HREG_e = CV_HREG_e(19i32);
    pub const CV_REG_EDXEAX: CV_HREG_e = CV_HREG_e(212i32);
    pub const CV_REG_EFLAGS: CV_HREG_e = CV_HREG_e(34i32);
    pub const CV_REG_EIP: CV_HREG_e = CV_HREG_e(33i32);
    pub const CV_REG_EMM0H: CV_HREG_e = CV_HREG_e(228i32);
    pub const CV_REG_EMM0L: CV_HREG_e = CV_HREG_e(220i32);
    pub const CV_REG_EMM1H: CV_HREG_e = CV_HREG_e(229i32);
    pub const CV_REG_EMM1L: CV_HREG_e = CV_HREG_e(221i32);
    pub const CV_REG_EMM2H: CV_HREG_e = CV_HREG_e(230i32);
    pub const CV_REG_EMM2L: CV_HREG_e = CV_HREG_e(222i32);
    pub const CV_REG_EMM3H: CV_HREG_e = CV_HREG_e(231i32);
    pub const CV_REG_EMM3L: CV_HREG_e = CV_HREG_e(223i32);
    pub const CV_REG_EMM4H: CV_HREG_e = CV_HREG_e(232i32);
    pub const CV_REG_EMM4L: CV_HREG_e = CV_HREG_e(224i32);
    pub const CV_REG_EMM5H: CV_HREG_e = CV_HREG_e(233i32);
    pub const CV_REG_EMM5L: CV_HREG_e = CV_HREG_e(225i32);
    pub const CV_REG_EMM6H: CV_HREG_e = CV_HREG_e(234i32);
    pub const CV_REG_EMM6L: CV_HREG_e = CV_HREG_e(226i32);
    pub const CV_REG_EMM7H: CV_HREG_e = CV_HREG_e(235i32);
    pub const CV_REG_EMM7L: CV_HREG_e = CV_HREG_e(227i32);
    pub const CV_REG_ES: CV_HREG_e = CV_HREG_e(25i32);
    pub const CV_REG_ESI: CV_HREG_e = CV_HREG_e(23i32);
    pub const CV_REG_ESP: CV_HREG_e = CV_HREG_e(21i32);
    pub const CV_REG_FLAGS: CV_HREG_e = CV_HREG_e(32i32);
    pub const CV_REG_FPCS: CV_HREG_e = CV_HREG_e(140i32);
    pub const CV_REG_FPDO: CV_HREG_e = CV_HREG_e(141i32);
    pub const CV_REG_FPDS: CV_HREG_e = CV_HREG_e(142i32);
    pub const CV_REG_FPEDO: CV_HREG_e = CV_HREG_e(145i32);
    pub const CV_REG_FPEIP: CV_HREG_e = CV_HREG_e(144i32);
    pub const CV_REG_FPIP: CV_HREG_e = CV_HREG_e(139i32);
    pub const CV_REG_FS: CV_HREG_e = CV_HREG_e(29i32);
    pub const CV_REG_GDTL: CV_HREG_e = CV_HREG_e(111i32);
    pub const CV_REG_GDTR: CV_HREG_e = CV_HREG_e(110i32);
    pub const CV_REG_GS: CV_HREG_e = CV_HREG_e(30i32);
    pub const CV_REG_IDTL: CV_HREG_e = CV_HREG_e(113i32);
    pub const CV_REG_IDTR: CV_HREG_e = CV_HREG_e(112i32);
    pub const CV_REG_IP: CV_HREG_e = CV_HREG_e(31i32);
    pub const CV_REG_ISEM: CV_HREG_e = CV_HREG_e(143i32);
    pub const CV_REG_K0: CV_HREG_e = CV_HREG_e(418i32);
    pub const CV_REG_K1: CV_HREG_e = CV_HREG_e(419i32);
    pub const CV_REG_K2: CV_HREG_e = CV_HREG_e(420i32);
    pub const CV_REG_K3: CV_HREG_e = CV_HREG_e(421i32);
    pub const CV_REG_K4: CV_HREG_e = CV_HREG_e(422i32);
    pub const CV_REG_K5: CV_HREG_e = CV_HREG_e(423i32);
    pub const CV_REG_K6: CV_HREG_e = CV_HREG_e(424i32);
    pub const CV_REG_K7: CV_HREG_e = CV_HREG_e(425i32);
    pub const CV_REG_LDTR: CV_HREG_e = CV_HREG_e(114i32);
    pub const CV_REG_MM0: CV_HREG_e = CV_HREG_e(146i32);
    pub const CV_REG_MM00: CV_HREG_e = CV_HREG_e(236i32);
    pub const CV_REG_MM01: CV_HREG_e = CV_HREG_e(237i32);
    pub const CV_REG_MM1: CV_HREG_e = CV_HREG_e(147i32);
    pub const CV_REG_MM10: CV_HREG_e = CV_HREG_e(238i32);
    pub const CV_REG_MM11: CV_HREG_e = CV_HREG_e(239i32);
    pub const CV_REG_MM2: CV_HREG_e = CV_HREG_e(148i32);
    pub const CV_REG_MM20: CV_HREG_e = CV_HREG_e(240i32);
    pub const CV_REG_MM21: CV_HREG_e = CV_HREG_e(241i32);
    pub const CV_REG_MM3: CV_HREG_e = CV_HREG_e(149i32);
    pub const CV_REG_MM30: CV_HREG_e = CV_HREG_e(242i32);
    pub const CV_REG_MM31: CV_HREG_e = CV_HREG_e(243i32);
    pub const CV_REG_MM4: CV_HREG_e = CV_HREG_e(150i32);
    pub const CV_REG_MM40: CV_HREG_e = CV_HREG_e(244i32);
    pub const CV_REG_MM41: CV_HREG_e = CV_HREG_e(245i32);
    pub const CV_REG_MM5: CV_HREG_e = CV_HREG_e(151i32);
    pub const CV_REG_MM50: CV_HREG_e = CV_HREG_e(246i32);
    pub const CV_REG_MM51: CV_HREG_e = CV_HREG_e(247i32);
    pub const CV_REG_MM6: CV_HREG_e = CV_HREG_e(152i32);
    pub const CV_REG_MM60: CV_HREG_e = CV_HREG_e(248i32);
    pub const CV_REG_MM61: CV_HREG_e = CV_HREG_e(249i32);
    pub const CV_REG_MM7: CV_HREG_e = CV_HREG_e(153i32);
    pub const CV_REG_MM70: CV_HREG_e = CV_HREG_e(250i32);
    pub const CV_REG_MM71: CV_HREG_e = CV_HREG_e(251i32);
    pub const CV_REG_MXCSR: CV_HREG_e = CV_HREG_e(211i32);
    pub const CV_REG_NONE: CV_HREG_e = CV_HREG_e(0i32);
    pub const CV_REG_PCDR3: CV_HREG_e = CV_HREG_e(43i32);
    pub const CV_REG_PCDR4: CV_HREG_e = CV_HREG_e(44i32);
    pub const CV_REG_PCDR5: CV_HREG_e = CV_HREG_e(45i32);
    pub const CV_REG_PCDR6: CV_HREG_e = CV_HREG_e(46i32);
    pub const CV_REG_PCDR7: CV_HREG_e = CV_HREG_e(47i32);
    pub const CV_REG_PSEUDO1: CV_HREG_e = CV_HREG_e(116i32);
    pub const CV_REG_PSEUDO2: CV_HREG_e = CV_HREG_e(117i32);
    pub const CV_REG_PSEUDO3: CV_HREG_e = CV_HREG_e(118i32);
    pub const CV_REG_PSEUDO4: CV_HREG_e = CV_HREG_e(119i32);
    pub const CV_REG_PSEUDO5: CV_HREG_e = CV_HREG_e(120i32);
    pub const CV_REG_PSEUDO6: CV_HREG_e = CV_HREG_e(121i32);
    pub const CV_REG_PSEUDO7: CV_HREG_e = CV_HREG_e(122i32);
    pub const CV_REG_PSEUDO8: CV_HREG_e = CV_HREG_e(123i32);
    pub const CV_REG_PSEUDO9: CV_HREG_e = CV_HREG_e(124i32);
    pub const CV_REG_QUOTE: CV_HREG_e = CV_HREG_e(42i32);
    pub const CV_REG_SI: CV_HREG_e = CV_HREG_e(15i32);
    pub const CV_REG_SP: CV_HREG_e = CV_HREG_e(13i32);
    pub const CV_REG_SS: CV_HREG_e = CV_HREG_e(27i32);
    pub const CV_REG_SSP: CV_HREG_e = CV_HREG_e(426i32);
    pub const CV_REG_ST0: CV_HREG_e = CV_HREG_e(128i32);
    pub const CV_REG_ST1: CV_HREG_e = CV_HREG_e(129i32);
    pub const CV_REG_ST2: CV_HREG_e = CV_HREG_e(130i32);
    pub const CV_REG_ST3: CV_HREG_e = CV_HREG_e(131i32);
    pub const CV_REG_ST4: CV_HREG_e = CV_HREG_e(132i32);
    pub const CV_REG_ST5: CV_HREG_e = CV_HREG_e(133i32);
    pub const CV_REG_ST6: CV_HREG_e = CV_HREG_e(134i32);
    pub const CV_REG_ST7: CV_HREG_e = CV_HREG_e(135i32);
    pub const CV_REG_STAT: CV_HREG_e = CV_HREG_e(137i32);
    pub const CV_REG_TAG: CV_HREG_e = CV_HREG_e(138i32);
    pub const CV_REG_TEMP: CV_HREG_e = CV_HREG_e(40i32);
    pub const CV_REG_TEMPH: CV_HREG_e = CV_HREG_e(41i32);
    pub const CV_REG_TR: CV_HREG_e = CV_HREG_e(115i32);
    pub const CV_REG_XMM0: CV_HREG_e = CV_HREG_e(154i32);
    pub const CV_REG_XMM00: CV_HREG_e = CV_HREG_e(162i32);
    pub const CV_REG_XMM01: CV_HREG_e = CV_HREG_e(163i32);
    pub const CV_REG_XMM02: CV_HREG_e = CV_HREG_e(164i32);
    pub const CV_REG_XMM03: CV_HREG_e = CV_HREG_e(165i32);
    pub const CV_REG_XMM0H: CV_HREG_e = CV_HREG_e(202i32);
    pub const CV_REG_XMM0L: CV_HREG_e = CV_HREG_e(194i32);
    pub const CV_REG_XMM1: CV_HREG_e = CV_HREG_e(155i32);
    pub const CV_REG_XMM10: CV_HREG_e = CV_HREG_e(166i32);
    pub const CV_REG_XMM11: CV_HREG_e = CV_HREG_e(167i32);
    pub const CV_REG_XMM12: CV_HREG_e = CV_HREG_e(168i32);
    pub const CV_REG_XMM13: CV_HREG_e = CV_HREG_e(169i32);
    pub const CV_REG_XMM1H: CV_HREG_e = CV_HREG_e(203i32);
    pub const CV_REG_XMM1L: CV_HREG_e = CV_HREG_e(195i32);
    pub const CV_REG_XMM2: CV_HREG_e = CV_HREG_e(156i32);
    pub const CV_REG_XMM20: CV_HREG_e = CV_HREG_e(170i32);
    pub const CV_REG_XMM21: CV_HREG_e = CV_HREG_e(171i32);
    pub const CV_REG_XMM22: CV_HREG_e = CV_HREG_e(172i32);
    pub const CV_REG_XMM23: CV_HREG_e = CV_HREG_e(173i32);
    pub const CV_REG_XMM2H: CV_HREG_e = CV_HREG_e(204i32);
    pub const CV_REG_XMM2L: CV_HREG_e = CV_HREG_e(196i32);
    pub const CV_REG_XMM3: CV_HREG_e = CV_HREG_e(157i32);
    pub const CV_REG_XMM30: CV_HREG_e = CV_HREG_e(174i32);
    pub const CV_REG_XMM31: CV_HREG_e = CV_HREG_e(175i32);
    pub const CV_REG_XMM32: CV_HREG_e = CV_HREG_e(176i32);
    pub const CV_REG_XMM33: CV_HREG_e = CV_HREG_e(177i32);
    pub const CV_REG_XMM3H: CV_HREG_e = CV_HREG_e(205i32);
    pub const CV_REG_XMM3L: CV_HREG_e = CV_HREG_e(197i32);
    pub const CV_REG_XMM4: CV_HREG_e = CV_HREG_e(158i32);
    pub const CV_REG_XMM40: CV_HREG_e = CV_HREG_e(178i32);
    pub const CV_REG_XMM41: CV_HREG_e = CV_HREG_e(179i32);
    pub const CV_REG_XMM42: CV_HREG_e = CV_HREG_e(180i32);
    pub const CV_REG_XMM43: CV_HREG_e = CV_HREG_e(181i32);
    pub const CV_REG_XMM4H: CV_HREG_e = CV_HREG_e(206i32);
    pub const CV_REG_XMM4L: CV_HREG_e = CV_HREG_e(198i32);
    pub const CV_REG_XMM5: CV_HREG_e = CV_HREG_e(159i32);
    pub const CV_REG_XMM50: CV_HREG_e = CV_HREG_e(182i32);
    pub const CV_REG_XMM51: CV_HREG_e = CV_HREG_e(183i32);
    pub const CV_REG_XMM52: CV_HREG_e = CV_HREG_e(184i32);
    pub const CV_REG_XMM53: CV_HREG_e = CV_HREG_e(185i32);
    pub const CV_REG_XMM5H: CV_HREG_e = CV_HREG_e(207i32);
    pub const CV_REG_XMM5L: CV_HREG_e = CV_HREG_e(199i32);
    pub const CV_REG_XMM6: CV_HREG_e = CV_HREG_e(160i32);
    pub const CV_REG_XMM60: CV_HREG_e = CV_HREG_e(186i32);
    pub const CV_REG_XMM61: CV_HREG_e = CV_HREG_e(187i32);
    pub const CV_REG_XMM62: CV_HREG_e = CV_HREG_e(188i32);
    pub const CV_REG_XMM63: CV_HREG_e = CV_HREG_e(189i32);
    pub const CV_REG_XMM6H: CV_HREG_e = CV_HREG_e(208i32);
    pub const CV_REG_XMM6L: CV_HREG_e = CV_HREG_e(200i32);
    pub const CV_REG_XMM7: CV_HREG_e = CV_HREG_e(161i32);
    pub const CV_REG_XMM70: CV_HREG_e = CV_HREG_e(190i32);
    pub const CV_REG_XMM71: CV_HREG_e = CV_HREG_e(191i32);
    pub const CV_REG_XMM72: CV_HREG_e = CV_HREG_e(192i32);
    pub const CV_REG_XMM73: CV_HREG_e = CV_HREG_e(193i32);
    pub const CV_REG_XMM7H: CV_HREG_e = CV_HREG_e(209i32);
    pub const CV_REG_XMM7L: CV_HREG_e = CV_HREG_e(201i32);
    pub const CV_REG_YMM0: CV_HREG_e = CV_HREG_e(252i32);
    pub const CV_REG_YMM0D0: CV_HREG_e = CV_HREG_e(364i32);
    pub const CV_REG_YMM0D1: CV_HREG_e = CV_HREG_e(365i32);
    pub const CV_REG_YMM0D2: CV_HREG_e = CV_HREG_e(366i32);
    pub const CV_REG_YMM0D3: CV_HREG_e = CV_HREG_e(367i32);
    pub const CV_REG_YMM0F0: CV_HREG_e = CV_HREG_e(300i32);
    pub const CV_REG_YMM0F1: CV_HREG_e = CV_HREG_e(301i32);
    pub const CV_REG_YMM0F2: CV_HREG_e = CV_HREG_e(302i32);
    pub const CV_REG_YMM0F3: CV_HREG_e = CV_HREG_e(303i32);
    pub const CV_REG_YMM0F4: CV_HREG_e = CV_HREG_e(304i32);
    pub const CV_REG_YMM0F5: CV_HREG_e = CV_HREG_e(305i32);
    pub const CV_REG_YMM0F6: CV_HREG_e = CV_HREG_e(306i32);
    pub const CV_REG_YMM0F7: CV_HREG_e = CV_HREG_e(307i32);
    pub const CV_REG_YMM0H: CV_HREG_e = CV_HREG_e(260i32);
    pub const CV_REG_YMM0I0: CV_HREG_e = CV_HREG_e(268i32);
    pub const CV_REG_YMM0I1: CV_HREG_e = CV_HREG_e(269i32);
    pub const CV_REG_YMM0I2: CV_HREG_e = CV_HREG_e(270i32);
    pub const CV_REG_YMM0I3: CV_HREG_e = CV_HREG_e(271i32);
    pub const CV_REG_YMM1: CV_HREG_e = CV_HREG_e(253i32);
    pub const CV_REG_YMM1D0: CV_HREG_e = CV_HREG_e(368i32);
    pub const CV_REG_YMM1D1: CV_HREG_e = CV_HREG_e(369i32);
    pub const CV_REG_YMM1D2: CV_HREG_e = CV_HREG_e(370i32);
    pub const CV_REG_YMM1D3: CV_HREG_e = CV_HREG_e(371i32);
    pub const CV_REG_YMM1F0: CV_HREG_e = CV_HREG_e(308i32);
    pub const CV_REG_YMM1F1: CV_HREG_e = CV_HREG_e(309i32);
    pub const CV_REG_YMM1F2: CV_HREG_e = CV_HREG_e(310i32);
    pub const CV_REG_YMM1F3: CV_HREG_e = CV_HREG_e(311i32);
    pub const CV_REG_YMM1F4: CV_HREG_e = CV_HREG_e(312i32);
    pub const CV_REG_YMM1F5: CV_HREG_e = CV_HREG_e(313i32);
    pub const CV_REG_YMM1F6: CV_HREG_e = CV_HREG_e(314i32);
    pub const CV_REG_YMM1F7: CV_HREG_e = CV_HREG_e(315i32);
    pub const CV_REG_YMM1H: CV_HREG_e = CV_HREG_e(261i32);
    pub const CV_REG_YMM1I0: CV_HREG_e = CV_HREG_e(272i32);
    pub const CV_REG_YMM1I1: CV_HREG_e = CV_HREG_e(273i32);
    pub const CV_REG_YMM1I2: CV_HREG_e = CV_HREG_e(274i32);
    pub const CV_REG_YMM1I3: CV_HREG_e = CV_HREG_e(275i32);
    pub const CV_REG_YMM2: CV_HREG_e = CV_HREG_e(254i32);
    pub const CV_REG_YMM2D0: CV_HREG_e = CV_HREG_e(372i32);
    pub const CV_REG_YMM2D1: CV_HREG_e = CV_HREG_e(373i32);
    pub const CV_REG_YMM2D2: CV_HREG_e = CV_HREG_e(374i32);
    pub const CV_REG_YMM2D3: CV_HREG_e = CV_HREG_e(375i32);
    pub const CV_REG_YMM2F0: CV_HREG_e = CV_HREG_e(316i32);
    pub const CV_REG_YMM2F1: CV_HREG_e = CV_HREG_e(317i32);
    pub const CV_REG_YMM2F2: CV_HREG_e = CV_HREG_e(318i32);
    pub const CV_REG_YMM2F3: CV_HREG_e = CV_HREG_e(319i32);
    pub const CV_REG_YMM2F4: CV_HREG_e = CV_HREG_e(320i32);
    pub const CV_REG_YMM2F5: CV_HREG_e = CV_HREG_e(321i32);
    pub const CV_REG_YMM2F6: CV_HREG_e = CV_HREG_e(322i32);
    pub const CV_REG_YMM2F7: CV_HREG_e = CV_HREG_e(323i32);
    pub const CV_REG_YMM2H: CV_HREG_e = CV_HREG_e(262i32);
    pub const CV_REG_YMM2I0: CV_HREG_e = CV_HREG_e(276i32);
    pub const CV_REG_YMM2I1: CV_HREG_e = CV_HREG_e(277i32);
    pub const CV_REG_YMM2I2: CV_HREG_e = CV_HREG_e(278i32);
    pub const CV_REG_YMM2I3: CV_HREG_e = CV_HREG_e(279i32);
    pub const CV_REG_YMM3: CV_HREG_e = CV_HREG_e(255i32);
    pub const CV_REG_YMM3D0: CV_HREG_e = CV_HREG_e(376i32);
    pub const CV_REG_YMM3D1: CV_HREG_e = CV_HREG_e(377i32);
    pub const CV_REG_YMM3D2: CV_HREG_e = CV_HREG_e(378i32);
    pub const CV_REG_YMM3D3: CV_HREG_e = CV_HREG_e(379i32);
    pub const CV_REG_YMM3F0: CV_HREG_e = CV_HREG_e(324i32);
    pub const CV_REG_YMM3F1: CV_HREG_e = CV_HREG_e(325i32);
    pub const CV_REG_YMM3F2: CV_HREG_e = CV_HREG_e(326i32);
    pub const CV_REG_YMM3F3: CV_HREG_e = CV_HREG_e(327i32);
    pub const CV_REG_YMM3F4: CV_HREG_e = CV_HREG_e(328i32);
    pub const CV_REG_YMM3F5: CV_HREG_e = CV_HREG_e(329i32);
    pub const CV_REG_YMM3F6: CV_HREG_e = CV_HREG_e(330i32);
    pub const CV_REG_YMM3F7: CV_HREG_e = CV_HREG_e(331i32);
    pub const CV_REG_YMM3H: CV_HREG_e = CV_HREG_e(263i32);
    pub const CV_REG_YMM3I0: CV_HREG_e = CV_HREG_e(280i32);
    pub const CV_REG_YMM3I1: CV_HREG_e = CV_HREG_e(281i32);
    pub const CV_REG_YMM3I2: CV_HREG_e = CV_HREG_e(282i32);
    pub const CV_REG_YMM3I3: CV_HREG_e = CV_HREG_e(283i32);
    pub const CV_REG_YMM4: CV_HREG_e = CV_HREG_e(256i32);
    pub const CV_REG_YMM4D0: CV_HREG_e = CV_HREG_e(380i32);
    pub const CV_REG_YMM4D1: CV_HREG_e = CV_HREG_e(381i32);
    pub const CV_REG_YMM4D2: CV_HREG_e = CV_HREG_e(382i32);
    pub const CV_REG_YMM4D3: CV_HREG_e = CV_HREG_e(383i32);
    pub const CV_REG_YMM4F0: CV_HREG_e = CV_HREG_e(332i32);
    pub const CV_REG_YMM4F1: CV_HREG_e = CV_HREG_e(333i32);
    pub const CV_REG_YMM4F2: CV_HREG_e = CV_HREG_e(334i32);
    pub const CV_REG_YMM4F3: CV_HREG_e = CV_HREG_e(335i32);
    pub const CV_REG_YMM4F4: CV_HREG_e = CV_HREG_e(336i32);
    pub const CV_REG_YMM4F5: CV_HREG_e = CV_HREG_e(337i32);
    pub const CV_REG_YMM4F6: CV_HREG_e = CV_HREG_e(338i32);
    pub const CV_REG_YMM4F7: CV_HREG_e = CV_HREG_e(339i32);
    pub const CV_REG_YMM4H: CV_HREG_e = CV_HREG_e(264i32);
    pub const CV_REG_YMM4I0: CV_HREG_e = CV_HREG_e(284i32);
    pub const CV_REG_YMM4I1: CV_HREG_e = CV_HREG_e(285i32);
    pub const CV_REG_YMM4I2: CV_HREG_e = CV_HREG_e(286i32);
    pub const CV_REG_YMM4I3: CV_HREG_e = CV_HREG_e(287i32);
    pub const CV_REG_YMM5: CV_HREG_e = CV_HREG_e(257i32);
    pub const CV_REG_YMM5D0: CV_HREG_e = CV_HREG_e(384i32);
    pub const CV_REG_YMM5D1: CV_HREG_e = CV_HREG_e(385i32);
    pub const CV_REG_YMM5D2: CV_HREG_e = CV_HREG_e(386i32);
    pub const CV_REG_YMM5D3: CV_HREG_e = CV_HREG_e(387i32);
    pub const CV_REG_YMM5F0: CV_HREG_e = CV_HREG_e(340i32);
    pub const CV_REG_YMM5F1: CV_HREG_e = CV_HREG_e(341i32);
    pub const CV_REG_YMM5F2: CV_HREG_e = CV_HREG_e(342i32);
    pub const CV_REG_YMM5F3: CV_HREG_e = CV_HREG_e(343i32);
    pub const CV_REG_YMM5F4: CV_HREG_e = CV_HREG_e(344i32);
    pub const CV_REG_YMM5F5: CV_HREG_e = CV_HREG_e(345i32);
    pub const CV_REG_YMM5F6: CV_HREG_e = CV_HREG_e(346i32);
    pub const CV_REG_YMM5F7: CV_HREG_e = CV_HREG_e(347i32);
    pub const CV_REG_YMM5H: CV_HREG_e = CV_HREG_e(265i32);
    pub const CV_REG_YMM5I0: CV_HREG_e = CV_HREG_e(288i32);
    pub const CV_REG_YMM5I1: CV_HREG_e = CV_HREG_e(289i32);
    pub const CV_REG_YMM5I2: CV_HREG_e = CV_HREG_e(290i32);
    pub const CV_REG_YMM5I3: CV_HREG_e = CV_HREG_e(291i32);
    pub const CV_REG_YMM6: CV_HREG_e = CV_HREG_e(258i32);
    pub const CV_REG_YMM6D0: CV_HREG_e = CV_HREG_e(388i32);
    pub const CV_REG_YMM6D1: CV_HREG_e = CV_HREG_e(389i32);
    pub const CV_REG_YMM6D2: CV_HREG_e = CV_HREG_e(390i32);
    pub const CV_REG_YMM6D3: CV_HREG_e = CV_HREG_e(391i32);
    pub const CV_REG_YMM6F0: CV_HREG_e = CV_HREG_e(348i32);
    pub const CV_REG_YMM6F1: CV_HREG_e = CV_HREG_e(349i32);
    pub const CV_REG_YMM6F2: CV_HREG_e = CV_HREG_e(350i32);
    pub const CV_REG_YMM6F3: CV_HREG_e = CV_HREG_e(351i32);
    pub const CV_REG_YMM6F4: CV_HREG_e = CV_HREG_e(352i32);
    pub const CV_REG_YMM6F5: CV_HREG_e = CV_HREG_e(353i32);
    pub const CV_REG_YMM6F6: CV_HREG_e = CV_HREG_e(354i32);
    pub const CV_REG_YMM6F7: CV_HREG_e = CV_HREG_e(355i32);
    pub const CV_REG_YMM6H: CV_HREG_e = CV_HREG_e(266i32);
    pub const CV_REG_YMM6I0: CV_HREG_e = CV_HREG_e(292i32);
    pub const CV_REG_YMM6I1: CV_HREG_e = CV_HREG_e(293i32);
    pub const CV_REG_YMM6I2: CV_HREG_e = CV_HREG_e(294i32);
    pub const CV_REG_YMM6I3: CV_HREG_e = CV_HREG_e(295i32);
    pub const CV_REG_YMM7: CV_HREG_e = CV_HREG_e(259i32);
    pub const CV_REG_YMM7D0: CV_HREG_e = CV_HREG_e(392i32);
    pub const CV_REG_YMM7D1: CV_HREG_e = CV_HREG_e(393i32);
    pub const CV_REG_YMM7D2: CV_HREG_e = CV_HREG_e(394i32);
    pub const CV_REG_YMM7D3: CV_HREG_e = CV_HREG_e(395i32);
    pub const CV_REG_YMM7F0: CV_HREG_e = CV_HREG_e(356i32);
    pub const CV_REG_YMM7F1: CV_HREG_e = CV_HREG_e(357i32);
    pub const CV_REG_YMM7F2: CV_HREG_e = CV_HREG_e(358i32);
    pub const CV_REG_YMM7F3: CV_HREG_e = CV_HREG_e(359i32);
    pub const CV_REG_YMM7F4: CV_HREG_e = CV_HREG_e(360i32);
    pub const CV_REG_YMM7F5: CV_HREG_e = CV_HREG_e(361i32);
    pub const CV_REG_YMM7F6: CV_HREG_e = CV_HREG_e(362i32);
    pub const CV_REG_YMM7F7: CV_HREG_e = CV_HREG_e(363i32);
    pub const CV_REG_YMM7H: CV_HREG_e = CV_HREG_e(267i32);
    pub const CV_REG_YMM7I0: CV_HREG_e = CV_HREG_e(296i32);
    pub const CV_REG_YMM7I1: CV_HREG_e = CV_HREG_e(297i32);
    pub const CV_REG_YMM7I2: CV_HREG_e = CV_HREG_e(298i32);
    pub const CV_REG_YMM7I3: CV_HREG_e = CV_HREG_e(299i32);
    pub const CV_REG_ZMM0: CV_HREG_e = CV_HREG_e(402i32);
    pub const CV_REG_ZMM0H: CV_HREG_e = CV_HREG_e(410i32);
    pub const CV_REG_ZMM1: CV_HREG_e = CV_HREG_e(403i32);
    pub const CV_REG_ZMM1H: CV_HREG_e = CV_HREG_e(411i32);
    pub const CV_REG_ZMM2: CV_HREG_e = CV_HREG_e(404i32);
    pub const CV_REG_ZMM2H: CV_HREG_e = CV_HREG_e(412i32);
    pub const CV_REG_ZMM3: CV_HREG_e = CV_HREG_e(405i32);
    pub const CV_REG_ZMM3H: CV_HREG_e = CV_HREG_e(413i32);
    pub const CV_REG_ZMM4: CV_HREG_e = CV_HREG_e(406i32);
    pub const CV_REG_ZMM4H: CV_HREG_e = CV_HREG_e(414i32);
    pub const CV_REG_ZMM5: CV_HREG_e = CV_HREG_e(407i32);
    pub const CV_REG_ZMM5H: CV_HREG_e = CV_HREG_e(415i32);
    pub const CV_REG_ZMM6: CV_HREG_e = CV_HREG_e(408i32);
    pub const CV_REG_ZMM6H: CV_HREG_e = CV_HREG_e(416i32);
    pub const CV_REG_ZMM7: CV_HREG_e = CV_HREG_e(409i32);
    pub const CV_REG_ZMM7H: CV_HREG_e = CV_HREG_e(417i32);
    pub const CV_SH3_BamrA: CV_HREG_e = CV_HREG_e(62i32);
    pub const CV_SH3_BamrB: CV_HREG_e = CV_HREG_e(66i32);
    pub const CV_SH3_BarA: CV_HREG_e = CV_HREG_e(60i32);
    pub const CV_SH3_BarB: CV_HREG_e = CV_HREG_e(64i32);
    pub const CV_SH3_BasrA: CV_HREG_e = CV_HREG_e(61i32);
    pub const CV_SH3_BasrB: CV_HREG_e = CV_HREG_e(65i32);
    pub const CV_SH3_BbrA: CV_HREG_e = CV_HREG_e(63i32);
    pub const CV_SH3_BbrB: CV_HREG_e = CV_HREG_e(67i32);
    pub const CV_SH3_BdmrB: CV_HREG_e = CV_HREG_e(69i32);
    pub const CV_SH3_BdrB: CV_HREG_e = CV_HREG_e(68i32);
    pub const CV_SH3_Brcr: CV_HREG_e = CV_HREG_e(70i32);
    pub const CV_SH3_Gbr: CV_HREG_e = CV_HREG_e(38i32);
    pub const CV_SH3_IntFp: CV_HREG_e = CV_HREG_e(24i32);
    pub const CV_SH3_IntR0: CV_HREG_e = CV_HREG_e(10i32);
    pub const CV_SH3_IntR1: CV_HREG_e = CV_HREG_e(11i32);
    pub const CV_SH3_IntR10: CV_HREG_e = CV_HREG_e(20i32);
    pub const CV_SH3_IntR11: CV_HREG_e = CV_HREG_e(21i32);
    pub const CV_SH3_IntR12: CV_HREG_e = CV_HREG_e(22i32);
    pub const CV_SH3_IntR13: CV_HREG_e = CV_HREG_e(23i32);
    pub const CV_SH3_IntR2: CV_HREG_e = CV_HREG_e(12i32);
    pub const CV_SH3_IntR3: CV_HREG_e = CV_HREG_e(13i32);
    pub const CV_SH3_IntR4: CV_HREG_e = CV_HREG_e(14i32);
    pub const CV_SH3_IntR5: CV_HREG_e = CV_HREG_e(15i32);
    pub const CV_SH3_IntR6: CV_HREG_e = CV_HREG_e(16i32);
    pub const CV_SH3_IntR7: CV_HREG_e = CV_HREG_e(17i32);
    pub const CV_SH3_IntR8: CV_HREG_e = CV_HREG_e(18i32);
    pub const CV_SH3_IntR9: CV_HREG_e = CV_HREG_e(19i32);
    pub const CV_SH3_IntSp: CV_HREG_e = CV_HREG_e(25i32);
    pub const CV_SH3_Mach: CV_HREG_e = CV_HREG_e(40i32);
    pub const CV_SH3_Macl: CV_HREG_e = CV_HREG_e(41i32);
    pub const CV_SH3_NOREG: CV_HREG_e = CV_HREG_e(0i32);
    pub const CV_SH3_Pc: CV_HREG_e = CV_HREG_e(50i32);
    pub const CV_SH3_Pr: CV_HREG_e = CV_HREG_e(39i32);
    pub const CV_SH3_Sr: CV_HREG_e = CV_HREG_e(51i32);
    pub const CV_SHMEDIA_CR0: CV_HREG_e = CV_HREG_e(2000i32);
    pub const CV_SHMEDIA_CR1: CV_HREG_e = CV_HREG_e(2001i32);
    pub const CV_SHMEDIA_CR10: CV_HREG_e = CV_HREG_e(2010i32);
    pub const CV_SHMEDIA_CR11: CV_HREG_e = CV_HREG_e(2011i32);
    pub const CV_SHMEDIA_CR12: CV_HREG_e = CV_HREG_e(2012i32);
    pub const CV_SHMEDIA_CR13: CV_HREG_e = CV_HREG_e(2013i32);
    pub const CV_SHMEDIA_CR14: CV_HREG_e = CV_HREG_e(2014i32);
    pub const CV_SHMEDIA_CR15: CV_HREG_e = CV_HREG_e(2015i32);
    pub const CV_SHMEDIA_CR16: CV_HREG_e = CV_HREG_e(2016i32);
    pub const CV_SHMEDIA_CR17: CV_HREG_e = CV_HREG_e(2017i32);
    pub const CV_SHMEDIA_CR18: CV_HREG_e = CV_HREG_e(2018i32);
    pub const CV_SHMEDIA_CR19: CV_HREG_e = CV_HREG_e(2019i32);
    pub const CV_SHMEDIA_CR2: CV_HREG_e = CV_HREG_e(2002i32);
    pub const CV_SHMEDIA_CR20: CV_HREG_e = CV_HREG_e(2020i32);
    pub const CV_SHMEDIA_CR21: CV_HREG_e = CV_HREG_e(2021i32);
    pub const CV_SHMEDIA_CR22: CV_HREG_e = CV_HREG_e(2022i32);
    pub const CV_SHMEDIA_CR23: CV_HREG_e = CV_HREG_e(2023i32);
    pub const CV_SHMEDIA_CR24: CV_HREG_e = CV_HREG_e(2024i32);
    pub const CV_SHMEDIA_CR25: CV_HREG_e = CV_HREG_e(2025i32);
    pub const CV_SHMEDIA_CR26: CV_HREG_e = CV_HREG_e(2026i32);
    pub const CV_SHMEDIA_CR27: CV_HREG_e = CV_HREG_e(2027i32);
    pub const CV_SHMEDIA_CR28: CV_HREG_e = CV_HREG_e(2028i32);
    pub const CV_SHMEDIA_CR29: CV_HREG_e = CV_HREG_e(2029i32);
    pub const CV_SHMEDIA_CR3: CV_HREG_e = CV_HREG_e(2003i32);
    pub const CV_SHMEDIA_CR30: CV_HREG_e = CV_HREG_e(2030i32);
    pub const CV_SHMEDIA_CR31: CV_HREG_e = CV_HREG_e(2031i32);
    pub const CV_SHMEDIA_CR32: CV_HREG_e = CV_HREG_e(2032i32);
    pub const CV_SHMEDIA_CR33: CV_HREG_e = CV_HREG_e(2033i32);
    pub const CV_SHMEDIA_CR34: CV_HREG_e = CV_HREG_e(2034i32);
    pub const CV_SHMEDIA_CR35: CV_HREG_e = CV_HREG_e(2035i32);
    pub const CV_SHMEDIA_CR36: CV_HREG_e = CV_HREG_e(2036i32);
    pub const CV_SHMEDIA_CR37: CV_HREG_e = CV_HREG_e(2037i32);
    pub const CV_SHMEDIA_CR38: CV_HREG_e = CV_HREG_e(2038i32);
    pub const CV_SHMEDIA_CR39: CV_HREG_e = CV_HREG_e(2039i32);
    pub const CV_SHMEDIA_CR4: CV_HREG_e = CV_HREG_e(2004i32);
    pub const CV_SHMEDIA_CR40: CV_HREG_e = CV_HREG_e(2040i32);
    pub const CV_SHMEDIA_CR41: CV_HREG_e = CV_HREG_e(2041i32);
    pub const CV_SHMEDIA_CR42: CV_HREG_e = CV_HREG_e(2042i32);
    pub const CV_SHMEDIA_CR43: CV_HREG_e = CV_HREG_e(2043i32);
    pub const CV_SHMEDIA_CR44: CV_HREG_e = CV_HREG_e(2044i32);
    pub const CV_SHMEDIA_CR45: CV_HREG_e = CV_HREG_e(2045i32);
    pub const CV_SHMEDIA_CR46: CV_HREG_e = CV_HREG_e(2046i32);
    pub const CV_SHMEDIA_CR47: CV_HREG_e = CV_HREG_e(2047i32);
    pub const CV_SHMEDIA_CR48: CV_HREG_e = CV_HREG_e(2048i32);
    pub const CV_SHMEDIA_CR49: CV_HREG_e = CV_HREG_e(2049i32);
    pub const CV_SHMEDIA_CR5: CV_HREG_e = CV_HREG_e(2005i32);
    pub const CV_SHMEDIA_CR50: CV_HREG_e = CV_HREG_e(2050i32);
    pub const CV_SHMEDIA_CR51: CV_HREG_e = CV_HREG_e(2051i32);
    pub const CV_SHMEDIA_CR52: CV_HREG_e = CV_HREG_e(2052i32);
    pub const CV_SHMEDIA_CR53: CV_HREG_e = CV_HREG_e(2053i32);
    pub const CV_SHMEDIA_CR54: CV_HREG_e = CV_HREG_e(2054i32);
    pub const CV_SHMEDIA_CR55: CV_HREG_e = CV_HREG_e(2055i32);
    pub const CV_SHMEDIA_CR56: CV_HREG_e = CV_HREG_e(2056i32);
    pub const CV_SHMEDIA_CR57: CV_HREG_e = CV_HREG_e(2057i32);
    pub const CV_SHMEDIA_CR58: CV_HREG_e = CV_HREG_e(2058i32);
    pub const CV_SHMEDIA_CR59: CV_HREG_e = CV_HREG_e(2059i32);
    pub const CV_SHMEDIA_CR6: CV_HREG_e = CV_HREG_e(2006i32);
    pub const CV_SHMEDIA_CR60: CV_HREG_e = CV_HREG_e(2060i32);
    pub const CV_SHMEDIA_CR61: CV_HREG_e = CV_HREG_e(2061i32);
    pub const CV_SHMEDIA_CR62: CV_HREG_e = CV_HREG_e(2062i32);
    pub const CV_SHMEDIA_CR63: CV_HREG_e = CV_HREG_e(2063i32);
    pub const CV_SHMEDIA_CR7: CV_HREG_e = CV_HREG_e(2007i32);
    pub const CV_SHMEDIA_CR8: CV_HREG_e = CV_HREG_e(2008i32);
    pub const CV_SHMEDIA_CR9: CV_HREG_e = CV_HREG_e(2009i32);
    pub const CV_SHMEDIA_DR0: CV_HREG_e = CV_HREG_e(256i32);
    pub const CV_SHMEDIA_DR10: CV_HREG_e = CV_HREG_e(266i32);
    pub const CV_SHMEDIA_DR12: CV_HREG_e = CV_HREG_e(268i32);
    pub const CV_SHMEDIA_DR14: CV_HREG_e = CV_HREG_e(270i32);
    pub const CV_SHMEDIA_DR16: CV_HREG_e = CV_HREG_e(272i32);
    pub const CV_SHMEDIA_DR18: CV_HREG_e = CV_HREG_e(274i32);
    pub const CV_SHMEDIA_DR2: CV_HREG_e = CV_HREG_e(258i32);
    pub const CV_SHMEDIA_DR20: CV_HREG_e = CV_HREG_e(276i32);
    pub const CV_SHMEDIA_DR22: CV_HREG_e = CV_HREG_e(278i32);
    pub const CV_SHMEDIA_DR24: CV_HREG_e = CV_HREG_e(280i32);
    pub const CV_SHMEDIA_DR26: CV_HREG_e = CV_HREG_e(282i32);
    pub const CV_SHMEDIA_DR28: CV_HREG_e = CV_HREG_e(284i32);
    pub const CV_SHMEDIA_DR30: CV_HREG_e = CV_HREG_e(286i32);
    pub const CV_SHMEDIA_DR32: CV_HREG_e = CV_HREG_e(288i32);
    pub const CV_SHMEDIA_DR34: CV_HREG_e = CV_HREG_e(290i32);
    pub const CV_SHMEDIA_DR36: CV_HREG_e = CV_HREG_e(292i32);
    pub const CV_SHMEDIA_DR38: CV_HREG_e = CV_HREG_e(294i32);
    pub const CV_SHMEDIA_DR4: CV_HREG_e = CV_HREG_e(260i32);
    pub const CV_SHMEDIA_DR40: CV_HREG_e = CV_HREG_e(296i32);
    pub const CV_SHMEDIA_DR42: CV_HREG_e = CV_HREG_e(298i32);
    pub const CV_SHMEDIA_DR44: CV_HREG_e = CV_HREG_e(300i32);
    pub const CV_SHMEDIA_DR46: CV_HREG_e = CV_HREG_e(302i32);
    pub const CV_SHMEDIA_DR48: CV_HREG_e = CV_HREG_e(304i32);
    pub const CV_SHMEDIA_DR50: CV_HREG_e = CV_HREG_e(306i32);
    pub const CV_SHMEDIA_DR52: CV_HREG_e = CV_HREG_e(308i32);
    pub const CV_SHMEDIA_DR54: CV_HREG_e = CV_HREG_e(310i32);
    pub const CV_SHMEDIA_DR56: CV_HREG_e = CV_HREG_e(312i32);
    pub const CV_SHMEDIA_DR58: CV_HREG_e = CV_HREG_e(314i32);
    pub const CV_SHMEDIA_DR6: CV_HREG_e = CV_HREG_e(262i32);
    pub const CV_SHMEDIA_DR60: CV_HREG_e = CV_HREG_e(316i32);
    pub const CV_SHMEDIA_DR62: CV_HREG_e = CV_HREG_e(318i32);
    pub const CV_SHMEDIA_DR8: CV_HREG_e = CV_HREG_e(264i32);
    pub const CV_SHMEDIA_FPSCR: CV_HREG_e = CV_HREG_e(2064i32);
    pub const CV_SHMEDIA_FPUL: CV_HREG_e = CV_HREG_e(160i32);
    pub const CV_SHMEDIA_FR0: CV_HREG_e = CV_HREG_e(128i32);
    pub const CV_SHMEDIA_FR1: CV_HREG_e = CV_HREG_e(129i32);
    pub const CV_SHMEDIA_FR10: CV_HREG_e = CV_HREG_e(138i32);
    pub const CV_SHMEDIA_FR11: CV_HREG_e = CV_HREG_e(139i32);
    pub const CV_SHMEDIA_FR12: CV_HREG_e = CV_HREG_e(140i32);
    pub const CV_SHMEDIA_FR13: CV_HREG_e = CV_HREG_e(141i32);
    pub const CV_SHMEDIA_FR14: CV_HREG_e = CV_HREG_e(142i32);
    pub const CV_SHMEDIA_FR15: CV_HREG_e = CV_HREG_e(143i32);
    pub const CV_SHMEDIA_FR16: CV_HREG_e = CV_HREG_e(144i32);
    pub const CV_SHMEDIA_FR17: CV_HREG_e = CV_HREG_e(145i32);
    pub const CV_SHMEDIA_FR18: CV_HREG_e = CV_HREG_e(146i32);
    pub const CV_SHMEDIA_FR19: CV_HREG_e = CV_HREG_e(147i32);
    pub const CV_SHMEDIA_FR2: CV_HREG_e = CV_HREG_e(130i32);
    pub const CV_SHMEDIA_FR20: CV_HREG_e = CV_HREG_e(148i32);
    pub const CV_SHMEDIA_FR21: CV_HREG_e = CV_HREG_e(149i32);
    pub const CV_SHMEDIA_FR22: CV_HREG_e = CV_HREG_e(150i32);
    pub const CV_SHMEDIA_FR23: CV_HREG_e = CV_HREG_e(151i32);
    pub const CV_SHMEDIA_FR24: CV_HREG_e = CV_HREG_e(152i32);
    pub const CV_SHMEDIA_FR25: CV_HREG_e = CV_HREG_e(153i32);
    pub const CV_SHMEDIA_FR26: CV_HREG_e = CV_HREG_e(154i32);
    pub const CV_SHMEDIA_FR27: CV_HREG_e = CV_HREG_e(155i32);
    pub const CV_SHMEDIA_FR28: CV_HREG_e = CV_HREG_e(156i32);
    pub const CV_SHMEDIA_FR29: CV_HREG_e = CV_HREG_e(157i32);
    pub const CV_SHMEDIA_FR3: CV_HREG_e = CV_HREG_e(131i32);
    pub const CV_SHMEDIA_FR30: CV_HREG_e = CV_HREG_e(158i32);
    pub const CV_SHMEDIA_FR31: CV_HREG_e = CV_HREG_e(159i32);
    pub const CV_SHMEDIA_FR32: CV_HREG_e = CV_HREG_e(160i32);
    pub const CV_SHMEDIA_FR33: CV_HREG_e = CV_HREG_e(161i32);
    pub const CV_SHMEDIA_FR34: CV_HREG_e = CV_HREG_e(162i32);
    pub const CV_SHMEDIA_FR35: CV_HREG_e = CV_HREG_e(163i32);
    pub const CV_SHMEDIA_FR36: CV_HREG_e = CV_HREG_e(164i32);
    pub const CV_SHMEDIA_FR37: CV_HREG_e = CV_HREG_e(165i32);
    pub const CV_SHMEDIA_FR38: CV_HREG_e = CV_HREG_e(166i32);
    pub const CV_SHMEDIA_FR39: CV_HREG_e = CV_HREG_e(167i32);
    pub const CV_SHMEDIA_FR4: CV_HREG_e = CV_HREG_e(132i32);
    pub const CV_SHMEDIA_FR40: CV_HREG_e = CV_HREG_e(168i32);
    pub const CV_SHMEDIA_FR41: CV_HREG_e = CV_HREG_e(169i32);
    pub const CV_SHMEDIA_FR42: CV_HREG_e = CV_HREG_e(170i32);
    pub const CV_SHMEDIA_FR43: CV_HREG_e = CV_HREG_e(171i32);
    pub const CV_SHMEDIA_FR44: CV_HREG_e = CV_HREG_e(172i32);
    pub const CV_SHMEDIA_FR45: CV_HREG_e = CV_HREG_e(173i32);
    pub const CV_SHMEDIA_FR46: CV_HREG_e = CV_HREG_e(174i32);
    pub const CV_SHMEDIA_FR47: CV_HREG_e = CV_HREG_e(175i32);
    pub const CV_SHMEDIA_FR48: CV_HREG_e = CV_HREG_e(176i32);
    pub const CV_SHMEDIA_FR49: CV_HREG_e = CV_HREG_e(177i32);
    pub const CV_SHMEDIA_FR5: CV_HREG_e = CV_HREG_e(133i32);
    pub const CV_SHMEDIA_FR50: CV_HREG_e = CV_HREG_e(178i32);
    pub const CV_SHMEDIA_FR51: CV_HREG_e = CV_HREG_e(179i32);
    pub const CV_SHMEDIA_FR52: CV_HREG_e = CV_HREG_e(180i32);
    pub const CV_SHMEDIA_FR53: CV_HREG_e = CV_HREG_e(181i32);
    pub const CV_SHMEDIA_FR54: CV_HREG_e = CV_HREG_e(182i32);
    pub const CV_SHMEDIA_FR55: CV_HREG_e = CV_HREG_e(183i32);
    pub const CV_SHMEDIA_FR56: CV_HREG_e = CV_HREG_e(184i32);
    pub const CV_SHMEDIA_FR57: CV_HREG_e = CV_HREG_e(185i32);
    pub const CV_SHMEDIA_FR58: CV_HREG_e = CV_HREG_e(186i32);
    pub const CV_SHMEDIA_FR59: CV_HREG_e = CV_HREG_e(187i32);
    pub const CV_SHMEDIA_FR6: CV_HREG_e = CV_HREG_e(134i32);
    pub const CV_SHMEDIA_FR60: CV_HREG_e = CV_HREG_e(188i32);
    pub const CV_SHMEDIA_FR61: CV_HREG_e = CV_HREG_e(189i32);
    pub const CV_SHMEDIA_FR62: CV_HREG_e = CV_HREG_e(190i32);
    pub const CV_SHMEDIA_FR63: CV_HREG_e = CV_HREG_e(191i32);
    pub const CV_SHMEDIA_FR7: CV_HREG_e = CV_HREG_e(135i32);
    pub const CV_SHMEDIA_FR8: CV_HREG_e = CV_HREG_e(136i32);
    pub const CV_SHMEDIA_FR9: CV_HREG_e = CV_HREG_e(137i32);
    pub const CV_SHMEDIA_FV0: CV_HREG_e = CV_HREG_e(512i32);
    pub const CV_SHMEDIA_FV12: CV_HREG_e = CV_HREG_e(524i32);
    pub const CV_SHMEDIA_FV16: CV_HREG_e = CV_HREG_e(528i32);
    pub const CV_SHMEDIA_FV20: CV_HREG_e = CV_HREG_e(532i32);
    pub const CV_SHMEDIA_FV24: CV_HREG_e = CV_HREG_e(536i32);
    pub const CV_SHMEDIA_FV28: CV_HREG_e = CV_HREG_e(540i32);
    pub const CV_SHMEDIA_FV32: CV_HREG_e = CV_HREG_e(544i32);
    pub const CV_SHMEDIA_FV36: CV_HREG_e = CV_HREG_e(548i32);
    pub const CV_SHMEDIA_FV4: CV_HREG_e = CV_HREG_e(516i32);
    pub const CV_SHMEDIA_FV40: CV_HREG_e = CV_HREG_e(552i32);
    pub const CV_SHMEDIA_FV44: CV_HREG_e = CV_HREG_e(556i32);
    pub const CV_SHMEDIA_FV48: CV_HREG_e = CV_HREG_e(560i32);
    pub const CV_SHMEDIA_FV52: CV_HREG_e = CV_HREG_e(564i32);
    pub const CV_SHMEDIA_FV56: CV_HREG_e = CV_HREG_e(568i32);
    pub const CV_SHMEDIA_FV60: CV_HREG_e = CV_HREG_e(572i32);
    pub const CV_SHMEDIA_FV8: CV_HREG_e = CV_HREG_e(520i32);
    pub const CV_SHMEDIA_GBR: CV_HREG_e = CV_HREG_e(26i32);
    pub const CV_SHMEDIA_MACH: CV_HREG_e = CV_HREG_e(91i32);
    pub const CV_SHMEDIA_MACL: CV_HREG_e = CV_HREG_e(90i32);
    pub const CV_SHMEDIA_MTRX0: CV_HREG_e = CV_HREG_e(1024i32);
    pub const CV_SHMEDIA_MTRX16: CV_HREG_e = CV_HREG_e(1040i32);
    pub const CV_SHMEDIA_MTRX32: CV_HREG_e = CV_HREG_e(1056i32);
    pub const CV_SHMEDIA_MTRX48: CV_HREG_e = CV_HREG_e(1072i32);
    pub const CV_SHMEDIA_NOREG: CV_HREG_e = CV_HREG_e(0i32);
    pub const CV_SHMEDIA_PC: CV_HREG_e = CV_HREG_e(93i32);
    pub const CV_SHMEDIA_PR: CV_HREG_e = CV_HREG_e(28i32);
    pub const CV_SHMEDIA_R0: CV_HREG_e = CV_HREG_e(10i32);
    pub const CV_SHMEDIA_R1: CV_HREG_e = CV_HREG_e(11i32);
    pub const CV_SHMEDIA_R10: CV_HREG_e = CV_HREG_e(20i32);
    pub const CV_SHMEDIA_R11: CV_HREG_e = CV_HREG_e(21i32);
    pub const CV_SHMEDIA_R12: CV_HREG_e = CV_HREG_e(22i32);
    pub const CV_SHMEDIA_R13: CV_HREG_e = CV_HREG_e(23i32);
    pub const CV_SHMEDIA_R14: CV_HREG_e = CV_HREG_e(24i32);
    pub const CV_SHMEDIA_R15: CV_HREG_e = CV_HREG_e(25i32);
    pub const CV_SHMEDIA_R16: CV_HREG_e = CV_HREG_e(26i32);
    pub const CV_SHMEDIA_R17: CV_HREG_e = CV_HREG_e(27i32);
    pub const CV_SHMEDIA_R18: CV_HREG_e = CV_HREG_e(28i32);
    pub const CV_SHMEDIA_R19: CV_HREG_e = CV_HREG_e(29i32);
    pub const CV_SHMEDIA_R2: CV_HREG_e = CV_HREG_e(12i32);
    pub const CV_SHMEDIA_R20: CV_HREG_e = CV_HREG_e(30i32);
    pub const CV_SHMEDIA_R21: CV_HREG_e = CV_HREG_e(31i32);
    pub const CV_SHMEDIA_R22: CV_HREG_e = CV_HREG_e(32i32);
    pub const CV_SHMEDIA_R23: CV_HREG_e = CV_HREG_e(33i32);
    pub const CV_SHMEDIA_R24: CV_HREG_e = CV_HREG_e(34i32);
    pub const CV_SHMEDIA_R25: CV_HREG_e = CV_HREG_e(35i32);
    pub const CV_SHMEDIA_R26: CV_HREG_e = CV_HREG_e(36i32);
    pub const CV_SHMEDIA_R27: CV_HREG_e = CV_HREG_e(37i32);
    pub const CV_SHMEDIA_R28: CV_HREG_e = CV_HREG_e(38i32);
    pub const CV_SHMEDIA_R29: CV_HREG_e = CV_HREG_e(39i32);
    pub const CV_SHMEDIA_R3: CV_HREG_e = CV_HREG_e(13i32);
    pub const CV_SHMEDIA_R30: CV_HREG_e = CV_HREG_e(40i32);
    pub const CV_SHMEDIA_R31: CV_HREG_e = CV_HREG_e(41i32);
    pub const CV_SHMEDIA_R32: CV_HREG_e = CV_HREG_e(42i32);
    pub const CV_SHMEDIA_R33: CV_HREG_e = CV_HREG_e(43i32);
    pub const CV_SHMEDIA_R34: CV_HREG_e = CV_HREG_e(44i32);
    pub const CV_SHMEDIA_R35: CV_HREG_e = CV_HREG_e(45i32);
    pub const CV_SHMEDIA_R36: CV_HREG_e = CV_HREG_e(46i32);
    pub const CV_SHMEDIA_R37: CV_HREG_e = CV_HREG_e(47i32);
    pub const CV_SHMEDIA_R38: CV_HREG_e = CV_HREG_e(48i32);
    pub const CV_SHMEDIA_R39: CV_HREG_e = CV_HREG_e(49i32);
    pub const CV_SHMEDIA_R4: CV_HREG_e = CV_HREG_e(14i32);
    pub const CV_SHMEDIA_R40: CV_HREG_e = CV_HREG_e(50i32);
    pub const CV_SHMEDIA_R41: CV_HREG_e = CV_HREG_e(51i32);
    pub const CV_SHMEDIA_R42: CV_HREG_e = CV_HREG_e(52i32);
    pub const CV_SHMEDIA_R43: CV_HREG_e = CV_HREG_e(53i32);
    pub const CV_SHMEDIA_R44: CV_HREG_e = CV_HREG_e(54i32);
    pub const CV_SHMEDIA_R45: CV_HREG_e = CV_HREG_e(55i32);
    pub const CV_SHMEDIA_R46: CV_HREG_e = CV_HREG_e(56i32);
    pub const CV_SHMEDIA_R47: CV_HREG_e = CV_HREG_e(57i32);
    pub const CV_SHMEDIA_R48: CV_HREG_e = CV_HREG_e(58i32);
    pub const CV_SHMEDIA_R49: CV_HREG_e = CV_HREG_e(59i32);
    pub const CV_SHMEDIA_R5: CV_HREG_e = CV_HREG_e(15i32);
    pub const CV_SHMEDIA_R50: CV_HREG_e = CV_HREG_e(60i32);
    pub const CV_SHMEDIA_R51: CV_HREG_e = CV_HREG_e(61i32);
    pub const CV_SHMEDIA_R52: CV_HREG_e = CV_HREG_e(62i32);
    pub const CV_SHMEDIA_R53: CV_HREG_e = CV_HREG_e(63i32);
    pub const CV_SHMEDIA_R54: CV_HREG_e = CV_HREG_e(64i32);
    pub const CV_SHMEDIA_R55: CV_HREG_e = CV_HREG_e(65i32);
    pub const CV_SHMEDIA_R56: CV_HREG_e = CV_HREG_e(66i32);
    pub const CV_SHMEDIA_R57: CV_HREG_e = CV_HREG_e(67i32);
    pub const CV_SHMEDIA_R58: CV_HREG_e = CV_HREG_e(68i32);
    pub const CV_SHMEDIA_R59: CV_HREG_e = CV_HREG_e(69i32);
    pub const CV_SHMEDIA_R6: CV_HREG_e = CV_HREG_e(16i32);
    pub const CV_SHMEDIA_R60: CV_HREG_e = CV_HREG_e(70i32);
    pub const CV_SHMEDIA_R61: CV_HREG_e = CV_HREG_e(71i32);
    pub const CV_SHMEDIA_R62: CV_HREG_e = CV_HREG_e(72i32);
    pub const CV_SHMEDIA_R63: CV_HREG_e = CV_HREG_e(73i32);
    pub const CV_SHMEDIA_R7: CV_HREG_e = CV_HREG_e(17i32);
    pub const CV_SHMEDIA_R8: CV_HREG_e = CV_HREG_e(18i32);
    pub const CV_SHMEDIA_R9: CV_HREG_e = CV_HREG_e(19i32);
    pub const CV_SHMEDIA_SR: CV_HREG_e = CV_HREG_e(2000i32);
    pub const CV_SHMEDIA_T: CV_HREG_e = CV_HREG_e(92i32);
    pub const CV_SHMEDIA_TR0: CV_HREG_e = CV_HREG_e(74i32);
    pub const CV_SHMEDIA_TR1: CV_HREG_e = CV_HREG_e(75i32);
    pub const CV_SHMEDIA_TR10: CV_HREG_e = CV_HREG_e(84i32);
    pub const CV_SHMEDIA_TR11: CV_HREG_e = CV_HREG_e(85i32);
    pub const CV_SHMEDIA_TR12: CV_HREG_e = CV_HREG_e(86i32);
    pub const CV_SHMEDIA_TR13: CV_HREG_e = CV_HREG_e(87i32);
    pub const CV_SHMEDIA_TR14: CV_HREG_e = CV_HREG_e(88i32);
    pub const CV_SHMEDIA_TR15: CV_HREG_e = CV_HREG_e(89i32);
    pub const CV_SHMEDIA_TR2: CV_HREG_e = CV_HREG_e(76i32);
    pub const CV_SHMEDIA_TR3: CV_HREG_e = CV_HREG_e(77i32);
    pub const CV_SHMEDIA_TR4: CV_HREG_e = CV_HREG_e(78i32);
    pub const CV_SHMEDIA_TR5: CV_HREG_e = CV_HREG_e(79i32);
    pub const CV_SHMEDIA_TR6: CV_HREG_e = CV_HREG_e(80i32);
    pub const CV_SHMEDIA_TR7: CV_HREG_e = CV_HREG_e(81i32);
    pub const CV_SHMEDIA_TR8: CV_HREG_e = CV_HREG_e(82i32);
    pub const CV_SHMEDIA_TR9: CV_HREG_e = CV_HREG_e(83i32);
    pub const CV_SH_FpR0: CV_HREG_e = CV_HREG_e(80i32);
    pub const CV_SH_FpR1: CV_HREG_e = CV_HREG_e(81i32);
    pub const CV_SH_FpR10: CV_HREG_e = CV_HREG_e(90i32);
    pub const CV_SH_FpR11: CV_HREG_e = CV_HREG_e(91i32);
    pub const CV_SH_FpR12: CV_HREG_e = CV_HREG_e(92i32);
    pub const CV_SH_FpR13: CV_HREG_e = CV_HREG_e(93i32);
    pub const CV_SH_FpR14: CV_HREG_e = CV_HREG_e(94i32);
    pub const CV_SH_FpR15: CV_HREG_e = CV_HREG_e(95i32);
    pub const CV_SH_FpR2: CV_HREG_e = CV_HREG_e(82i32);
    pub const CV_SH_FpR3: CV_HREG_e = CV_HREG_e(83i32);
    pub const CV_SH_FpR4: CV_HREG_e = CV_HREG_e(84i32);
    pub const CV_SH_FpR5: CV_HREG_e = CV_HREG_e(85i32);
    pub const CV_SH_FpR6: CV_HREG_e = CV_HREG_e(86i32);
    pub const CV_SH_FpR7: CV_HREG_e = CV_HREG_e(87i32);
    pub const CV_SH_FpR8: CV_HREG_e = CV_HREG_e(88i32);
    pub const CV_SH_FpR9: CV_HREG_e = CV_HREG_e(89i32);
    pub const CV_SH_Fpscr: CV_HREG_e = CV_HREG_e(75i32);
    pub const CV_SH_Fpul: CV_HREG_e = CV_HREG_e(76i32);
    pub const CV_SH_XFpR0: CV_HREG_e = CV_HREG_e(96i32);
    pub const CV_SH_XFpR1: CV_HREG_e = CV_HREG_e(97i32);
    pub const CV_SH_XFpR10: CV_HREG_e = CV_HREG_e(106i32);
    pub const CV_SH_XFpR11: CV_HREG_e = CV_HREG_e(107i32);
    pub const CV_SH_XFpR12: CV_HREG_e = CV_HREG_e(108i32);
    pub const CV_SH_XFpR13: CV_HREG_e = CV_HREG_e(109i32);
    pub const CV_SH_XFpR14: CV_HREG_e = CV_HREG_e(110i32);
    pub const CV_SH_XFpR15: CV_HREG_e = CV_HREG_e(111i32);
    pub const CV_SH_XFpR2: CV_HREG_e = CV_HREG_e(98i32);
    pub const CV_SH_XFpR3: CV_HREG_e = CV_HREG_e(99i32);
    pub const CV_SH_XFpR4: CV_HREG_e = CV_HREG_e(100i32);
    pub const CV_SH_XFpR5: CV_HREG_e = CV_HREG_e(101i32);
    pub const CV_SH_XFpR6: CV_HREG_e = CV_HREG_e(102i32);
    pub const CV_SH_XFpR7: CV_HREG_e = CV_HREG_e(103i32);
    pub const CV_SH_XFpR8: CV_HREG_e = CV_HREG_e(104i32);
    pub const CV_SH_XFpR9: CV_HREG_e = CV_HREG_e(105i32);
    pub const CV_TRI_A0: CV_HREG_e = CV_HREG_e(26i32);
    pub const CV_TRI_A1: CV_HREG_e = CV_HREG_e(27i32);
    pub const CV_TRI_A10: CV_HREG_e = CV_HREG_e(36i32);
    pub const CV_TRI_A11: CV_HREG_e = CV_HREG_e(37i32);
    pub const CV_TRI_A12: CV_HREG_e = CV_HREG_e(38i32);
    pub const CV_TRI_A13: CV_HREG_e = CV_HREG_e(39i32);
    pub const CV_TRI_A14: CV_HREG_e = CV_HREG_e(40i32);
    pub const CV_TRI_A15: CV_HREG_e = CV_HREG_e(41i32);
    pub const CV_TRI_A2: CV_HREG_e = CV_HREG_e(28i32);
    pub const CV_TRI_A3: CV_HREG_e = CV_HREG_e(29i32);
    pub const CV_TRI_A4: CV_HREG_e = CV_HREG_e(30i32);
    pub const CV_TRI_A5: CV_HREG_e = CV_HREG_e(31i32);
    pub const CV_TRI_A6: CV_HREG_e = CV_HREG_e(32i32);
    pub const CV_TRI_A7: CV_HREG_e = CV_HREG_e(33i32);
    pub const CV_TRI_A8: CV_HREG_e = CV_HREG_e(34i32);
    pub const CV_TRI_A9: CV_HREG_e = CV_HREG_e(35i32);
    pub const CV_TRI_ASI: CV_HREG_e = CV_HREG_e(78i32);
    pub const CV_TRI_BIV: CV_HREG_e = CV_HREG_e(65i32);
    pub const CV_TRI_BTV: CV_HREG_e = CV_HREG_e(66i32);
    pub const CV_TRI_CPMx_0: CV_HREG_e = CV_HREG_e(68i32);
    pub const CV_TRI_CPMx_1: CV_HREG_e = CV_HREG_e(69i32);
    pub const CV_TRI_CPMx_2: CV_HREG_e = CV_HREG_e(70i32);
    pub const CV_TRI_CPMx_3: CV_HREG_e = CV_HREG_e(71i32);
    pub const CV_TRI_CPRx_0: CV_HREG_e = CV_HREG_e(68i32);
    pub const CV_TRI_CPRx_1: CV_HREG_e = CV_HREG_e(69i32);
    pub const CV_TRI_CPRx_2: CV_HREG_e = CV_HREG_e(70i32);
    pub const CV_TRI_CPRx_3: CV_HREG_e = CV_HREG_e(71i32);
    pub const CV_TRI_CREVT: CV_HREG_e = CV_HREG_e(75i32);
    pub const CV_TRI_D0: CV_HREG_e = CV_HREG_e(10i32);
    pub const CV_TRI_D1: CV_HREG_e = CV_HREG_e(11i32);
    pub const CV_TRI_D10: CV_HREG_e = CV_HREG_e(20i32);
    pub const CV_TRI_D11: CV_HREG_e = CV_HREG_e(21i32);
    pub const CV_TRI_D12: CV_HREG_e = CV_HREG_e(22i32);
    pub const CV_TRI_D13: CV_HREG_e = CV_HREG_e(23i32);
    pub const CV_TRI_D14: CV_HREG_e = CV_HREG_e(24i32);
    pub const CV_TRI_D15: CV_HREG_e = CV_HREG_e(25i32);
    pub const CV_TRI_D2: CV_HREG_e = CV_HREG_e(12i32);
    pub const CV_TRI_D3: CV_HREG_e = CV_HREG_e(13i32);
    pub const CV_TRI_D4: CV_HREG_e = CV_HREG_e(14i32);
    pub const CV_TRI_D5: CV_HREG_e = CV_HREG_e(15i32);
    pub const CV_TRI_D6: CV_HREG_e = CV_HREG_e(16i32);
    pub const CV_TRI_D7: CV_HREG_e = CV_HREG_e(17i32);
    pub const CV_TRI_D8: CV_HREG_e = CV_HREG_e(18i32);
    pub const CV_TRI_D9: CV_HREG_e = CV_HREG_e(19i32);
    pub const CV_TRI_DBGSSR: CV_HREG_e = CV_HREG_e(72i32);
    pub const CV_TRI_DPMx_0: CV_HREG_e = CV_HREG_e(68i32);
    pub const CV_TRI_DPMx_1: CV_HREG_e = CV_HREG_e(69i32);
    pub const CV_TRI_DPMx_2: CV_HREG_e = CV_HREG_e(70i32);
    pub const CV_TRI_DPMx_3: CV_HREG_e = CV_HREG_e(71i32);
    pub const CV_TRI_DPRx_0: CV_HREG_e = CV_HREG_e(68i32);
    pub const CV_TRI_DPRx_1: CV_HREG_e = CV_HREG_e(69i32);
    pub const CV_TRI_DPRx_2: CV_HREG_e = CV_HREG_e(70i32);
    pub const CV_TRI_DPRx_3: CV_HREG_e = CV_HREG_e(71i32);
    pub const CV_TRI_E0: CV_HREG_e = CV_HREG_e(42i32);
    pub const CV_TRI_E10: CV_HREG_e = CV_HREG_e(47i32);
    pub const CV_TRI_E12: CV_HREG_e = CV_HREG_e(48i32);
    pub const CV_TRI_E14: CV_HREG_e = CV_HREG_e(49i32);
    pub const CV_TRI_E2: CV_HREG_e = CV_HREG_e(43i32);
    pub const CV_TRI_E4: CV_HREG_e = CV_HREG_e(44i32);
    pub const CV_TRI_E6: CV_HREG_e = CV_HREG_e(45i32);
    pub const CV_TRI_E8: CV_HREG_e = CV_HREG_e(46i32);
    pub const CV_TRI_EA0: CV_HREG_e = CV_HREG_e(50i32);
    pub const CV_TRI_EA10: CV_HREG_e = CV_HREG_e(55i32);
    pub const CV_TRI_EA12: CV_HREG_e = CV_HREG_e(56i32);
    pub const CV_TRI_EA14: CV_HREG_e = CV_HREG_e(57i32);
    pub const CV_TRI_EA2: CV_HREG_e = CV_HREG_e(51i32);
    pub const CV_TRI_EA4: CV_HREG_e = CV_HREG_e(52i32);
    pub const CV_TRI_EA6: CV_HREG_e = CV_HREG_e(53i32);
    pub const CV_TRI_EA8: CV_HREG_e = CV_HREG_e(54i32);
    pub const CV_TRI_EXEVT: CV_HREG_e = CV_HREG_e(73i32);
    pub const CV_TRI_FCX: CV_HREG_e = CV_HREG_e(61i32);
    pub const CV_TRI_ICR: CV_HREG_e = CV_HREG_e(64i32);
    pub const CV_TRI_ISP: CV_HREG_e = CV_HREG_e(63i32);
    pub const CV_TRI_LCX: CV_HREG_e = CV_HREG_e(62i32);
    pub const CV_TRI_MMUCON: CV_HREG_e = CV_HREG_e(77i32);
    pub const CV_TRI_NOREG: CV_HREG_e = CV_HREG_e(0i32);
    pub const CV_TRI_PC: CV_HREG_e = CV_HREG_e(60i32);
    pub const CV_TRI_PCXI: CV_HREG_e = CV_HREG_e(59i32);
    pub const CV_TRI_PSW: CV_HREG_e = CV_HREG_e(58i32);
    pub const CV_TRI_SWEVT: CV_HREG_e = CV_HREG_e(74i32);
    pub const CV_TRI_SYSCON: CV_HREG_e = CV_HREG_e(67i32);
    pub const CV_TRI_TFA: CV_HREG_e = CV_HREG_e(82i32);
    pub const CV_TRI_TPA: CV_HREG_e = CV_HREG_e(80i32);
    pub const CV_TRI_TPX: CV_HREG_e = CV_HREG_e(81i32);
    pub const CV_TRI_TRnEVT: CV_HREG_e = CV_HREG_e(76i32);
    pub const CV_TRI_TVA: CV_HREG_e = CV_HREG_e(79i32);
    pub const CV_private: CV_access_e = CV_access_e(1i32);
    pub const CV_protected: CV_access_e = CV_access_e(2i32);
    pub const CV_public: CV_access_e = CV_access_e(3i32);
    pub const DataIsConstant: DataKind = DataKind(9i32);
    pub const DataIsFileStatic: DataKind = DataKind(5i32);
    pub const DataIsGlobal: DataKind = DataKind(6i32);
    pub const DataIsLocal: DataKind = DataKind(1i32);
    pub const DataIsMember: DataKind = DataKind(7i32);
    pub const DataIsObjectPtr: DataKind = DataKind(4i32);
    pub const DataIsParam: DataKind = DataKind(3i32);
    pub const DataIsStaticLocal: DataKind = DataKind(2i32);
    pub const DataIsStaticMember: DataKind = DataKind(8i32);
    pub const DataIsUnknown: DataKind = DataKind(0i32);
    pub const E_DIA_FRAME_ACCESS: __MIDL___MIDL_itf_dia2_0000_0036_0001 =
        __MIDL___MIDL_itf_dia2_0000_0036_0001(-2140340122i32);
    pub const E_DIA_INPROLOG: __MIDL___MIDL_itf_dia2_0000_0036_0001 =
        __MIDL___MIDL_itf_dia2_0000_0036_0001(-2140340124i32);
    pub const E_DIA_SYNTAX: __MIDL___MIDL_itf_dia2_0000_0036_0001 =
        __MIDL___MIDL_itf_dia2_0000_0036_0001(-2140340123i32);
    pub const E_DIA_VALUE: __MIDL___MIDL_itf_dia2_0000_0036_0001 =
        __MIDL___MIDL_itf_dia2_0000_0036_0001(-2140340121i32);
    pub const E_PDB_ACCESS_DENIED: windows_core::HRESULT =
        windows_core::HRESULT(0x806D0010_u32 as _);
    pub const E_PDB_CORRUPT: windows_core::HRESULT = windows_core::HRESULT(0x806D000E_u32 as _);
    pub const E_PDB_DBG_NOT_FOUND: windows_core::HRESULT =
        windows_core::HRESULT(0x806D0013_u32 as _);
    pub const E_PDB_DEBUG_INFO_NOT_IN_PDB: windows_core::HRESULT =
        windows_core::HRESULT(0x806D0017_u32 as _);
    pub const E_PDB_FILE_SYSTEM: windows_core::HRESULT = windows_core::HRESULT(0x806D0004_u32 as _);
    pub const E_PDB_FORMAT: windows_core::HRESULT = windows_core::HRESULT(0x806D000C_u32 as _);
    pub const E_PDB_ILLEGAL_TYPE_EDIT: windows_core::HRESULT =
        windows_core::HRESULT(0x806D0011_u32 as _);
    pub const E_PDB_INVALID_AGE: windows_core::HRESULT = windows_core::HRESULT(0x806D0007_u32 as _);
    pub const E_PDB_INVALID_EXECUTABLE: windows_core::HRESULT =
        windows_core::HRESULT(0x806D0012_u32 as _);
    pub const E_PDB_INVALID_EXE_TIMESTAMP: windows_core::HRESULT =
        windows_core::HRESULT(0x806D0015_u32 as _);
    pub const E_PDB_INVALID_SIG: windows_core::HRESULT = windows_core::HRESULT(0x806D0006_u32 as _);
    pub const E_PDB_LIMIT: windows_core::HRESULT = windows_core::HRESULT(0x806D000D_u32 as _);
    pub const E_PDB_NOT_FOUND: windows_core::HRESULT = windows_core::HRESULT(0x806D0005_u32 as _);
    pub const E_PDB_NOT_IMPLEMENTED: windows_core::HRESULT =
        windows_core::HRESULT(0x806D000A_u32 as _);
    pub const E_PDB_NO_DEBUG_INFO: windows_core::HRESULT =
        windows_core::HRESULT(0x806D0014_u32 as _);
    pub const E_PDB_OBJECT_DISPOSED: windows_core::HRESULT =
        windows_core::HRESULT(0x806D001A_u32 as _);
    pub const E_PDB_OK: windows_core::HRESULT = windows_core::HRESULT(0x806D0001_u32 as _);
    pub const E_PDB_OUT_OF_MEMORY: windows_core::HRESULT =
        windows_core::HRESULT(0x806D0003_u32 as _);
    pub const E_PDB_OUT_OF_TI: windows_core::HRESULT = windows_core::HRESULT(0x806D0009_u32 as _);
    pub const E_PDB_PRECOMP_REQUIRED: windows_core::HRESULT =
        windows_core::HRESULT(0x806D0008_u32 as _);
    pub const E_PDB_RESERVED: windows_core::HRESULT = windows_core::HRESULT(0x806D0016_u32 as _);
    pub const E_PDB_SYMSRV_BAD_CACHE_PATH: windows_core::HRESULT =
        windows_core::HRESULT(0x806D0018_u32 as _);
    pub const E_PDB_SYMSRV_CACHE_FULL: windows_core::HRESULT =
        windows_core::HRESULT(0x806D0019_u32 as _);
    pub const E_PDB_TI16: windows_core::HRESULT = windows_core::HRESULT(0x806D000F_u32 as _);
    pub const E_PDB_USAGE: windows_core::HRESULT = windows_core::HRESULT(0x806D0002_u32 as _);
    pub const E_PDB_V1_PDB: windows_core::HRESULT = windows_core::HRESULT(0x806D000B_u32 as _);
    pub const FrameTypeFPO: StackFrameTypeEnum = StackFrameTypeEnum(0i32);
    pub const FrameTypeFrameData: StackFrameTypeEnum = StackFrameTypeEnum(4i32);
    pub const FrameTypeStandard: StackFrameTypeEnum = StackFrameTypeEnum(3i32);
    pub const FrameTypeTSS: StackFrameTypeEnum = StackFrameTypeEnum(2i32);
    pub const FrameTypeTrap: StackFrameTypeEnum = StackFrameTypeEnum(1i32);
    pub const FrameTypeUnknown: StackFrameTypeEnum = StackFrameTypeEnum(-1i32);
    pub const LocInMetaData: LocationType = LocationType(9i32);
    pub const LocIsBitField: LocationType = LocationType(6i32);
    pub const LocIsConstant: LocationType = LocationType(10i32);
    pub const LocIsEnregistered: LocationType = LocationType(5i32);
    pub const LocIsIlRel: LocationType = LocationType(8i32);
    pub const LocIsNull: LocationType = LocationType(0i32);
    pub const LocIsRegRel: LocationType = LocationType(3i32);
    pub const LocIsRegRelAliasIndir: LocationType = LocationType(11i32);
    pub const LocIsSlot: LocationType = LocationType(7i32);
    pub const LocIsStatic: LocationType = LocationType(1i32);
    pub const LocIsTLS: LocationType = LocationType(2i32);
    pub const LocIsThisRel: LocationType = LocationType(4i32);
    pub const LocTypeMax: LocationType = LocationType(12i32);
    pub const MemTypeAny: MemoryTypeEnum = MemoryTypeEnum(-1i32);
    pub const MemTypeCode: MemoryTypeEnum = MemoryTypeEnum(0i32);
    pub const MemTypeCodeOnHeap: MemoryTypeEnum = MemoryTypeEnum(3i32);
    pub const MemTypeData: MemoryTypeEnum = MemoryTypeEnum(1i32);
    pub const MemTypeStack: MemoryTypeEnum = MemoryTypeEnum(2i32);
    pub const NAMEHASH_BUILD_COMPLETE: i32 = 3i32;
    pub const NAMEHASH_BUILD_ERROR: i32 = 4i32;
    pub const NAMEHASH_BUILD_FAIL_TO_OPEN_MOD: i32 = 5i32;
    pub const NAMEHASH_BUILD_OOM: i32 = 4i32;
    pub const NAMEHASH_BUILD_PAUSE: i32 = 1i32;
    pub const NAMEHASH_BUILD_RESUME: i32 = 2i32;
    pub const NAMEHASH_BUILD_START: i32 = 0i32;
    pub const SymTagAnnotation: SymTag = SymTag(8i32);
    pub const SymTagArrayType: SymTag = SymTag(15i32);
    pub const SymTagBaseClass: SymTag = SymTag(18i32);
    pub const SymTagBaseInterface: SymTag = SymTag(33i32);
    pub const SymTagBaseType: SymTag = SymTag(16i32);
    pub const SymTagBlock: SymTag = SymTag(6i32);
    pub const SymTagCallSite: SymTag = SymTag(31i32);
    pub const SymTagCallee: SymTag = SymTag(38i32);
    pub const SymTagCaller: SymTag = SymTag(37i32);
    pub const SymTagCoffGroup: SymTag = SymTag(41i32);
    pub const SymTagCompiland: SymTag = SymTag(2i32);
    pub const SymTagCompilandDetails: SymTag = SymTag(3i32);
    pub const SymTagCompilandEnv: SymTag = SymTag(4i32);
    pub const SymTagCustom: SymTag = SymTag(26i32);
    pub const SymTagCustomType: SymTag = SymTag(28i32);
    pub const SymTagData: SymTag = SymTag(7i32);
    pub const SymTagDimension: SymTag = SymTag(30i32);
    pub const SymTagEnum: SymTag = SymTag(12i32);
    pub const SymTagExe: SymTag = SymTag(1i32);
    pub const SymTagExport: SymTag = SymTag(39i32);
    pub const SymTagFriend: SymTag = SymTag(19i32);
    pub const SymTagFuncDebugEnd: SymTag = SymTag(22i32);
    pub const SymTagFuncDebugStart: SymTag = SymTag(21i32);
    pub const SymTagFunction: SymTag = SymTag(5i32);
    pub const SymTagFunctionArgType: SymTag = SymTag(20i32);
    pub const SymTagFunctionType: SymTag = SymTag(13i32);
    pub const SymTagHLSLType: SymTag = SymTag(36i32);
    pub const SymTagHeapAllocationSite: SymTag = SymTag(40i32);
    pub const SymTagInlineSite: SymTag = SymTag(32i32);
    pub const SymTagInlinee: SymTag = SymTag(42i32);
    pub const SymTagLabel: SymTag = SymTag(9i32);
    pub const SymTagManagedType: SymTag = SymTag(29i32);
    pub const SymTagMatrixType: SymTag = SymTag(35i32);
    pub const SymTagMax: SymTag = SymTag(44i32);
    pub const SymTagNull: SymTag = SymTag(0i32);
    pub const SymTagPointerType: SymTag = SymTag(14i32);
    pub const SymTagPublicSymbol: SymTag = SymTag(10i32);
    pub const SymTagTaggedUnionCase: SymTag = SymTag(43i32);
    pub const SymTagThunk: SymTag = SymTag(27i32);
    pub const SymTagTypedef: SymTag = SymTag(17i32);
    pub const SymTagUDT: SymTag = SymTag(11i32);
    pub const SymTagUsingNamespace: SymTag = SymTag(23i32);
    pub const SymTagVTable: SymTag = SymTag(25i32);
    pub const SymTagVTableShape: SymTag = SymTag(24i32);
    pub const SymTagVectorType: SymTag = SymTag(34i32);
    pub const THUNK_ORDINAL_ADJUSTOR: THUNK_ORDINAL = THUNK_ORDINAL(1i32);
    pub const THUNK_ORDINAL_LOAD: THUNK_ORDINAL = THUNK_ORDINAL(4i32);
    pub const THUNK_ORDINAL_NOTYPE: THUNK_ORDINAL = THUNK_ORDINAL(0i32);
    pub const THUNK_ORDINAL_PCODE: THUNK_ORDINAL = THUNK_ORDINAL(3i32);
    pub const THUNK_ORDINAL_TRAMP_ARM64XSAMEADDRESS: THUNK_ORDINAL = THUNK_ORDINAL(8i32);
    pub const THUNK_ORDINAL_TRAMP_BRANCHISLAND: THUNK_ORDINAL = THUNK_ORDINAL(6i32);
    pub const THUNK_ORDINAL_TRAMP_FUNCOVERRIDING: THUNK_ORDINAL = THUNK_ORDINAL(9i32);
    pub const THUNK_ORDINAL_TRAMP_INCREMENTAL: THUNK_ORDINAL = THUNK_ORDINAL(5i32);
    pub const THUNK_ORDINAL_TRAMP_STRICTICF: THUNK_ORDINAL = THUNK_ORDINAL(7i32);
    pub const THUNK_ORDINAL_VCALL: THUNK_ORDINAL = THUNK_ORDINAL(2i32);
    pub const UdtClass: UdtKind = UdtKind(1i32);
    pub const UdtInterface: UdtKind = UdtKind(3i32);
    pub const UdtStruct: UdtKind = UdtKind(0i32);
    pub const UdtTaggedUnion: UdtKind = UdtKind(4i32);
    pub const UdtUnion: UdtKind = UdtKind(2i32);
    pub const btBCD: BasicType = BasicType(9i32);
    pub const btBSTR: BasicType = BasicType(30i32);
    pub const btBit: BasicType = BasicType(29i32);
    pub const btBool: BasicType = BasicType(10i32);
    pub const btChar: BasicType = BasicType(2i32);
    pub const btChar16: BasicType = BasicType(32i32);
    pub const btChar32: BasicType = BasicType(33i32);
    pub const btChar8: BasicType = BasicType(34i32);
    pub const btComplex: BasicType = BasicType(28i32);
    pub const btCurrency: BasicType = BasicType(25i32);
    pub const btDate: BasicType = BasicType(26i32);
    pub const btFloat: BasicType = BasicType(8i32);
    pub const btHresult: BasicType = BasicType(31i32);
    pub const btInt: BasicType = BasicType(6i32);
    pub const btLong: BasicType = BasicType(13i32);
    pub const btNoType: BasicType = BasicType(0i32);
    pub const btUInt: BasicType = BasicType(7i32);
    pub const btULong: BasicType = BasicType(14i32);
    pub const btVariant: BasicType = BasicType(27i32);
    pub const btVoid: BasicType = BasicType(1i32);
    pub const btWChar: BasicType = BasicType(3i32);
    pub const nsCaseInRegularExpression: NameSearchOptions = NameSearchOptions(10i32);
    pub const nsCaseInsensitive: NameSearchOptions = NameSearchOptions(2i32);
    pub const nsCaseSensitive: NameSearchOptions = NameSearchOptions(1i32);
    pub const nsFNameExt: NameSearchOptions = NameSearchOptions(6i32);
    pub const nsNone: NameSearchOptions = NameSearchOptions(0i32);
    pub const nsRegularExpression: NameSearchOptions = NameSearchOptions(9i32);
    pub const nsfCaseInsensitive: NameSearchOptions = NameSearchOptions(2i32);
    pub const nsfCaseSensitive: NameSearchOptions = NameSearchOptions(1i32);
    pub const nsfFNameExt: NameSearchOptions = NameSearchOptions(4i32);
    pub const nsfRegularExpression: NameSearchOptions = NameSearchOptions(8i32);
    pub const nsfUndecoratedName: NameSearchOptions = NameSearchOptions(16i32);
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct BasicType(pub i32);
    impl windows_core::TypeKind for BasicType {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for BasicType {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("BasicType").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct CV_AssociationKind_e(pub i32);
    impl windows_core::TypeKind for CV_AssociationKind_e {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for CV_AssociationKind_e {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("CV_AssociationKind_e")
                .field(&self.0)
                .finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct CV_CFL_LANG(pub i32);
    impl windows_core::TypeKind for CV_CFL_LANG {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for CV_CFL_LANG {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("CV_CFL_LANG").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct CV_CPU_TYPE_e(pub i32);
    impl windows_core::TypeKind for CV_CPU_TYPE_e {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for CV_CPU_TYPE_e {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("CV_CPU_TYPE_e").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct CV_CoroutineKind_e(pub i32);
    impl windows_core::TypeKind for CV_CoroutineKind_e {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for CV_CoroutineKind_e {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("CV_CoroutineKind_e").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct CV_HLSLMemorySpace_e(pub i32);
    impl windows_core::TypeKind for CV_HLSLMemorySpace_e {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for CV_HLSLMemorySpace_e {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("CV_HLSLMemorySpace_e")
                .field(&self.0)
                .finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct CV_HLSLREG_e(pub i32);
    impl windows_core::TypeKind for CV_HLSLREG_e {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for CV_HLSLREG_e {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("CV_HLSLREG_e").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct CV_HREG_e(pub i32);
    impl windows_core::TypeKind for CV_HREG_e {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for CV_HREG_e {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("CV_HREG_e").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct CV_SourceChksum_t(pub i32);
    impl windows_core::TypeKind for CV_SourceChksum_t {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for CV_SourceChksum_t {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("CV_SourceChksum_t").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct CV_access_e(pub i32);
    impl windows_core::TypeKind for CV_access_e {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for CV_access_e {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("CV_access_e").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct CV_builtin_e(pub i32);
    impl windows_core::TypeKind for CV_builtin_e {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for CV_builtin_e {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("CV_builtin_e").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct CV_call_e(pub i32);
    impl windows_core::TypeKind for CV_call_e {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for CV_call_e {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("CV_call_e").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct CV_modifier_e(pub i32);
    impl windows_core::TypeKind for CV_modifier_e {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for CV_modifier_e {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("CV_modifier_e").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct DataKind(pub i32);
    impl windows_core::TypeKind for DataKind {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for DataKind {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("DataKind").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct LocationType(pub i32);
    impl windows_core::TypeKind for LocationType {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for LocationType {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("LocationType").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct MemoryTypeEnum(pub i32);
    impl windows_core::TypeKind for MemoryTypeEnum {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for MemoryTypeEnum {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("MemoryTypeEnum").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct NameSearchOptions(pub i32);
    impl windows_core::TypeKind for NameSearchOptions {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for NameSearchOptions {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("NameSearchOptions").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct StackFrameTypeEnum(pub i32);
    impl windows_core::TypeKind for StackFrameTypeEnum {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for StackFrameTypeEnum {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("StackFrameTypeEnum").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct SymTag(pub i32);
    impl windows_core::TypeKind for SymTag {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for SymTag {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("SymTag").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct THUNK_ORDINAL(pub i32);
    impl windows_core::TypeKind for THUNK_ORDINAL {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for THUNK_ORDINAL {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("THUNK_ORDINAL").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct UdtKind(pub i32);
    impl windows_core::TypeKind for UdtKind {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for UdtKind {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("UdtKind").field(&self.0).finish()
        }
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, Copy, Clone, Default)]
    pub struct __MIDL___MIDL_itf_dia2_0000_0036_0001(pub i32);
    impl windows_core::TypeKind for __MIDL___MIDL_itf_dia2_0000_0036_0001 {
        type TypeKind = windows_core::CopyType;
    }
    impl core::fmt::Debug for __MIDL___MIDL_itf_dia2_0000_0036_0001 {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_tuple("__MIDL___MIDL_itf_dia2_0000_0036_0001")
                .field(&self.0)
                .finish()
        }
    }
    #[repr(C)]
    #[derive(Clone, Copy, Debug, Eq, PartialEq)]
    pub struct DiaAddressMapEntry {
        pub rva: u32,
        pub rvaTo: u32,
    }
    impl windows_core::TypeKind for DiaAddressMapEntry {
        type TypeKind = windows_core::CopyType;
    }
    impl Default for DiaAddressMapEntry {
        fn default() -> Self {
            unsafe { core::mem::zeroed() }
        }
    }
    pub const DiaSource: windows_core::GUID =
        windows_core::GUID::from_u128(0xe6756135_1e65_4d17_8576_610761398c3c);
    pub const DiaSourceAlt: windows_core::GUID =
        windows_core::GUID::from_u128(0x91904831_49ca_4766_b95c_25397e2dd6dc);
    pub const DiaStackWalker: windows_core::GUID =
        windows_core::GUID::from_u128(0xce4a85db_5768_475b_a4e1_c0bca2112a6b);
    #[repr(C)]
    #[derive(Clone, Copy, Debug, Eq, PartialEq)]
    pub struct DiaTagValue {
        pub value: [u8; 16],
        pub valueSizeBytes: u8,
    }
    impl windows_core::TypeKind for DiaTagValue {
        type TypeKind = windows_core::CopyType;
    }
    impl Default for DiaTagValue {
        fn default() -> Self {
            unsafe { core::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Clone, Copy, Debug, Eq, PartialEq)]
    pub struct __MIDL___MIDL_itf_dia2_0000_0045_0001 {
        pub ulOffStart: u32,
        pub cbProcSize: u32,
        pub cdwLocals: u32,
        pub cdwParams: u16,
        pub cdwFlags: u16,
    }
    impl windows_core::TypeKind for __MIDL___MIDL_itf_dia2_0000_0045_0001 {
        type TypeKind = windows_core::CopyType;
    }
    impl Default for __MIDL___MIDL_itf_dia2_0000_0045_0001 {
        fn default() -> Self {
            unsafe { core::mem::zeroed() }
        }
    }
}
